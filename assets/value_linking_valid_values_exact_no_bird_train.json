[
    {
        "question": "What is the highest eligible free rate for K-12 students in the schools in Alameda County?",
        "SQL": "SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` FROM frpm WHERE `County Name` = 'Alameda' ORDER BY (CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)`) DESC LIMIT 1",
        "tables": [
            "frpm"
        ],
        "columns": [
            "frpm.county name",
            "frpm.free meal count (k-12)",
            "frpm.enrollment (k-12)"
        ],
        "values": [
            {
                "table": "frpm",
                "column": "county name",
                "value": "Alameda",
                "condition": "="
            }
        ],
        "db_id": "california_schools",
        "source": "bird_dev",
        "evidence": "Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`",
        "values_list": [
            "frpm.county name.alameda"
        ]
    },
    {
        "question": "Please list the lowest three eligible free rates for students aged 5-17 in continuation schools.",
        "SQL": "SELECT `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` FROM frpm WHERE `Educational Option Type` = 'Continuation School' AND `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` IS NOT NULL ORDER BY `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` ASC LIMIT 3",
        "tables": [
            "frpm"
        ],
        "columns": [
            "frpm.enrollment (ages 5-17)",
            "frpm.educational option type",
            "frpm.free meal count (ages 5-17)"
        ],
        "values": [
            {
                "table": "frpm",
                "column": "educational option type",
                "value": "Continuation School",
                "condition": "="
            }
        ],
        "db_id": "california_schools",
        "source": "bird_dev",
        "evidence": "Eligible free rates for students aged 5-17 = `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`",
        "values_list": [
            "frpm.educational option type.continuation school"
        ]
    },
    {
        "question": "Which active district has the highest average score in Reading?",
        "SQL": "SELECT T1.District FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Active' ORDER BY T2.AvgScrRead DESC LIMIT 1",
        "tables": [
            "satscores",
            "schools"
        ],
        "columns": [
            "satscores.avgscrread",
            "schools.district",
            "schools.cdscode",
            "satscores.cds",
            "schools.statustype"
        ],
        "values": [
            {
                "table": "schools",
                "column": "statustype",
                "value": "Active",
                "condition": "="
            }
        ],
        "db_id": "california_schools",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "schools.statustype.active"
        ]
    },
    {
        "question": "How many schools in Fresno (directly funded) have number of test takers not more than 250?",
        "SQL": "SELECT COUNT(T1.CDSCode) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.`Charter Funding Type` = 'Directly funded' AND T1.`County Name` = 'Fresno' AND T2.NumTstTakr <= 250",
        "tables": [
            "frpm",
            "satscores"
        ],
        "columns": [
            "satscores.numtsttakr",
            "frpm.cdscode",
            "frpm.charter funding type",
            "satscores.cds",
            "frpm.county name"
        ],
        "values": [
            {
                "table": "satscores",
                "column": "numtsttakr",
                "value": "250",
                "condition": "<="
            },
            {
                "table": "frpm",
                "column": "charter funding type",
                "value": "Directly funded",
                "condition": "="
            },
            {
                "table": "frpm",
                "column": "county name",
                "value": "Fresno",
                "condition": "="
            }
        ],
        "db_id": "california_schools",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "satscores.numtsttakr.250",
            "frpm.charter funding type.directly funded",
            "frpm.county name.fresno"
        ]
    },
    {
        "question": "How many schools in Amador which the Low Grade is 9 and the High Grade is 12?",
        "SQL": "SELECT COUNT(T1.`School Name`) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Amador' AND T1.`Low Grade` = 9 AND T1.`High Grade` = 12",
        "tables": [
            "frpm",
            "schools"
        ],
        "columns": [
            "frpm.high grade",
            "frpm.school name",
            "frpm.cdscode",
            "schools.county",
            "schools.cdscode",
            "frpm.low grade"
        ],
        "values": [
            {
                "table": "frpm",
                "column": "high grade",
                "value": "12",
                "condition": "="
            },
            {
                "table": "schools",
                "column": "county",
                "value": "Amador",
                "condition": "="
            },
            {
                "table": "frpm",
                "column": "low grade",
                "value": "9",
                "condition": "="
            }
        ],
        "db_id": "california_schools",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "frpm.high grade.12",
            "schools.county.amador",
            "frpm.low grade.9"
        ]
    },
    {
        "question": "In Los Angeles how many schools have more than 500 free meals but less than 700 free or reduced price meals for K-12?",
        "SQL": "SELECT COUNT(CDSCode) FROM frpm WHERE `County Name` = 'Los Angeles' AND `Free Meal Count (K-12)` > 500 AND `FRPM Count (K-12)`< 700",
        "tables": [
            "frpm"
        ],
        "columns": [
            "frpm.county name",
            "frpm.frpm count (k-12)",
            "frpm.free meal count (k-12)",
            "frpm.cdscode"
        ],
        "values": [
            {
                "table": "frpm",
                "column": "frpm count (k-12)",
                "value": "700",
                "condition": "<"
            },
            {
                "table": "frpm",
                "column": "county name",
                "value": "Los Angeles",
                "condition": "="
            },
            {
                "table": "frpm",
                "column": "free meal count (k-12)",
                "value": "500",
                "condition": ">"
            }
        ],
        "db_id": "california_schools",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "frpm.frpm count (k-12).700",
            "frpm.county name.los angeles",
            "frpm.free meal count (k-12).500"
        ]
    },
    {
        "question": "Which school in Contra Costa has the highest number of test takers?",
        "SQL": "SELECT sname FROM satscores WHERE cname = 'Contra Costa' AND sname IS NOT NULL ORDER BY NumTstTakr DESC LIMIT 1",
        "tables": [
            "satscores"
        ],
        "columns": [
            "satscores.cname",
            "satscores.numtsttakr",
            "satscores.sname"
        ],
        "values": [
            {
                "table": "satscores",
                "column": "cname",
                "value": "Contra Costa",
                "condition": "="
            }
        ],
        "db_id": "california_schools",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "satscores.cname.contra costa"
        ]
    },
    {
        "question": "Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average.",
        "SQL": "SELECT T2.School, T2.DOC FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.FundingType = 'Locally funded' AND (T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > (SELECT AVG(T3.`Enrollment (K-12)` - T3.`Enrollment (Ages 5-17)`) FROM frpm AS T3 INNER JOIN schools AS T4 ON T3.CDSCode = T4.CDSCode WHERE T4.FundingType = 'Locally funded')",
        "tables": [
            "frpm",
            "schools"
        ],
        "columns": [
            "frpm.enrollment (ages 5-17)",
            "frpm.cdscode",
            "schools.school",
            "schools.cdscode",
            "schools.doc",
            "frpm.enrollment (k-12)",
            "schools.fundingtype"
        ],
        "values": [
            {
                "table": "schools",
                "column": "fundingtype",
                "value": "Locally funded",
                "condition": "="
            },
            {
                "table": "schools",
                "column": "fundingtype",
                "value": "Locally funded",
                "condition": "="
            },
            {
                "table": "schools",
                "column": "fundingtype",
                "value": "Locally funded",
                "condition": "="
            }
        ],
        "db_id": "california_schools",
        "source": "bird_dev",
        "evidence": "Difference between K-12 enrollment and 15-17 enrollment can be computed by `Enrollment (K-12)` - `Enrollment (Ages 5-17)`",
        "values_list": [
            "schools.fundingtype.locally funded",
            "schools.fundingtype.locally funded",
            "schools.fundingtype.locally funded"
        ]
    },
    {
        "question": "What is the free rate for students between the ages of 5 and 17 at the school run by Kacey Gibson?",
        "SQL": "SELECT CAST(T2.`Free Meal Count (Ages 5-17)` AS REAL) / T2.`Enrollment (Ages 5-17)` FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.AdmFName1 = 'Kacey' AND T1.AdmLName1 = 'Gibson'",
        "tables": [
            "frpm",
            "schools"
        ],
        "columns": [
            "frpm.enrollment (ages 5-17)",
            "frpm.cdscode",
            "schools.admfname1",
            "schools.cdscode",
            "schools.admlname1",
            "frpm.free meal count (ages 5-17)"
        ],
        "values": [
            {
                "table": "schools",
                "column": "admfname1",
                "value": "Kacey",
                "condition": "="
            },
            {
                "table": "schools",
                "column": "admlname1",
                "value": "Gibson",
                "condition": "="
            }
        ],
        "db_id": "california_schools",
        "source": "bird_dev",
        "evidence": "Eligible free rates for students aged 5-17 = `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`",
        "values_list": [
            "schools.admfname1.kacey",
            "schools.admlname1.gibson"
        ]
    },
    {
        "question": "What are the webpages for the Los Angeles County school that has between 2,000 and 3,000 test takers?",
        "SQL": "SELECT T2.Website FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.NumTstTakr BETWEEN 2000 AND 3000 AND T2.County = 'Los Angeles'",
        "tables": [
            "satscores",
            "schools"
        ],
        "columns": [
            "schools.website",
            "satscores.numtsttakr",
            "schools.county",
            "schools.cdscode",
            "satscores.cds"
        ],
        "values": [
            {
                "table": "schools",
                "column": "county",
                "value": "Los Angeles",
                "condition": "="
            }
        ],
        "db_id": "california_schools",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "schools.county.los angeles"
        ]
    },
    {
        "question": "What is the average number of test takers from Fresno schools that opened between 1/1/1980 and 12/31/1980?",
        "SQL": "SELECT AVG(T1.NumTstTakr) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE strftime('%Y', T2.OpenDate) = '1980' AND T2.County = 'Fresno'",
        "tables": [
            "satscores",
            "schools"
        ],
        "columns": [
            "schools.opendate",
            "satscores.numtsttakr",
            "schools.county",
            "schools.cdscode",
            "satscores.cds"
        ],
        "values": [
            {
                "table": "schools",
                "column": "county",
                "value": "Fresno",
                "condition": "="
            }
        ],
        "db_id": "california_schools",
        "source": "bird_dev",
        "evidence": "between 1/1/1980 and 12/31/1980 means the year = 1980",
        "values_list": [
            "schools.county.fresno"
        ]
    },
    {
        "question": "What is the telephone number for the school with the lowest average score in reading in Fresno Unified?",
        "SQL": "SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.District = 'Fresno Unified' AND T1.AvgScrRead IS NOT NULL ORDER BY T1.AvgScrRead ASC LIMIT 1",
        "tables": [
            "satscores",
            "schools"
        ],
        "columns": [
            "schools.phone",
            "satscores.avgscrread",
            "schools.district",
            "schools.cdscode",
            "satscores.cds"
        ],
        "values": [
            {
                "table": "schools",
                "column": "district",
                "value": "Fresno Unified",
                "condition": "="
            }
        ],
        "db_id": "california_schools",
        "source": "bird_dev",
        "evidence": "Fresno Unified is a name of district;",
        "values_list": [
            "schools.district.fresno unified"
        ]
    },
    {
        "question": "List the names of virtual schools that are among the top 5 in their respective counties based on average reading scores.",
        "SQL": "SELECT School FROM (SELECT T2.School,T1.AvgScrRead, RANK() OVER (PARTITION BY T2.County ORDER BY T1.AvgScrRead DESC) AS rnk FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' ) ranked_schools WHERE rnk <= 5",
        "tables": [
            "satscores",
            "schools"
        ],
        "columns": [
            "schools.school",
            "schools.virtual",
            "satscores.avgscrread",
            "schools.county",
            "schools.cdscode",
            "satscores.cds"
        ],
        "values": [
            {
                "table": "schools",
                "column": "virtual",
                "value": "F",
                "condition": "="
            },
            {
                "table": "",
                "column": "rnk",
                "value": "5",
                "condition": "<="
            },
            {
                "table": "schools",
                "column": "virtual",
                "value": "F",
                "condition": "="
            }
        ],
        "db_id": "california_schools",
        "source": "bird_dev",
        "evidence": "Exclusively virtual refers to Virtual = 'F'; respective counties means PARTITION BY County",
        "values_list": [
            "schools.virtual.f",
            ".rnk.5",
            "schools.virtual.f"
        ]
    },
    {
        "question": "What is the average writing score of each of the schools managed by Ricci Ulrich? List the schools and the corresponding average writing scores.",
        "SQL": "SELECT T2.School, T1.AvgScrWrite FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.AdmFName1 = 'Ricci' AND T2.AdmLName1 = 'Ulrich'",
        "tables": [
            "satscores",
            "schools"
        ],
        "columns": [
            "schools.school",
            "satscores.avgscrwrite",
            "schools.admfname1",
            "schools.cdscode",
            "schools.admlname1",
            "satscores.cds"
        ],
        "values": [
            {
                "table": "schools",
                "column": "admfname1",
                "value": "Ricci",
                "condition": "="
            },
            {
                "table": "schools",
                "column": "admlname1",
                "value": "Ulrich",
                "condition": "="
            }
        ],
        "db_id": "california_schools",
        "source": "bird_dev",
        "evidence": "Usually, administrators manage the school stuff.",
        "values_list": [
            "schools.admfname1.ricci",
            "schools.admlname1.ulrich"
        ]
    },
    {
        "question": "Which different county has the most number of closed schools? Please provide the name of each school as well as the closure date.",
        "SQL": "SELECT DISTINCT County, School, ClosedDate FROM schools WHERE County = ( SELECT County FROM schools WHERE StatusType = 'Closed' GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1 ) AND StatusType = 'Closed' AND school IS NOT NULL",
        "tables": [
            "schools"
        ],
        "columns": [
            "schools.closeddate",
            "schools.school",
            "schools.county",
            "schools.statustype"
        ],
        "values": [
            {
                "table": "schools",
                "column": "statustype",
                "value": "Closed",
                "condition": "="
            },
            {
                "table": "",
                "column": "statustype",
                "value": "Closed",
                "condition": "="
            },
            {
                "table": "",
                "column": "statustype",
                "value": "Closed",
                "condition": "="
            }
        ],
        "db_id": "california_schools",
        "source": "bird_dev",
        "evidence": "Closure date and closed date are synonyms; 'Closed' was mentioned in schools.StatusType.",
        "values_list": [
            "schools.statustype.closed",
            ".statustype.closed",
            ".statustype.closed"
        ]
    },
    {
        "question": "What is the total number of schools whose total SAT scores are greater or equal to 1500 whose mailing city is Lakeport?",
        "SQL": "SELECT COUNT(T1.cds) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Lakeport' AND (T1.AvgScrRead + T1.AvgScrMath + T1.AvgScrWrite) >= 1500",
        "tables": [
            "satscores",
            "schools"
        ],
        "columns": [
            "schools.mailcity",
            "satscores.avgscrmath",
            "satscores.avgscrwrite",
            "satscores.avgscrread",
            "schools.cdscode",
            "satscores.cds"
        ],
        "values": [
            {
                "table": "schools",
                "column": "mailcity",
                "value": "Lakeport",
                "condition": "="
            }
        ],
        "db_id": "california_schools",
        "source": "bird_dev",
        "evidence": "Total SAT scores can be computed by AvgScrRead + AvgScrMath + AvgScrWrite",
        "values_list": [
            "schools.mailcity.lakeport"
        ]
    },
    {
        "question": "How many test takers are there at the school/s whose mailing city address is in Fresno?",
        "SQL": "SELECT T1.NumTstTakr FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Fresno'",
        "tables": [
            "satscores",
            "schools"
        ],
        "columns": [
            "schools.cdscode",
            "schools.mailcity",
            "satscores.numtsttakr",
            "satscores.cds"
        ],
        "values": [
            {
                "table": "schools",
                "column": "mailcity",
                "value": "Fresno",
                "condition": "="
            }
        ],
        "db_id": "california_schools",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "schools.mailcity.fresno"
        ]
    },
    {
        "question": "Please specify all of the schools and their related mailing zip codes that are under Avetik Atoian's administration.",
        "SQL": "SELECT School, MailZip FROM schools WHERE AdmFName1 = 'Avetik' AND AdmLName1 = 'Atoian'",
        "tables": [
            "schools"
        ],
        "columns": [
            "schools.mailzip",
            "schools.admfname1",
            "schools.school",
            "schools.admlname1"
        ],
        "values": [
            {
                "table": "schools",
                "column": "admfname1",
                "value": "Avetik",
                "condition": "="
            },
            {
                "table": "schools",
                "column": "admlname1",
                "value": "Atoian",
                "condition": "="
            }
        ],
        "db_id": "california_schools",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "schools.admfname1.avetik",
            "schools.admlname1.atoian"
        ]
    },
    {
        "question": "Of the schools with a mailing state address in California, what is the ratio of the schools located in the county of Colusa against the school located in the county of Humboldt?",
        "SQL": "SELECT CAST(SUM(CASE WHEN County = 'Colusa' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN County = 'Humboldt' THEN 1 ELSE 0 END) FROM schools WHERE MailState = 'CA'",
        "tables": [
            "schools"
        ],
        "columns": [
            "schools.mailstate",
            "schools.county"
        ],
        "values": [
            {
                "table": "schools",
                "column": "mailstate",
                "value": "CA",
                "condition": "="
            },
            {
                "table": "schools",
                "column": "county",
                "value": "Humboldt",
                "condition": "="
            },
            {
                "table": "schools",
                "column": "county",
                "value": "Colusa",
                "condition": "="
            }
        ],
        "db_id": "california_schools",
        "source": "bird_dev",
        "evidence": "Ratio = count(schools in Colusa) / count(schools in Humboldt)",
        "values_list": [
            "schools.mailstate.ca",
            "schools.county.humboldt",
            "schools.county.colusa"
        ]
    },
    {
        "question": "Of all the schools with a mailing state address in California, how many are active in San Joaquin city?",
        "SQL": "SELECT COUNT(CDSCode) FROM schools WHERE City = 'San Joaquin' AND MailState = 'CA' AND StatusType = 'Active'",
        "tables": [
            "schools"
        ],
        "columns": [
            "schools.cdscode",
            "schools.mailstate",
            "schools.city",
            "schools.statustype"
        ],
        "values": [
            {
                "table": "schools",
                "column": "statustype",
                "value": "Active",
                "condition": "="
            },
            {
                "table": "schools",
                "column": "city",
                "value": "San Joaquin",
                "condition": "="
            },
            {
                "table": "schools",
                "column": "mailstate",
                "value": "CA",
                "condition": "="
            }
        ],
        "db_id": "california_schools",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "schools.statustype.active",
            "schools.city.san joaquin",
            "schools.mailstate.ca"
        ]
    },
    {
        "question": "What is the website for the schools under the administrations of Mike Larson and Dante Alvarez?",
        "SQL": "SELECT Website FROM schools WHERE (AdmFName1 = 'Mike' AND AdmLName1 = 'Larson') OR (AdmFName1 = 'Dante' AND AdmLName1 = 'Alvarez')",
        "tables": [
            "schools"
        ],
        "columns": [
            "schools.website",
            "schools.admfname1",
            "schools.admlname1"
        ],
        "values": [
            {
                "table": "schools",
                "column": "admfname1",
                "value": "Mike",
                "condition": "="
            },
            {
                "table": "schools",
                "column": "admlname1",
                "value": "Larson",
                "condition": "="
            },
            {
                "table": "schools",
                "column": "admfname1",
                "value": "Dante",
                "condition": "="
            },
            {
                "table": "schools",
                "column": "admlname1",
                "value": "Alvarez",
                "condition": "="
            }
        ],
        "db_id": "california_schools",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "schools.admfname1.mike",
            "schools.admlname1.larson",
            "schools.admfname1.dante",
            "schools.admlname1.alvarez"
        ]
    },
    {
        "question": "What is the total number of non-chartered schools in the county of Los Angeles with a percent (%) of eligible free meals for grades 1 through 12 that is less than 0.18%?",
        "SQL": "SELECT COUNT(T2.School) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.Charter = 0 AND CAST(T1.`Free Meal Count (K-12)` AS REAL) * 100 / T1.`Enrollment (K-12)` < 0.18",
        "tables": [
            "frpm",
            "schools"
        ],
        "columns": [
            "schools.charter",
            "frpm.cdscode",
            "schools.school",
            "frpm.free meal count (k-12)",
            "schools.county",
            "schools.cdscode",
            "frpm.enrollment (k-12)"
        ],
        "values": [
            {
                "table": "schools",
                "column": "county",
                "value": "Los Angeles",
                "condition": "="
            },
            {
                "table": "schools",
                "column": "charter",
                "value": "0",
                "condition": "="
            }
        ],
        "db_id": "california_schools",
        "source": "bird_dev",
        "evidence": "non-chartered schools refer to schools whose Charter = 0; K-12 means grades 1 through 12; percent of eligible free rate for K-12 = `Free Meal Count (K-12)` * 100 / `Enrollment (K-12)`",
        "values_list": [
            "schools.county.los angeles",
            "schools.charter.0"
        ]
    },
    {
        "question": "What is the total number of schools with a mailing city in Hickman belonging to the charter number 00D4?",
        "SQL": "SELECT COUNT(*) FROM schools WHERE CharterNum = '00D4' AND MailCity = 'Hickman'",
        "tables": [
            "schools"
        ],
        "columns": [
            "schools.mailcity",
            "schools.charternum"
        ],
        "values": [
            {
                "table": "schools",
                "column": "charternum",
                "value": "00D4",
                "condition": "="
            },
            {
                "table": "schools",
                "column": "mailcity",
                "value": "Hickman",
                "condition": "="
            }
        ],
        "db_id": "california_schools",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "schools.charternum.00d4",
            "schools.mailcity.hickman"
        ]
    },
    {
        "question": "Between 1/1/2000 to 12/31/2005, how many directly funded schools opened in the county of Stanislaus?",
        "SQL": "SELECT COUNT(School) FROM schools WHERE strftime('%Y', OpenDate) BETWEEN '2000' AND '2005' AND County = 'Stanislaus' AND FundingType = 'Directly funded'",
        "tables": [
            "schools"
        ],
        "columns": [
            "schools.opendate",
            "schools.county",
            "schools.school",
            "schools.fundingtype"
        ],
        "values": [
            {
                "table": "schools",
                "column": "fundingtype",
                "value": "Directly funded",
                "condition": "="
            },
            {
                "table": "schools",
                "column": "county",
                "value": "Stanislaus",
                "condition": "="
            }
        ],
        "db_id": "california_schools",
        "source": "bird_dev",
        "evidence": "Directly funded schools refers to FundingType = 'Directly Funded'",
        "values_list": [
            "schools.fundingtype.directly funded",
            "schools.county.stanislaus"
        ]
    },
    {
        "question": "What is the total amount of Community College District closure in 1989 in the city of San Francisco?",
        "SQL": "SELECT COUNT(School) FROM schools WHERE strftime('%Y', ClosedDate) = '1989' AND City = 'San Francisco' AND DOCType = 'Community College District'",
        "tables": [
            "schools"
        ],
        "columns": [
            "schools.closeddate",
            "schools.city",
            "schools.school",
            "schools.doctype"
        ],
        "values": [
            {
                "table": "schools",
                "column": "doctype",
                "value": "Community College District",
                "condition": "="
            },
            {
                "table": "schools",
                "column": "city",
                "value": "San Francisco",
                "condition": "="
            }
        ],
        "db_id": "california_schools",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "schools.doctype.community college district",
            "schools.city.san francisco"
        ]
    },
    {
        "question": "What is the educational level name for the schools with Breakfast Provision 2 in county code 37? Indicate the name of the school.",
        "SQL": "SELECT T2.EILName, T2.School FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`NSLP Provision Status` = 'Breakfast Provision 2' AND T1.`County Code` = 37",
        "tables": [
            "frpm",
            "schools"
        ],
        "columns": [
            "schools.school",
            "frpm.cdscode",
            "frpm.nslp provision status",
            "schools.cdscode",
            "schools.eilname",
            "frpm.county code"
        ],
        "values": [
            {
                "table": "frpm",
                "column": "nslp provision status",
                "value": "Breakfast Provision 2",
                "condition": "="
            },
            {
                "table": "frpm",
                "column": "county code",
                "value": "37",
                "condition": "="
            }
        ],
        "db_id": "california_schools",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "frpm.nslp provision status.breakfast provision 2",
            "frpm.county code.37"
        ]
    },
    {
        "question": "What is the most common type of grade span served in the city of Adelanto?",
        "SQL": "SELECT GSserved FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1",
        "tables": [
            "schools"
        ],
        "columns": [
            "schools.city",
            "schools.gsserved"
        ],
        "values": [
            {
                "table": "schools",
                "column": "city",
                "value": "Adelanto",
                "condition": "="
            }
        ],
        "db_id": "california_schools",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "schools.city.adelanto"
        ]
    },
    {
        "question": "Between San Diego and Santa Barbara, which county offers the most number of schools that does not offer physical building? Indicate the amount.",
        "SQL": "SELECT County, COUNT(Virtual) FROM schools WHERE (County = 'San Diego' OR County = 'Santa Barbara') AND Virtual = 'F' GROUP BY County ORDER BY COUNT(Virtual) DESC LIMIT 1",
        "tables": [
            "schools"
        ],
        "columns": [
            "schools.county",
            "schools.virtual"
        ],
        "values": [
            {
                "table": "schools",
                "column": "virtual",
                "value": "F",
                "condition": "="
            },
            {
                "table": "schools",
                "column": "county",
                "value": "San Diego",
                "condition": "="
            },
            {
                "table": "schools",
                "column": "county",
                "value": "Santa Barbara",
                "condition": "="
            }
        ],
        "db_id": "california_schools",
        "source": "bird_dev",
        "evidence": "'Does not offer physical building' means Virtual = F in the database.",
        "values_list": [
            "schools.virtual.f",
            "schools.county.san diego",
            "schools.county.santa barbara"
        ]
    },
    {
        "question": "In which city can you find the school in the state of California with the lowest latitude coordinates and what is its lowest grade? Indicate the school name.",
        "SQL": "SELECT T2.City, T1.`Low Grade`, T1.`School Name` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.State = 'CA' ORDER BY T2.Latitude ASC LIMIT 1",
        "tables": [
            "frpm",
            "schools"
        ],
        "columns": [
            "frpm.school name",
            "frpm.cdscode",
            "schools.latitude",
            "schools.cdscode",
            "frpm.low grade",
            "schools.state",
            "schools.city"
        ],
        "values": [
            {
                "table": "schools",
                "column": "state",
                "value": "CA",
                "condition": "="
            }
        ],
        "db_id": "california_schools",
        "source": "bird_dev",
        "evidence": "State of California refers to state = 'CA'",
        "values_list": [
            "schools.state.ca"
        ]
    },
    {
        "question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Alusine. List the district code of the school.",
        "SQL": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Alusine'",
        "tables": [
            "frpm",
            "schools"
        ],
        "columns": [
            "frpm.district code",
            "frpm.cdscode",
            "frpm.free meal count (k-12)",
            "schools.admfname1",
            "schools.cdscode",
            "frpm.enrollment (k-12)"
        ],
        "values": [
            {
                "table": "schools",
                "column": "admfname1",
                "value": "Alusine",
                "condition": "="
            }
        ],
        "db_id": "california_schools",
        "source": "bird_dev",
        "evidence": "Percent (%) Eligible Free (K-12) = `Free Meal Count (K-12)` / `Enrollment (K-12)` * 100%",
        "values_list": [
            "schools.admfname1.alusine"
        ]
    },
    {
        "question": "How many accounts who have region in Prague are eligible for loans?",
        "SQL": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T3.A3 = 'Prague'",
        "tables": [
            "loan",
            "district",
            "account"
        ],
        "columns": [
            "loan.account_id",
            "account.account_id",
            "account.district_id",
            "district.a3",
            "district.district_id"
        ],
        "values": [
            {
                "table": "district",
                "column": "a3",
                "value": "Prague",
                "condition": "="
            }
        ],
        "db_id": "financial",
        "source": "bird_dev",
        "evidence": "A3 contains the data of region",
        "values_list": [
            "district.a3.prague"
        ]
    },
    {
        "question": "List out the no. of districts that have female average salary is more than 6000 but less than 10000?",
        "SQL": "SELECT COUNT(DISTINCT T2.district_id)  FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A11 BETWEEN 6000 AND 10000",
        "tables": [
            "district",
            "client"
        ],
        "columns": [
            "district.district_id",
            "district.a11",
            "client.gender",
            "client.district_id"
        ],
        "values": [
            {
                "table": "client",
                "column": "gender",
                "value": "F",
                "condition": "="
            }
        ],
        "db_id": "financial",
        "source": "bird_dev",
        "evidence": "A11 refers to average salary; Female mapps to gender = 'F'",
        "values_list": [
            "client.gender.f"
        ]
    },
    {
        "question": "How many male customers who are living in North Bohemia have average salary greater than 8000?",
        "SQL": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A3 = 'north Bohemia' AND T2.A11 > 8000",
        "tables": [
            "district",
            "client"
        ],
        "columns": [
            "district.a11",
            "client.gender",
            "client.district_id",
            "district.a3",
            "district.district_id",
            "client.client_id"
        ],
        "values": [
            {
                "table": "district",
                "column": "a11",
                "value": "8000",
                "condition": ">"
            },
            {
                "table": "client",
                "column": "gender",
                "value": "M",
                "condition": "="
            },
            {
                "table": "district",
                "column": "a3",
                "value": "north Bohemia",
                "condition": "="
            }
        ],
        "db_id": "financial",
        "source": "bird_dev",
        "evidence": "Male means that gender = 'M'; A3 refers to region; A11 pertains to average salary.",
        "values_list": [
            "district.a11.8000",
            "client.gender.m",
            "district.a3.north bohemia"
        ]
    },
    {
        "question": "List out the account numbers of female clients who are oldest and has lowest average salary, calculate the gap between this lowest average salary with the highest average salary?",
        "SQL": "SELECT T1.account_id , ( SELECT MAX(A11) - MIN(A11) FROM district ) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T2.district_id = ( SELECT district_id FROM client WHERE gender = 'F' ORDER BY birth_date ASC LIMIT 1 ) ORDER BY T2.A11 DESC LIMIT 1",
        "tables": [
            "disp",
            "district",
            "client",
            "account"
        ],
        "columns": [
            "district.a11",
            "client.gender",
            "client.district_id",
            "disp.account_id",
            "account.account_id",
            "account.district_id",
            "disp.client_id",
            "client.birth_date",
            "district.district_id",
            "client.client_id"
        ],
        "values": [
            {
                "table": "client",
                "column": "gender",
                "value": "F",
                "condition": "="
            },
            {
                "table": "",
                "column": "gender",
                "value": "F",
                "condition": "="
            }
        ],
        "db_id": "financial",
        "source": "bird_dev",
        "evidence": "Female means gender = 'F'; A11 refers to average salary; Gap = highest average salary - lowest average salary; If the person A's birthdate > B's birthdate, it means that person B is order than person A.",
        "values_list": [
            "client.gender.f",
            ".gender.f"
        ]
    },
    {
        "question": "Among the account opened, how many female customers who were born before 1950 and stayed in Sokolov?",
        "SQL": "SELECT COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F' AND STRFTIME('%Y', T2.birth_date) < '1950' AND T1.A2 = 'Sokolov'",
        "tables": [
            "district",
            "client"
        ],
        "columns": [
            "client.gender",
            "client.district_id",
            "district.a2",
            "client.birth_date",
            "district.district_id",
            "client.client_id"
        ],
        "values": [
            {
                "table": "district",
                "column": "a2",
                "value": "Sokolov",
                "condition": "="
            },
            {
                "table": "client",
                "column": "gender",
                "value": "F",
                "condition": "="
            }
        ],
        "db_id": "financial",
        "source": "bird_dev",
        "evidence": "Customers refer to clients; Female refers to gender = 'F'; Names of districts appear in column A2",
        "values_list": [
            "district.a2.sokolov",
            "client.gender.f"
        ]
    },
    {
        "question": "How many accounts were opened in Litomerice in 1996?",
        "SQL": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) = '1996' AND T1.A2 = 'Litomerice'",
        "tables": [
            "district",
            "account"
        ],
        "columns": [
            "account.date",
            "district.a2",
            "account.account_id",
            "account.district_id",
            "district.district_id"
        ],
        "values": [
            {
                "table": "district",
                "column": "a2",
                "value": "Litomerice",
                "condition": "="
            }
        ],
        "db_id": "financial",
        "source": "bird_dev",
        "evidence": "A2 refers to district name; Litomerice is one of district names.",
        "values_list": [
            "district.a2.litomerice"
        ]
    },
    {
        "question": "For the first client who opened his/her account in Prague, what is his/her account ID?",
        "SQL": "SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague' ORDER BY T1.date ASC LIMIT 1",
        "tables": [
            "district",
            "account"
        ],
        "columns": [
            "account.date",
            "account.account_id",
            "account.district_id",
            "district.a3",
            "district.district_id"
        ],
        "values": [
            {
                "table": "district",
                "column": "a3",
                "value": "Prague",
                "condition": "="
            }
        ],
        "db_id": "financial",
        "source": "bird_dev",
        "evidence": "A3 stands for region names",
        "values_list": [
            "district.a3.prague"
        ]
    },
    {
        "question": "For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients?",
        "SQL": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' GROUP BY T2.A4 ORDER BY T2.A4 DESC LIMIT 1",
        "tables": [
            "district",
            "client"
        ],
        "columns": [
            "client.gender",
            "client.district_id",
            "district.a4",
            "district.a3",
            "district.district_id",
            "client.client_id"
        ],
        "values": [
            {
                "table": "district",
                "column": "a3",
                "value": "south Bohemia",
                "condition": "="
            },
            {
                "table": "client",
                "column": "gender",
                "value": "M",
                "condition": "="
            }
        ],
        "db_id": "financial",
        "source": "bird_dev",
        "evidence": "Percentage of the male clients = DIVIDE(COUNT(male clients), COUNT(clients)) * 100; Male refers to gender = 'M', A3 is the region name. A4 contains the information about inhabitants.",
        "values_list": [
            "district.a3.south bohemia",
            "client.gender.m"
        ]
    },
    {
        "question": "What is the percentage of loan amount that has been fully paid with no issue.",
        "SQL": "SELECT (CAST(SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS REAL) * 100) / SUM(amount) FROM loan",
        "tables": [
            "loan"
        ],
        "columns": [
            "loan.status",
            "loan.amount"
        ],
        "values": [
            {
                "table": "loan",
                "column": "status",
                "value": "A",
                "condition": "="
            }
        ],
        "db_id": "financial",
        "source": "bird_dev",
        "evidence": "Loan paid with no issue means contract finished, no problems; status = 'A' means contract finished, no problems; Percentage of accounts by condition = [(total(amount) & condition) / (total amount)] * 100%",
        "values_list": [
            "loan.status.a"
        ]
    },
    {
        "question": "From Year 1995 to 2000, who are the accounts holders from 'east Bohemia'. State the account ID the frequency of statement issuance.",
        "SQL": "SELECT T1.account_id, T1.frequency FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'east Bohemia' AND STRFTIME('%Y', T1.date) BETWEEN '1995' AND '2000'",
        "tables": [
            "district",
            "account"
        ],
        "columns": [
            "account.date",
            "account.frequency",
            "account.account_id",
            "account.district_id",
            "district.a3",
            "district.district_id"
        ],
        "values": [
            {
                "table": "district",
                "column": "a3",
                "value": "east Bohemia",
                "condition": "="
            }
        ],
        "db_id": "financial",
        "source": "bird_dev",
        "evidence": "Accounts holder refers to the person who own this account.",
        "values_list": [
            "district.a3.east bohemia"
        ]
    },
    {
        "question": "List account ID and account opening date for accounts from 'Prachatice'.",
        "SQL": "SELECT T1.account_id, T1.date FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Prachatice'",
        "tables": [
            "district",
            "account"
        ],
        "columns": [
            "account.date",
            "district.a2",
            "account.account_id",
            "account.district_id",
            "district.district_id"
        ],
        "values": [
            {
                "table": "district",
                "column": "a2",
                "value": "Prachatice",
                "condition": "="
            }
        ],
        "db_id": "financial",
        "source": "bird_dev",
        "evidence": "A2 refers to the names of districts.",
        "values_list": [
            "district.a2.prachatice"
        ]
    },
    {
        "question": "For loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996.",
        "SQL": "SELECT CAST((T3.A13 - T3.A12) AS REAL) * 100 / T3.A12 FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.status = 'D'",
        "tables": [
            "loan",
            "district",
            "account"
        ],
        "columns": [
            "loan.status",
            "loan.account_id",
            "district.a13",
            "account.account_id",
            "account.district_id",
            "district.district_id",
            "district.a12"
        ],
        "values": [
            {
                "table": "loan",
                "column": "status",
                "value": "D",
                "condition": "="
            }
        ],
        "db_id": "financial",
        "source": "bird_dev",
        "evidence": "Unemployment increment rate in percentage = [(unemployment rate 2016 - unemployment rate 2015) / unemployment rate 2015] * 100; unemployment rate 2015 appears in the A12; unemployment rate 2016 appears in the A13; Loan contracts which are still running where client are in debt can be presented as status = 'D'",
        "values_list": [
            "loan.status.d"
        ]
    },
    {
        "question": "Calculate the percentage of account from 'Decin' district for all accounts are opened in 1993.",
        "SQL": "SELECT CAST(SUM(T1.A2 = 'Decin') AS REAL) * 100 / COUNT(account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) = '1993'",
        "tables": [
            "district",
            "account"
        ],
        "columns": [
            "district.district_id",
            "district.a2",
            "account.date",
            "account.district_id"
        ],
        "values": [
            {
                "table": "district",
                "column": "a2",
                "value": "Decin",
                "condition": "="
            }
        ],
        "db_id": "financial",
        "source": "bird_dev",
        "evidence": "A2 contains the information about district.",
        "values_list": [
            "district.a2.decin"
        ]
    },
    {
        "question": "List the top nine districts, by descending order, from the highest to the lowest, the number of female account holders.",
        "SQL": "SELECT T2.A2, COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' GROUP BY T2.district_id, T2.A2 ORDER BY COUNT(T1.client_id) DESC LIMIT 9",
        "tables": [
            "district",
            "client"
        ],
        "columns": [
            "client.gender",
            "client.district_id",
            "district.a2",
            "district.district_id",
            "client.client_id"
        ],
        "values": [
            {
                "table": "client",
                "column": "gender",
                "value": "F",
                "condition": "="
            }
        ],
        "db_id": "financial",
        "source": "bird_dev",
        "evidence": "A2 refers to districts; Female refers to gender = 'F'",
        "values_list": [
            "client.gender.f"
        ]
    },
    {
        "question": "Which district has highest active loan?",
        "SQL": "SELECT T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.status IN ('C', 'D') GROUP BY T2.A3 ORDER BY SUM(T3.amount) DESC LIMIT 1",
        "tables": [
            "loan",
            "district",
            "account"
        ],
        "columns": [
            "loan.status",
            "loan.amount",
            "loan.account_id",
            "account.account_id",
            "account.district_id",
            "district.a3",
            "district.district_id"
        ],
        "values": [
            {
                "table": "loan",
                "column": "status",
                "value": "C"
            },
            {
                "table": "loan",
                "column": "status",
                "value": "D"
            }
        ],
        "db_id": "financial",
        "source": "bird_dev",
        "evidence": "A3 refers to district names; Active loan refers to running contracts; Status = 'C' stands for running contract, OK so far; Status = 'D' stands for running contract, client in debt",
        "values_list": [
            "loan.status.c",
            "loan.status.d"
        ]
    },
    {
        "question": "What is the average loan amount by male borrowers?",
        "SQL": "SELECT AVG(T4.amount) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.gender = 'M'",
        "tables": [
            "disp",
            "loan",
            "client",
            "account"
        ],
        "columns": [
            "client.gender",
            "loan.amount",
            "disp.account_id",
            "loan.account_id",
            "account.account_id",
            "disp.client_id",
            "client.client_id"
        ],
        "values": [
            {
                "table": "client",
                "column": "gender",
                "value": "M",
                "condition": "="
            }
        ],
        "db_id": "financial",
        "source": "bird_dev",
        "evidence": "Male refers to gender = 'M'",
        "values_list": [
            "client.gender.m"
        ]
    },
    {
        "question": "In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there?",
        "SQL": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A15 = (SELECT T3.A15 FROM district AS T3 ORDER BY T3.A15 DESC LIMIT 1, 1)",
        "tables": [
            "district",
            "client"
        ],
        "columns": [
            "client.gender",
            "client.district_id",
            "district.a15",
            "district.district_id",
            "client.client_id"
        ],
        "values": [
            {
                "table": "client",
                "column": "gender",
                "value": "M",
                "condition": "="
            }
        ],
        "db_id": "financial",
        "source": "bird_dev",
        "evidence": "Male refers to gender = 'M'; A15 stands for no. of commited crimes 1995",
        "values_list": [
            "client.gender.m"
        ]
    },
    {
        "question": "How many accounts are there in the district of \"Pisek\"?",
        "SQL": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Pisek'",
        "tables": [
            "district",
            "account"
        ],
        "columns": [
            "district.district_id",
            "district.a2",
            "account.account_id",
            "account.district_id"
        ],
        "values": [
            {
                "table": "district",
                "column": "a2",
                "value": "Pisek",
                "condition": "="
            }
        ],
        "db_id": "financial",
        "source": "bird_dev",
        "evidence": "A2 refers to district name",
        "values_list": [
            "district.a2.pisek"
        ]
    },
    {
        "question": "What are the accounts that have gold credit cards?",
        "SQL": "SELECT T2.account_id FROM disp AS T2  INNER JOIN card AS T1 ON T1.disp_id = T2.disp_id  WHERE T1.type = 'gold'",
        "tables": [
            "disp",
            "card"
        ],
        "columns": [
            "card.type",
            "card.disp_id",
            "disp.account_id",
            "disp.disp_id"
        ],
        "values": [
            {
                "table": "card",
                "column": "type",
                "value": "gold",
                "condition": "="
            }
        ],
        "db_id": "financial",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "card.type.gold"
        ]
    },
    {
        "question": "Who are the female account holders who own credit cards and also have loans?",
        "SQL": "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T5 ON T2.account_id = T5.account_id INNER JOIN loan AS T3 ON T5.account_id = T3.account_id INNER JOIN card AS T4 ON T2.disp_id = T4.disp_id WHERE T1.gender = 'F'",
        "tables": [
            "client",
            "disp",
            "loan",
            "account",
            "card"
        ],
        "columns": [
            "client.gender",
            "disp.account_id",
            "loan.account_id",
            "card.disp_id",
            "account.account_id",
            "disp.client_id",
            "client.client_id",
            "disp.disp_id"
        ],
        "values": [
            {
                "table": "client",
                "column": "gender",
                "value": "F",
                "condition": "="
            }
        ],
        "db_id": "financial",
        "source": "bird_dev",
        "evidence": "Female refers to gender = 'F'",
        "values_list": [
            "client.gender.f"
        ]
    },
    {
        "question": "How many female clients' accounts are in the region of South Bohemia?",
        "SQL": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A3 = 'south Bohemia'",
        "tables": [
            "district",
            "client"
        ],
        "columns": [
            "client.gender",
            "client.district_id",
            "district.a3",
            "district.district_id",
            "client.client_id"
        ],
        "values": [
            {
                "table": "client",
                "column": "gender",
                "value": "F",
                "condition": "="
            },
            {
                "table": "district",
                "column": "a3",
                "value": "south Bohemia",
                "condition": "="
            }
        ],
        "db_id": "financial",
        "source": "bird_dev",
        "evidence": "Female refers to gender = 'F'; A3 contains the region 'south Bohemia'",
        "values_list": [
            "client.gender.f",
            "district.a3.south bohemia"
        ]
    },
    {
        "question": "How many accounts in North Bohemia has made a transaction with the partner's bank being AB?",
        "SQL": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.bank = 'AB' AND T1.A3 = 'north Bohemia'",
        "tables": [
            "trans",
            "district",
            "account"
        ],
        "columns": [
            "trans.account_id",
            "account.account_id",
            "account.district_id",
            "trans.bank",
            "district.a3",
            "district.district_id"
        ],
        "values": [
            {
                "table": "trans",
                "column": "bank",
                "value": "AB",
                "condition": "="
            },
            {
                "table": "district",
                "column": "a3",
                "value": "north Bohemia",
                "condition": "="
            }
        ],
        "db_id": "financial",
        "source": "bird_dev",
        "evidence": "A3 contains the region names; North Bohemia is a region.",
        "values_list": [
            "trans.bank.ab",
            "district.a3.north bohemia"
        ]
    },
    {
        "question": "How many male clients in 'Hl.m. Praha' district?",
        "SQL": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A2 = 'Hl.m. Praha'",
        "tables": [
            "district",
            "client"
        ],
        "columns": [
            "client.gender",
            "client.district_id",
            "district.a2",
            "district.district_id",
            "client.client_id"
        ],
        "values": [
            {
                "table": "client",
                "column": "gender",
                "value": "M",
                "condition": "="
            },
            {
                "table": "district",
                "column": "a2",
                "value": "Hl.m. Praha",
                "condition": "="
            }
        ],
        "db_id": "financial",
        "source": "bird_dev",
        "evidence": "District data appears in the A2; Male means that gender = 'M'",
        "values_list": [
            "client.gender.m",
            "district.a2.hl.m. praha"
        ]
    },
    {
        "question": "How many percent of 'Gold' cards were issued prior to 1998?",
        "SQL": "SELECT CAST(SUM(type = 'gold' AND STRFTIME('%Y', issued) < '1998') AS REAL) * 100 / COUNT(card_id) FROM card",
        "tables": [
            "card"
        ],
        "columns": [
            "card.type",
            "card.card_id",
            "card.issued"
        ],
        "values": [
            {
                "table": "card",
                "column": "type",
                "value": "gold",
                "condition": "="
            }
        ],
        "db_id": "financial",
        "source": "bird_dev",
        "evidence": "Percent of Gold = [ count(type = 'gold' and issued date < 1998) / count(all cards)] * 100%",
        "values_list": [
            "card.type.gold"
        ]
    },
    {
        "question": "Who is the owner of the account with the largest loan amount?",
        "SQL": "SELECT T1.client_id FROM disp AS T1 INNER JOIN account AS T3 ON T1.account_id = T3.account_id INNER JOIN loan AS T2 ON T3.account_id = T2.account_id WHERE T1.type = 'OWNER' ORDER BY T2.amount DESC LIMIT 1",
        "tables": [
            "disp",
            "loan",
            "account"
        ],
        "columns": [
            "loan.amount",
            "disp.account_id",
            "loan.account_id",
            "account.account_id",
            "disp.client_id",
            "disp.type"
        ],
        "values": [
            {
                "table": "disp",
                "column": "type",
                "value": "OWNER",
                "condition": "="
            }
        ],
        "db_id": "financial",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "disp.type.owner"
        ]
    },
    {
        "question": "Which district has the most accounts with loan contracts finished with no problems?",
        "SQL": "SELECT T1.A2 FROM District AS T1 INNER JOIN Account AS T2 ON T1.District_id = T2.District_id INNER JOIN Loan AS T3 ON T2.Account_id = T3.Account_id WHERE T3.status = 'A' GROUP BY T1.District_id ORDER BY COUNT(T2.Account_id) DESC LIMIT 1",
        "tables": [
            "loan",
            "district",
            "account"
        ],
        "columns": [
            "loan.status",
            "loan.account_id",
            "district.a2",
            "account.account_id",
            "account.district_id",
            "district.district_id"
        ],
        "values": [
            {
                "table": "loan",
                "column": "status",
                "value": "A",
                "condition": "="
            }
        ],
        "db_id": "financial",
        "source": "bird_dev",
        "evidence": "status = 'A' refers to loan contracts finished with no problems",
        "values_list": [
            "loan.status.a"
        ]
    },
    {
        "question": "How many of the accounts are from Jesenik district?",
        "SQL": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A2 = 'Jesenik'",
        "tables": [
            "district",
            "account"
        ],
        "columns": [
            "district.district_id",
            "district.a2",
            "account.account_id",
            "account.district_id"
        ],
        "values": [
            {
                "table": "district",
                "column": "a2",
                "value": "Jesenik",
                "condition": "="
            }
        ],
        "db_id": "financial",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "district.a2.jesenik"
        ]
    },
    {
        "question": "What percentage of clients who opened their accounts in the district with an average salary of over 10000 are women?",
        "SQL": "SELECT CAST(SUM(T2.gender = 'F') AS REAL) * 100 / COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A11 > 10000",
        "tables": [
            "district",
            "client"
        ],
        "columns": [
            "district.a11",
            "client.gender",
            "client.district_id",
            "district.district_id",
            "client.client_id"
        ],
        "values": [
            {
                "table": "district",
                "column": "a11",
                "value": "10000",
                "condition": ">"
            },
            {
                "table": "client",
                "column": "gender",
                "value": "F",
                "condition": "="
            }
        ],
        "db_id": "financial",
        "source": "bird_dev",
        "evidence": "Female refers to gender = 'F'; Woman and female are closed; Average salary can be found in A11",
        "values_list": [
            "district.a11.10000",
            "client.gender.f"
        ]
    },
    {
        "question": "How many owner and disponent dispositions are there from account number 1 to account number 10?",
        "SQL": "SELECT SUM(type = 'OWNER') , SUM(type = 'DISPONENT') FROM disp WHERE account_id BETWEEN 1 AND 10",
        "tables": [
            "disp"
        ],
        "columns": [
            "disp.type",
            "disp.account_id"
        ],
        "values": [
            {
                "table": "disp",
                "column": "type",
                "value": "OWNER",
                "condition": "="
            },
            {
                "table": "disp",
                "column": "type",
                "value": "DISPONENT",
                "condition": "="
            }
        ],
        "db_id": "financial",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "disp.type.owner",
            "disp.type.disponent"
        ]
    },
    {
        "question": "Please provide a list of clients who were born between 1983 and 1987 and whose account branch is in East Bohemia, along with their IDs.",
        "SQL": "SELECT T1.client_id, T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T4 ON T1.client_id = T4.client_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id and T4.account_id = T3.account_id WHERE T2.A3 = 'east Bohemia' AND STRFTIME('%Y', T1.birth_date) BETWEEN '1983' AND '1987'",
        "tables": [
            "disp",
            "district",
            "client",
            "account"
        ],
        "columns": [
            "client.district_id",
            "disp.account_id",
            "account.account_id",
            "disp.client_id",
            "account.district_id",
            "district.a3",
            "client.birth_date",
            "district.district_id",
            "client.client_id"
        ],
        "values": [
            {
                "table": "district",
                "column": "a3",
                "value": "east Bohemia",
                "condition": "="
            }
        ],
        "db_id": "financial",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "district.a3.east bohemia"
        ]
    },
    {
        "question": "Please provide the IDs of the 3 female clients with the largest loans.",
        "SQL": "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T4 on T1.client_id= T4.client_id INNER JOIN account AS T2 ON T4.account_id = T2.account_id  INNER JOIN loan AS T3 ON T2.account_id = T3.account_id and T4.account_id = T3.account_id WHERE T1.gender = 'F' ORDER BY T3.amount DESC LIMIT 3",
        "tables": [
            "disp",
            "loan",
            "client",
            "account"
        ],
        "columns": [
            "client.gender",
            "loan.amount",
            "disp.account_id",
            "loan.account_id",
            "account.account_id",
            "disp.client_id",
            "client.client_id"
        ],
        "values": [
            {
                "table": "client",
                "column": "gender",
                "value": "F",
                "condition": "="
            }
        ],
        "db_id": "financial",
        "source": "bird_dev",
        "evidence": "Female refers to gender = 'F'",
        "values_list": [
            "client.gender.f"
        ]
    },
    {
        "question": "How many accounts in Beroun were opened after 1996?",
        "SQL": "SELECT COUNT(account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.date) > '1996' AND T2.A2 = 'Beroun'",
        "tables": [
            "district",
            "account"
        ],
        "columns": [
            "district.district_id",
            "district.a2",
            "account.date",
            "account.district_id"
        ],
        "values": [
            {
                "table": "district",
                "column": "a2",
                "value": "Beroun",
                "condition": "="
            }
        ],
        "db_id": "financial",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "district.a2.beroun"
        ]
    },
    {
        "question": "How many female customers have a junior credit card?",
        "SQL": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.gender = 'F' AND T3.type = 'junior'",
        "tables": [
            "disp",
            "card",
            "client"
        ],
        "columns": [
            "client.gender",
            "card.disp_id",
            "disp.client_id",
            "card.type",
            "client.client_id",
            "disp.disp_id"
        ],
        "values": [
            {
                "table": "client",
                "column": "gender",
                "value": "F",
                "condition": "="
            },
            {
                "table": "card",
                "column": "type",
                "value": "junior",
                "condition": "="
            }
        ],
        "db_id": "financial",
        "source": "bird_dev",
        "evidence": "Female refers to gender = 'F'",
        "values_list": [
            "client.gender.f",
            "card.type.junior"
        ]
    },
    {
        "question": "What proportion of customers who have accounts at the Prague branch are female?",
        "SQL": "SELECT CAST(SUM(T2.gender = 'F') AS REAL) / COUNT(T2.client_id) * 100 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'Prague'",
        "tables": [
            "district",
            "client"
        ],
        "columns": [
            "client.gender",
            "client.district_id",
            "district.a3",
            "district.district_id",
            "client.client_id"
        ],
        "values": [
            {
                "table": "district",
                "column": "a3",
                "value": "Prague",
                "condition": "="
            },
            {
                "table": "client",
                "column": "gender",
                "value": "F",
                "condition": "="
            }
        ],
        "db_id": "financial",
        "source": "bird_dev",
        "evidence": "Female refers to gender = 'F'; Percentage of female clients in Prague branch = count[female clients with accounts in Prague branch / count(clients with accounts in Prague branch)] * 100%; A3 may contain information about Prague",
        "values_list": [
            "district.a3.prague",
            "client.gender.f"
        ]
    },
    {
        "question": "Name the account numbers of female clients who are oldest and have lowest average salary?",
        "SQL": "SELECT T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id INNER JOIN disp AS T4 ON T1.client_id = T4.client_id AND T4.account_id = T3.account_id  WHERE T1.gender = 'F' ORDER BY T1.birth_date ASC, T2.A11 ASC LIMIT 1",
        "tables": [
            "disp",
            "district",
            "client",
            "account"
        ],
        "columns": [
            "district.a11",
            "client.gender",
            "client.district_id",
            "disp.account_id",
            "account.account_id",
            "account.district_id",
            "disp.client_id",
            "client.birth_date",
            "district.district_id",
            "client.client_id"
        ],
        "values": [
            {
                "table": "client",
                "column": "gender",
                "value": "F",
                "condition": "="
            }
        ],
        "db_id": "financial",
        "source": "bird_dev",
        "evidence": "Female refers to 'F' in the gender; A11 contains information about average salary",
        "values_list": [
            "client.gender.f"
        ]
    },
    {
        "question": "How many clients who were born in 1920 stay in east Bohemia?",
        "SQL": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.birth_date) = '1920' AND T2.A3 = 'east Bohemia'",
        "tables": [
            "district",
            "client"
        ],
        "columns": [
            "client.district_id",
            "district.a3",
            "client.birth_date",
            "district.district_id",
            "client.client_id"
        ],
        "values": [
            {
                "table": "district",
                "column": "a3",
                "value": "east Bohemia",
                "condition": "="
            }
        ],
        "db_id": "financial",
        "source": "bird_dev",
        "evidence": "East Bohemia appears in the column A3, which refers to the region.",
        "values_list": [
            "district.a3.east bohemia"
        ]
    },
    {
        "question": "Calculate the average number of oxygen atoms in single-bonded molecules.",
        "SQL": "SELECT AVG(oxygen_count) FROM (SELECT T1.molecule_id, COUNT(T1.element) AS oxygen_count FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T2.bond_type = '-' AND T1.element = 'o'  GROUP BY T1.molecule_id) AS oxygen_counts",
        "tables": [
            "bond",
            "atom"
        ],
        "columns": [
            "bond.bond_type",
            "bond.molecule_id",
            "atom.molecule_id",
            "atom.element"
        ],
        "values": [
            {
                "table": "bond",
                "column": "bond_type",
                "value": "-",
                "condition": "="
            },
            {
                "table": "atom",
                "column": "element",
                "value": "o",
                "condition": "="
            },
            {
                "table": "bond",
                "column": "bond_type",
                "value": "-",
                "condition": "="
            },
            {
                "table": "atom",
                "column": "element",
                "value": "o",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "single-bonded molecules refers to bond_type = '-' ; average number of oxygen atom = AVG(element = 'o')",
        "values_list": [
            "bond.bond_type.-",
            "atom.element.o",
            "bond.bond_type.-",
            "atom.element.o"
        ]
    },
    {
        "question": "In how many atoms is there no bromine?",
        "SQL": "SELECT COUNT(DISTINCT T.atom_id) FROM atom AS T WHERE T.element <> 'br'",
        "tables": [
            "atom"
        ],
        "columns": [
            "atom.atom_id",
            "atom.element"
        ],
        "values": [
            {
                "table": "atom",
                "column": "element",
                "value": "br",
                "condition": "!="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "atoms with no bromine refers to element ! = 'br'",
        "values_list": [
            "atom.element.br"
        ]
    },
    {
        "question": "Identify by their ID the molecules in which there is carbon.",
        "SQL": "SELECT T.molecule_id FROM atom AS T WHERE T.element = 'c'",
        "tables": [
            "atom"
        ],
        "columns": [
            "atom.molecule_id",
            "atom.element"
        ],
        "values": [
            {
                "table": "atom",
                "column": "element",
                "value": "c",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "carbon refers to element = 'c';",
        "values_list": [
            "atom.element.c"
        ]
    },
    {
        "question": "What elements are in the TR004_8_9 bond atoms?",
        "SQL": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR004_8_9'",
        "tables": [
            "connected",
            "atom"
        ],
        "columns": [
            "connected.atom_id",
            "connected.bond_id",
            "atom.atom_id",
            "atom.element"
        ],
        "values": [
            {
                "table": "connected",
                "column": "bond_id",
                "value": "TR004_8_9",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "TR004_8_9 bond atoms refers to bond_id = 'TR004_8_9';",
        "values_list": [
            "connected.bond_id.tr004_8_9"
        ]
    },
    {
        "question": "Which type of label is the most numerous in atoms with hydrogen?",
        "SQL": "SELECT T.label FROM ( SELECT T2.label, COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'h' GROUP BY T2.label ORDER BY COUNT(T2.molecule_id) DESC LIMIT 1 ) t",
        "tables": [
            "molecule",
            "atom"
        ],
        "columns": [
            "molecule.molecule_id",
            "molecule.label",
            "atom.molecule_id",
            "atom.element"
        ],
        "values": [
            {
                "table": "atom",
                "column": "element",
                "value": "h",
                "condition": "="
            },
            {
                "table": "atom",
                "column": "element",
                "value": "h",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "with hydrogen refers to element = 'h'; label most numerous in atoms refers to MAX(COUNT(label)); ",
        "values_list": [
            "atom.element.h",
            "atom.element.h"
        ]
    },
    {
        "question": "What type of bond is there between the atoms TR004_8 and TR004_20?",
        "SQL": "SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR004_8' AND T2.atom_id2 = 'TR004_20' OR T2.atom_id2 = 'TR004_8' AND T2.atom_id = 'TR004_20'",
        "tables": [
            "connected",
            "bond"
        ],
        "columns": [
            "connected.atom_id2",
            "connected.atom_id",
            "bond.bond_type",
            "bond.bond_id",
            "connected.bond_id"
        ],
        "values": [
            {
                "table": "connected",
                "column": "atom_id",
                "value": "TR004_20",
                "condition": "="
            },
            {
                "table": "connected",
                "column": "atom_id2",
                "value": "TR004_8",
                "condition": "="
            },
            {
                "table": "connected",
                "column": "atom_id",
                "value": "TR004_8",
                "condition": "="
            },
            {
                "table": "connected",
                "column": "atom_id2",
                "value": "TR004_20",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "type of bond refers to bond_type; between the atoms TR004_8 and TR004_20 refers to atom_id = 'TR004_8' AND atom_id2 = 'TR004_20' OR another way around",
        "values_list": [
            "connected.atom_id.tr004_20",
            "connected.atom_id2.tr004_8",
            "connected.atom_id.tr004_8",
            "connected.atom_id2.tr004_20"
        ]
    },
    {
        "question": "Identify all the atoms that are connected to the atoms of the TR181 molecule.",
        "SQL": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T2.atom_id = T1.atom_id WHERE T1.molecule_id = 'TR181'",
        "tables": [
            "connected",
            "atom"
        ],
        "columns": [
            "connected.atom_id",
            "connected.atom_id2",
            "atom.atom_id",
            "atom.molecule_id"
        ],
        "values": [
            {
                "table": "atom",
                "column": "molecule_id",
                "value": "TR181",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "TR181 molecule refers to molecule_id = 'TR181'",
        "values_list": [
            "atom.molecule_id.tr181"
        ]
    },
    {
        "question": "Please list top three elements of the toxicology of the molecule TR000 in alphabetical order.",
        "SQL": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR000' ORDER BY T.element LIMIT 3",
        "tables": [
            "atom"
        ],
        "columns": [
            "atom.molecule_id",
            "atom.element"
        ],
        "values": [
            {
                "table": "atom",
                "column": "molecule_id",
                "value": "TR000",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "TR000 is the molecule id;",
        "values_list": [
            "atom.molecule_id.tr000"
        ]
    },
    {
        "question": "What are the atoms that are bonded in the molecule TR001 with the bond ID of TR001_2_6?",
        "SQL": "SELECT SUBSTR(T.bond_id, 1, 7) AS atom_id1 , T.molecule_id || SUBSTR(T.bond_id, 8, 2) AS atom_id2 FROM bond AS T WHERE T.molecule_id = 'TR001' AND T.bond_id = 'TR001_2_6'",
        "tables": [
            "bond"
        ],
        "columns": [
            "bond.molecule_id",
            "bond.bond_id"
        ],
        "values": [
            {
                "table": "bond",
                "column": "molecule_id",
                "value": "TR001",
                "condition": "="
            },
            {
                "table": "bond",
                "column": "bond_id",
                "value": "TR001_2_6",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "TR001 is the molecule id; TR001_2_6 is the bond id",
        "values_list": [
            "bond.molecule_id.tr001",
            "bond.bond_id.tr001_2_6"
        ]
    },
    {
        "question": "What are the atom IDs of the bond TR000_2_5?",
        "SQL": "SELECT T.atom_id FROM connected AS T WHERE T.bond_id = 'TR000_2_5'",
        "tables": [
            "connected"
        ],
        "columns": [
            "connected.atom_id",
            "connected.bond_id"
        ],
        "values": [
            {
                "table": "connected",
                "column": "bond_id",
                "value": "TR000_2_5",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "TR000_2_5 is the bond id",
        "values_list": [
            "connected.bond_id.tr000_2_5"
        ]
    },
    {
        "question": "What are the bond IDs that have the same atom ID 2 of TR000_2?",
        "SQL": "SELECT T.bond_id FROM connected AS T WHERE T.atom_id2 = 'TR000_2'",
        "tables": [
            "connected"
        ],
        "columns": [
            "connected.bond_id",
            "connected.atom_id2"
        ],
        "values": [
            {
                "table": "connected",
                "column": "atom_id2",
                "value": "TR000_2",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "TR000_2 is the atom id; atom ID 2 refers to atom_id2",
        "values_list": [
            "connected.atom_id2.tr000_2"
        ]
    },
    {
        "question": "How much of the hydrogen in molecule TR206 is accounted for? Please provide your answer as a percentage with four decimal places.",
        "SQL": "SELECT ROUND(CAST(COUNT(CASE WHEN T.element = 'h' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id),4) FROM atom AS T WHERE T.molecule_id = 'TR206'",
        "tables": [
            "atom"
        ],
        "columns": [
            "atom.atom_id",
            "atom.molecule_id",
            "atom.element"
        ],
        "values": [
            {
                "table": "atom",
                "column": "molecule_id",
                "value": "TR206",
                "condition": "="
            },
            {
                "table": "atom",
                "column": "element",
                "value": "h",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "hydrogen refers to element = 'h'; TR206 is the molecule id; percentage = DIVIDE(SUM(element = 'h'), COUNT(atom_id)) as percent where molecule_id = 'TR206'",
        "values_list": [
            "atom.molecule_id.tr206",
            "atom.element.h"
        ]
    },
    {
        "question": "What is the type of bond that molecule TR000 has when involved in any bonds?",
        "SQL": "SELECT DISTINCT T.bond_type FROM bond AS T WHERE T.molecule_id = 'TR000'",
        "tables": [
            "bond"
        ],
        "columns": [
            "bond.molecule_id",
            "bond.bond_type"
        ],
        "values": [
            {
                "table": "bond",
                "column": "molecule_id",
                "value": "TR000",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "type of bond refers to bond_type; TR000 is the molecule id",
        "values_list": [
            "bond.molecule_id.tr000"
        ]
    },
    {
        "question": "What are the elements of the toxicology and label of molecule TR060?",
        "SQL": "SELECT DISTINCT T1.element, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR060'",
        "tables": [
            "molecule",
            "atom"
        ],
        "columns": [
            "molecule.molecule_id",
            "molecule.label",
            "atom.molecule_id",
            "atom.element"
        ],
        "values": [
            {
                "table": "molecule",
                "column": "molecule_id",
                "value": "TR060",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "TR060 is the molecule id; ",
        "values_list": [
            "molecule.molecule_id.tr060"
        ]
    },
    {
        "question": "Which bond type accounted for the majority of the bonds found in molecule TR010 and state whether or not this molecule is carcinogenic?",
        "SQL": "SELECT T.bond_type FROM ( SELECT T1.bond_type, COUNT(T1.molecule_id) FROM bond AS T1  WHERE T1.molecule_id = 'TR010' GROUP BY T1.bond_type ORDER BY COUNT(T1.molecule_id) DESC LIMIT 1 ) AS T",
        "tables": [
            "bond"
        ],
        "columns": [
            "bond.molecule_id",
            "bond.bond_type"
        ],
        "values": [
            {
                "table": "bond",
                "column": "molecule_id",
                "value": "TR010",
                "condition": "="
            },
            {
                "table": "bond",
                "column": "molecule_id",
                "value": "TR010",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "TR010 is the molecule id; majority of the bond found refers to MAX(COUNT(bond_type)); ",
        "values_list": [
            "bond.molecule_id.tr010",
            "bond.molecule_id.tr010"
        ]
    },
    {
        "question": "Please list top two bonds that happened with the molecule TR006 in alphabetical order.",
        "SQL": "SELECT DISTINCT T2.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.molecule_id = 'TR006' ORDER BY T2.bond_id LIMIT 2",
        "tables": [
            "connected",
            "atom"
        ],
        "columns": [
            "connected.bond_id",
            "atom.molecule_id",
            "atom.atom_id",
            "connected.atom_id"
        ],
        "values": [
            {
                "table": "atom",
                "column": "molecule_id",
                "value": "TR006",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "TR006 is the molecule id",
        "values_list": [
            "atom.molecule_id.tr006"
        ]
    },
    {
        "question": "How many bonds which involved atom 12 does molecule TR009 have?",
        "SQL": "SELECT COUNT(T2.bond_id) FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.molecule_id = 'TR009' AND T2.atom_id = T1.molecule_id || '_1' AND T2.atom_id2 = T1.molecule_id || '_2'",
        "tables": [
            "connected",
            "bond"
        ],
        "columns": [
            "connected.atom_id2",
            "connected.atom_id",
            "bond.bond_id",
            "connected.bond_id",
            "bond.molecule_id"
        ],
        "values": [
            {
                "table": "bond",
                "column": "molecule_id",
                "value": "TR009",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "TR009 is the molecule id;  involved atom 12 refers to atom_id = 'TR009_12' or atom_id2 = 'TR009_12'",
        "values_list": [
            "bond.molecule_id.tr009"
        ]
    },
    {
        "question": "What are the bond type and the atoms of the bond ID of TR001_6_9?",
        "SQL": "SELECT T1.bond_type, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_id = 'TR001_6_9'",
        "tables": [
            "connected",
            "bond"
        ],
        "columns": [
            "connected.atom_id2",
            "connected.atom_id",
            "bond.bond_type",
            "bond.bond_id",
            "connected.bond_id"
        ],
        "values": [
            {
                "table": "connected",
                "column": "bond_id",
                "value": "TR001_6_9",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "atoms refer to atom_id or atom_id2",
        "values_list": [
            "connected.bond_id.tr001_6_9"
        ]
    },
    {
        "question": "List all the elements of the toxicology of the molecule \"TR004\".",
        "SQL": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR004'",
        "tables": [
            "atom"
        ],
        "columns": [
            "atom.molecule_id",
            "atom.element"
        ],
        "values": [
            {
                "table": "atom",
                "column": "molecule_id",
                "value": "TR004",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "TR004 is the molecule id;",
        "values_list": [
            "atom.molecule_id.tr004"
        ]
    },
    {
        "question": "What are the bonds that have phosphorus and nitrogen as their atom elements?",
        "SQL": "SELECT T2.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id IN ( SELECT T3.bond_id FROM connected AS T3 INNER JOIN atom AS T4 ON T3.atom_id = T4.atom_id WHERE T4.element = 'p' ) AND T1.element = 'n'",
        "tables": [
            "connected",
            "atom"
        ],
        "columns": [
            "connected.bond_id",
            "atom.atom_id",
            "connected.atom_id",
            "atom.element"
        ],
        "values": [
            {
                "table": "atom",
                "column": "element",
                "value": "n",
                "condition": "="
            },
            {
                "table": "atom",
                "column": "element",
                "value": "p",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "have phosphorus as atom elements refers to element = 'p'; have nitrogen as atom elements refers to element = 'n'",
        "values_list": [
            "atom.element.n",
            "atom.element.p"
        ]
    },
    {
        "question": "What is the average number of bonds the atoms with the element iodine have?",
        "SQL": "SELECT CAST(COUNT(T2.bond_id) AS REAL) / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'i'",
        "tables": [
            "connected",
            "atom"
        ],
        "columns": [
            "connected.atom_id",
            "connected.bond_id",
            "atom.atom_id",
            "atom.element"
        ],
        "values": [
            {
                "table": "atom",
                "column": "element",
                "value": "i",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "atoms with the element iodine refers to element = 'i'; average = DIVIDE(COUND(bond_id), COUNT(atom_id)) where element = 'i'",
        "values_list": [
            "atom.element.i"
        ]
    },
    {
        "question": "What are the elements of the atoms of TR144_8_19?",
        "SQL": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR144_8_19'",
        "tables": [
            "connected",
            "atom"
        ],
        "columns": [
            "connected.atom_id",
            "connected.bond_id",
            "atom.atom_id",
            "atom.element"
        ],
        "values": [
            {
                "table": "connected",
                "column": "bond_id",
                "value": "TR144_8_19",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "TR144_8_19 is the bond id; ",
        "values_list": [
            "connected.bond_id.tr144_8_19"
        ]
    },
    {
        "question": "Calculate the total atoms consisting of the element carbon and hydrogen.",
        "SQL": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.element = 'c' OR T.element = 'h'",
        "tables": [
            "atom"
        ],
        "columns": [
            "atom.atom_id",
            "atom.element"
        ],
        "values": [
            {
                "table": "atom",
                "column": "element",
                "value": "c",
                "condition": "="
            },
            {
                "table": "atom",
                "column": "element",
                "value": "h",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "consisting of element carbon and hydrogen refers to element in('c', 'h')",
        "values_list": [
            "atom.element.c",
            "atom.element.h"
        ]
    },
    {
        "question": "List down atom id2 for atoms with element sulfur.",
        "SQL": "SELECT DISTINCT T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 's'",
        "tables": [
            "connected",
            "atom"
        ],
        "columns": [
            "connected.atom_id",
            "connected.atom_id2",
            "atom.atom_id",
            "atom.element"
        ],
        "values": [
            {
                "table": "atom",
                "column": "element",
                "value": "s",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "element sulfur refers to element = 's'",
        "values_list": [
            "atom.element.s"
        ]
    },
    {
        "question": "What are the labels for TR000, TR001 and TR002?",
        "SQL": "SELECT molecule_id, T.label FROM molecule AS T WHERE T.molecule_id IN ('TR000', 'TR001', 'TR002')",
        "tables": [
            "molecule"
        ],
        "columns": [
            "molecule.molecule_id",
            "molecule.label"
        ],
        "values": [
            {
                "table": "molecule",
                "column": "molecule_id",
                "value": "TR000"
            },
            {
                "table": "molecule",
                "column": "molecule_id",
                "value": "TR001"
            },
            {
                "table": "molecule",
                "column": "molecule_id",
                "value": "TR002"
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "TR000, TR001 and TR002 are molecule id; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic",
        "values_list": [
            "molecule.molecule_id.tr000",
            "molecule.molecule_id.tr001",
            "molecule.molecule_id.tr002"
        ]
    },
    {
        "question": "What are the elements for bond id TR001_10_11?",
        "SQL": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR001_10_11'",
        "tables": [
            "connected",
            "atom"
        ],
        "columns": [
            "connected.atom_id",
            "connected.bond_id",
            "atom.atom_id",
            "atom.element"
        ],
        "values": [
            {
                "table": "connected",
                "column": "bond_id",
                "value": "TR001_10_11",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "TR001_10_11 is the bond id;",
        "values_list": [
            "connected.bond_id.tr001_10_11"
        ]
    },
    {
        "question": "How many bond id have element iodine?",
        "SQL": "SELECT COUNT(T3.bond_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T1.element = 'i'",
        "tables": [
            "bond",
            "molecule",
            "atom"
        ],
        "columns": [
            "atom.element",
            "bond.bond_id",
            "atom.molecule_id",
            "molecule.molecule_id",
            "bond.molecule_id"
        ],
        "values": [
            {
                "table": "atom",
                "column": "element",
                "value": "i",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "iodine refers to element = 'i'",
        "values_list": [
            "atom.element.i"
        ]
    },
    {
        "question": "Among the molecules with element Calcium, are they mostly carcinogenic or non carcinogenic?",
        "SQL": "SELECT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'ca' GROUP BY T2.label ORDER BY COUNT(T2.label) DESC LIMIT 1",
        "tables": [
            "molecule",
            "atom"
        ],
        "columns": [
            "molecule.molecule_id",
            "molecule.label",
            "atom.molecule_id",
            "atom.element"
        ],
        "values": [
            {
                "table": "atom",
                "column": "element",
                "value": "ca",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "calcium refers to element = 'ca'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic; MAX(label)",
        "values_list": [
            "atom.element.ca"
        ]
    },
    {
        "question": "List the toxicology elements associated with molecule TR001.",
        "SQL": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR001'",
        "tables": [
            "atom"
        ],
        "columns": [
            "atom.molecule_id",
            "atom.element"
        ],
        "values": [
            {
                "table": "atom",
                "column": "molecule_id",
                "value": "TR001",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "TR001 is the molecule id",
        "values_list": [
            "atom.molecule_id.tr001"
        ]
    },
    {
        "question": "What are the toxicology elements associated with bond ID TR000_1_2?",
        "SQL": "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR000_1_2'",
        "tables": [
            "connected",
            "atom"
        ],
        "columns": [
            "connected.atom_id",
            "connected.bond_id",
            "atom.atom_id",
            "atom.element"
        ],
        "values": [
            {
                "table": "connected",
                "column": "bond_id",
                "value": "TR000_1_2",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "TR000_1_2 is the bond id;",
        "values_list": [
            "connected.bond_id.tr000_1_2"
        ]
    },
    {
        "question": "What is the label for bond ID TR001_10_11?",
        "SQL": "SELECT T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = 'TR001_10_11'",
        "tables": [
            "molecule",
            "bond"
        ],
        "columns": [
            "bond.molecule_id",
            "bond.bond_id",
            "molecule.molecule_id",
            "molecule.label"
        ],
        "values": [
            {
                "table": "bond",
                "column": "bond_id",
                "value": "TR001_10_11",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic",
        "values_list": [
            "bond.bond_id.tr001_10_11"
        ]
    },
    {
        "question": "What is the ratio of Hydrogen elements in molecule ID TR006? List the ratio with its label.",
        "SQL": "WITH SubQuery AS (SELECT DISTINCT T1.atom_id, T1.element, T1.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR006') SELECT CAST(COUNT(CASE WHEN element = 'h' THEN atom_id ELSE NULL END) AS REAL) / (CASE WHEN COUNT(atom_id) = 0 THEN NULL ELSE COUNT(atom_id) END) AS ratio, label FROM SubQuery GROUP BY label",
        "tables": [
            "subquery",
            "molecule",
            "atom"
        ],
        "columns": [
            "atom.element",
            "molecule.label",
            "atom.atom_id",
            "atom.molecule_id",
            "molecule.molecule_id"
        ],
        "values": [
            {
                "table": "molecule",
                "column": "molecule_id",
                "value": "TR006",
                "condition": "="
            },
            {
                "table": "molecule",
                "column": "molecule_id",
                "value": "TR006",
                "condition": "="
            },
            {
                "table": "",
                "column": "element",
                "value": "h",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "hydrogen refers to element = 'h'; ratio = DIVIDE(SUM(element = 'h'), count(element)) where molecule_id = 'TR006' ; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic",
        "values_list": [
            "molecule.molecule_id.tr006",
            "molecule.molecule_id.tr006",
            ".element.h"
        ]
    },
    {
        "question": "Identify whether the chemical compound that contains Calcium is carcinogenic.",
        "SQL": "SELECT T2.label AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'ca'",
        "tables": [
            "molecule",
            "atom"
        ],
        "columns": [
            "molecule.molecule_id",
            "molecule.label",
            "atom.molecule_id",
            "atom.element"
        ],
        "values": [
            {
                "table": "atom",
                "column": "element",
                "value": "ca",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "calcium refers to element = 'ca'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic;",
        "values_list": [
            "atom.element.ca"
        ]
    },
    {
        "question": "Determine the bond type that is formed in the chemical compound containing element Carbon.",
        "SQL": "SELECT DISTINCT T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c'",
        "tables": [
            "bond",
            "atom"
        ],
        "columns": [
            "bond.molecule_id",
            "bond.bond_type",
            "atom.molecule_id",
            "atom.element"
        ],
        "values": [
            {
                "table": "atom",
                "column": "element",
                "value": "c",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "Carbon refers to element = 'c'; double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';",
        "values_list": [
            "atom.element.c"
        ]
    },
    {
        "question": "Name chemical elements that form a bond TR001_10_11.",
        "SQL": "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR001_10_11'",
        "tables": [
            "bond",
            "connected",
            "atom"
        ],
        "columns": [
            "atom.element",
            "connected.atom_id",
            "bond.bond_id",
            "atom.atom_id",
            "connected.bond_id"
        ],
        "values": [
            {
                "table": "bond",
                "column": "bond_id",
                "value": "TR001_10_11",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium; TR001_10_11 is the bond id; molecule id refers to SUBSTR(bond_id, 1, 5); atom 1 refers to SUBSTR(bond_id, 7, 2); atom 2 refers to SUBSTR(bond_id, 10, 2)",
        "values_list": [
            "bond.bond_id.tr001_10_11"
        ]
    },
    {
        "question": "Identify whether the molecule that contains atom TR001_1 is carcinogenic.",
        "SQL": "SELECT T2.label AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_1'",
        "tables": [
            "molecule",
            "atom"
        ],
        "columns": [
            "molecule.molecule_id",
            "atom.atom_id",
            "molecule.label",
            "atom.molecule_id"
        ],
        "values": [
            {
                "table": "atom",
                "column": "atom_id",
                "value": "TR001_1",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "label = '+' mean molecules are carcinogenic;",
        "values_list": [
            "atom.atom_id.tr001_1"
        ]
    },
    {
        "question": "Is molecule TR151 carcinogenic?",
        "SQL": "SELECT T.label FROM molecule AS T WHERE T.molecule_id = 'TR151'",
        "tables": [
            "molecule"
        ],
        "columns": [
            "molecule.molecule_id",
            "molecule.label"
        ],
        "values": [
            {
                "table": "molecule",
                "column": "molecule_id",
                "value": "TR151",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "label = '+' mean molecules are carcinogenic;",
        "values_list": [
            "molecule.molecule_id.tr151"
        ]
    },
    {
        "question": "Which toxic element can be found in the molecule TR151?",
        "SQL": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR151'",
        "tables": [
            "atom"
        ],
        "columns": [
            "atom.molecule_id",
            "atom.element"
        ],
        "values": [
            {
                "table": "atom",
                "column": "molecule_id",
                "value": "TR151",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
        "values_list": [
            "atom.molecule_id.tr151"
        ]
    },
    {
        "question": "Identify the atoms belong to the molecule with ID between TR010 to TR050 that contain the element carbon.",
        "SQL": "SELECT T.atom_id FROM atom AS T WHERE T.molecule_id BETWEEN 'TR010' AND 'TR050' AND T.element = 'c'",
        "tables": [
            "atom"
        ],
        "columns": [
            "atom.atom_id",
            "atom.molecule_id",
            "atom.element"
        ],
        "values": [
            {
                "table": "atom",
                "column": "element",
                "value": "c",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "carbon refers to element = 'c'; between TR010 to TR050 refers to substr(molecule_id, 3, 3)>=10 AND substr(molecule_id, 3, 3) <= 50",
        "values_list": [
            "atom.element.c"
        ]
    },
    {
        "question": "Indicate the molecule id is belonging to the TR000_1_2 bond that has the first atom named TR000_1.",
        "SQL": "SELECT T2.molecule_id, T2.bond_id, T1.atom_id FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T1.atom_id = 'TR000_1' AND T2.bond_id = 'TR000_1_2'",
        "tables": [
            "connected",
            "bond"
        ],
        "columns": [
            "bond.bond_id",
            "connected.bond_id",
            "bond.molecule_id",
            "connected.atom_id"
        ],
        "values": [
            {
                "table": "connected",
                "column": "atom_id",
                "value": "TR000_1",
                "condition": "="
            },
            {
                "table": "bond",
                "column": "bond_id",
                "value": "TR000_1_2",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "connected.atom_id.tr000_1",
            "bond.bond_id.tr000_1_2"
        ]
    },
    {
        "question": "Is molecule TR124 carcinogenic?",
        "SQL": "SELECT T.label FROM molecule AS T WHERE T.molecule_id = 'TR124'",
        "tables": [
            "molecule"
        ],
        "columns": [
            "molecule.molecule_id",
            "molecule.label"
        ],
        "values": [
            {
                "table": "molecule",
                "column": "molecule_id",
                "value": "TR124",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "label = '+' mean molecules are carcinogenic;",
        "values_list": [
            "molecule.molecule_id.tr124"
        ]
    },
    {
        "question": "What atoms comprise TR186?",
        "SQL": "SELECT T.atom_id FROM atom AS T WHERE T.molecule_id = 'TR186'",
        "tables": [
            "atom"
        ],
        "columns": [
            "atom.atom_id",
            "atom.molecule_id"
        ],
        "values": [
            {
                "table": "atom",
                "column": "molecule_id",
                "value": "TR186",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "TR186 is a molecule id",
        "values_list": [
            "atom.molecule_id.tr186"
        ]
    },
    {
        "question": "What is the bond type of TR007_4_19?",
        "SQL": "SELECT T.bond_type FROM bond AS T WHERE T.bond_id = 'TR007_4_19'",
        "tables": [
            "bond"
        ],
        "columns": [
            "bond.bond_id",
            "bond.bond_type"
        ],
        "values": [
            {
                "table": "bond",
                "column": "bond_id",
                "value": "TR007_4_19",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';",
        "values_list": [
            "bond.bond_id.tr007_4_19"
        ]
    },
    {
        "question": "Name the elements that comprise the atoms of bond TR001_2_4.",
        "SQL": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_2_4'",
        "tables": [
            "connected",
            "atom"
        ],
        "columns": [
            "connected.atom_id",
            "connected.bond_id",
            "atom.atom_id",
            "atom.element"
        ],
        "values": [
            {
                "table": "connected",
                "column": "bond_id",
                "value": "TR001_2_4",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
        "values_list": [
            "connected.bond_id.tr001_2_4"
        ]
    },
    {
        "question": "Name the atoms' elements that form bond TR000_2_3.",
        "SQL": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR000_2_3'",
        "tables": [
            "connected",
            "atom"
        ],
        "columns": [
            "connected.atom_id",
            "connected.bond_id",
            "atom.atom_id",
            "atom.element"
        ],
        "values": [
            {
                "table": "connected",
                "column": "bond_id",
                "value": "TR000_2_3",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
        "values_list": [
            "connected.bond_id.tr000_2_3"
        ]
    },
    {
        "question": "What is the carcinogenic label for bond TR001_2_4?",
        "SQL": "SELECT DISTINCT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_id = 'TR001_2_4'",
        "tables": [
            "bond",
            "molecule",
            "atom"
        ],
        "columns": [
            "bond.bond_id",
            "molecule.label",
            "atom.molecule_id",
            "molecule.molecule_id",
            "bond.molecule_id"
        ],
        "values": [
            {
                "table": "bond",
                "column": "bond_id",
                "value": "TR001_2_4",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "label = '+' mean molecules are carcinogenic",
        "values_list": [
            "bond.bond_id.tr001_2_4"
        ]
    },
    {
        "question": "How many atoms belong to molecule id TR001?",
        "SQL": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.molecule_id = 'TR001'",
        "tables": [
            "atom"
        ],
        "columns": [
            "atom.atom_id",
            "atom.molecule_id"
        ],
        "values": [
            {
                "table": "atom",
                "column": "molecule_id",
                "value": "TR001",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "atom.molecule_id.tr001"
        ]
    },
    {
        "question": "What is the molecule id of bond id TR001_1_7?",
        "SQL": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_1_7'",
        "tables": [
            "connected",
            "atom"
        ],
        "columns": [
            "connected.atom_id",
            "connected.bond_id",
            "atom.atom_id",
            "atom.molecule_id"
        ],
        "values": [
            {
                "table": "connected",
                "column": "bond_id",
                "value": "TR001_1_7",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "connected.bond_id.tr001_1_7"
        ]
    },
    {
        "question": "How many elements are contained in bond_id TR001_3_4?",
        "SQL": "SELECT COUNT(DISTINCT T1.element) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_3_4'",
        "tables": [
            "connected",
            "atom"
        ],
        "columns": [
            "connected.atom_id",
            "connected.bond_id",
            "atom.atom_id",
            "atom.element"
        ],
        "values": [
            {
                "table": "connected",
                "column": "bond_id",
                "value": "TR001_3_4",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
        "values_list": [
            "connected.bond_id.tr001_3_4"
        ]
    },
    {
        "question": "What is the type of the bond which is presenting the connection between two atoms TR000_1 and TR000_2?",
        "SQL": "SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR000_1' AND T2.atom_id2 = 'TR000_2'",
        "tables": [
            "connected",
            "bond"
        ],
        "columns": [
            "connected.atom_id2",
            "connected.atom_id",
            "bond.bond_type",
            "bond.bond_id",
            "connected.bond_id"
        ],
        "values": [
            {
                "table": "connected",
                "column": "atom_id",
                "value": "TR000_1",
                "condition": "="
            },
            {
                "table": "connected",
                "column": "atom_id2",
                "value": "TR000_2",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "type of bond refers to bond_type; double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';",
        "values_list": [
            "connected.atom_id.tr000_1",
            "connected.atom_id2.tr000_2"
        ]
    },
    {
        "question": "What is the molecule of atom id \"TR000_2\" and atom id 2 \"TR000_4\"?",
        "SQL": "SELECT T1.molecule_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR000_2' AND T2.atom_id2 = 'TR000_4'",
        "tables": [
            "connected",
            "bond"
        ],
        "columns": [
            "connected.atom_id2",
            "connected.atom_id",
            "bond.bond_id",
            "connected.bond_id",
            "bond.molecule_id"
        ],
        "values": [
            {
                "table": "connected",
                "column": "atom_id",
                "value": "TR000_2",
                "condition": "="
            },
            {
                "table": "connected",
                "column": "atom_id2",
                "value": "TR000_4",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "connected.atom_id.tr000_2",
            "connected.atom_id2.tr000_4"
        ]
    },
    {
        "question": "What is the element of toxicology for the atom with the ID of TR000_1?",
        "SQL": "SELECT T.element FROM atom AS T WHERE T.atom_id = 'TR000_1'",
        "tables": [
            "atom"
        ],
        "columns": [
            "atom.atom_id",
            "atom.element"
        ],
        "values": [
            {
                "table": "atom",
                "column": "atom_id",
                "value": "TR000_1",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "atom with ID refers to atom_id; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
        "values_list": [
            "atom.atom_id.tr000_1"
        ]
    },
    {
        "question": "Is molecule TR000 is carcinogenic or not?",
        "SQL": "SELECT label FROM molecule AS T WHERE T.molecule_id = 'TR000'",
        "tables": [
            "molecule"
        ],
        "columns": [
            "molecule.molecule_id",
            "molecule.label"
        ],
        "values": [
            {
                "table": "molecule",
                "column": "molecule_id",
                "value": "TR000",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic",
        "values_list": [
            "molecule.molecule_id.tr000"
        ]
    },
    {
        "question": "In the molecule TR008, how many carbons are present?",
        "SQL": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.molecule_id = 'TR008' AND T.element = 'c'",
        "tables": [
            "atom"
        ],
        "columns": [
            "atom.atom_id",
            "atom.molecule_id",
            "atom.element"
        ],
        "values": [
            {
                "table": "atom",
                "column": "molecule_id",
                "value": "TR008",
                "condition": "="
            },
            {
                "table": "atom",
                "column": "element",
                "value": "c",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "carbon refers to element = 'c'",
        "values_list": [
            "atom.molecule_id.tr008",
            "atom.element.c"
        ]
    },
    {
        "question": "List the element and bond type included in the molecule with molecule ID of TR002.",
        "SQL": "SELECT DISTINCT T1.element, T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR002'",
        "tables": [
            "bond",
            "atom"
        ],
        "columns": [
            "bond.molecule_id",
            "bond.bond_type",
            "atom.molecule_id",
            "atom.element"
        ],
        "values": [
            {
                "table": "atom",
                "column": "molecule_id",
                "value": "TR002",
                "condition": "="
            }
        ],
        "db_id": "toxicology",
        "source": "bird_dev",
        "evidence": "TR002 is the molecule id",
        "values_list": [
            "atom.molecule_id.tr002"
        ]
    },
    {
        "question": "What are the borderless cards available without powerful foils?",
        "SQL": "SELECT id FROM cards WHERE borderColor = 'borderless' AND (cardKingdomId IS NULL OR cardKingdomId IS NULL)",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.bordercolor",
            "cards.id",
            "cards.cardkingdomid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "bordercolor",
                "value": "borderless",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "borderless' refers to borderColor; poweful foils refers to cardKingdomFoilId paired with cardKingdomId AND cardKingdomId is not null",
        "values_list": [
            "cards.bordercolor.borderless"
        ]
    },
    {
        "question": "List all the mythic rarity print cards banned in gladiator format.",
        "SQL": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.rarity",
            "legalities.format",
            "cards.id",
            "legalities.status",
            "legalities.uuid",
            "cards.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "rarity",
                "value": "mythic",
                "condition": "="
            },
            {
                "table": "legalities",
                "column": "format",
                "value": "gladiator",
                "condition": "="
            },
            {
                "table": "legalities",
                "column": "status",
                "value": "Banned",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "mythic rarity printing refers to rarity = 'mythic'; card banned refers to status = 'Banned'; in gladiator format refers to format = 'gladiator';",
        "values_list": [
            "cards.rarity.mythic",
            "legalities.format.gladiator",
            "legalities.status.banned"
        ]
    },
    {
        "question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format.",
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Artifact' AND T2.format = 'vintage' AND T1.side IS NULL",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.side",
            "legalities.format",
            "legalities.status",
            "legalities.uuid",
            "cards.uuid",
            "cards.type"
        ],
        "values": [
            {
                "table": "cards",
                "column": "type",
                "value": "Artifact",
                "condition": "="
            },
            {
                "table": "legalities",
                "column": "format",
                "value": "vintage",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Artifact type of cards refers to types = 'Artifact'; card does not have multiple faces on the same card refers to side is NULL'; vintage play format refers to format = 'vintage';",
        "values_list": [
            "cards.type.artifact",
            "legalities.format.vintage"
        ]
    },
    {
        "question": "Describe the information about rulings for card named 'Sublime Epiphany' with number 74s.",
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sublime Epiphany' AND T1.number = '74s'",
        "tables": [
            "rulings",
            "cards"
        ],
        "columns": [
            "rulings.text",
            "cards.name",
            "cards.number",
            "cards.uuid",
            "rulings.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Sublime Epiphany",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "number",
                "value": "74s",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Sublime Epiphany' is name of cards; number 74s refers to number = '74s'; information refers to text;",
        "values_list": [
            "cards.name.sublime epiphany",
            "cards.number.74s"
        ]
    },
    {
        "question": "State the alternative languages available for card named Annul numbered 29.",
        "SQL": "SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Annul' AND T1.number = 29",
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.name",
            "foreign_data.uuid",
            "cards.number",
            "cards.uuid",
            "foreign_data.language"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Annul",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "number",
                "value": "29",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "annul refers to name = 'annul'; numbered 29 refers to number = '29';",
        "values_list": [
            "cards.name.annul",
            "cards.number.29"
        ]
    },
    {
        "question": "Name all the cards which have alternative language in Japanese.",
        "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'",
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.uuid",
            "cards.name",
            "foreign_data.language",
            "foreign_data.uuid"
        ],
        "values": [
            {
                "table": "foreign_data",
                "column": "language",
                "value": "Japanese",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Japanese' is the language;",
        "values_list": [
            "foreign_data.language.japanese"
        ]
    },
    {
        "question": "Calculate the percentage of the cards availabe in Chinese Simplified.",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid",
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.uuid",
            "foreign_data.language",
            "cards.id",
            "foreign_data.uuid"
        ],
        "values": [
            {
                "table": "foreign_data",
                "column": "language",
                "value": "Chinese Simplified",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Chinese Simplified' is the language; percentage = Divide(Sum(id where language = 'Chinese Simplified'), Count(id)) *100",
        "values_list": [
            "foreign_data.language.chinese simplified"
        ]
    },
    {
        "question": "List all the sets available in Italian translation. State the total number of cards per set.",
        "SQL": "SELECT T1.name, T1.totalSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian'",
        "tables": [
            "sets",
            "set_translations"
        ],
        "columns": [
            "set_translations.language",
            "sets.code",
            "sets.totalsetsize",
            "set_translations.setcode",
            "sets.name"
        ],
        "values": [
            {
                "table": "set_translations",
                "column": "language",
                "value": "Italian",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Italian translation refers to language = 'Italian'; total number of card per set refers to totalSetSize;",
        "values_list": [
            "set_translations.language.italian"
        ]
    },
    {
        "question": "How many types of cards does the artist Aaron Boyd illustrated about card art?",
        "SQL": "SELECT COUNT(type) FROM cards WHERE artist = 'Aaron Boyd'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.artist",
            "cards.type"
        ],
        "values": [
            {
                "table": "cards",
                "column": "artist",
                "value": "Aaron Boyd",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Aaron Boyd' is artist;",
        "values_list": [
            "cards.artist.aaron boyd"
        ]
    },
    {
        "question": "What is the keyword found on card 'Angel of Mercy'?",
        "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.name",
            "cards.keywords"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Angel of Mercy",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Angel of Mercy' is the name of card;",
        "values_list": [
            "cards.name.angel of mercy"
        ]
    },
    {
        "question": "What type of promotion is of card 'Duress'?",
        "SQL": "SELECT promoTypes FROM cards WHERE name = 'Duress' AND promoTypes IS NOT NULL",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.name",
            "cards.promotypes"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Duress",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card Duress refers to name = 'Duress'; type of promotion refers to promoTypes;",
        "values_list": [
            "cards.name.duress"
        ]
    },
    {
        "question": "cards are not directly linked to language but through table 'set'. you need to add set in covered table & rephrase your question\nWhat are the languages available for the set that card 'Angel of Mercy' is in?",
        "SQL": "SELECT language FROM set_translations WHERE id IN ( SELECT id FROM cards WHERE name = 'Angel of Mercy' )",
        "tables": [
            "cards",
            "set_translations"
        ],
        "columns": [
            "cards.name"
        ],
        "values": [
            {
                "table": "",
                "column": "name",
                "value": "Angel of Mercy",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Angel of Mercy' is the name of card;",
        "values_list": [
            ".name.angel of mercy"
        ]
    },
    {
        "question": "What is the description about the ruling of card \"Condemn\"?",
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn'",
        "tables": [
            "rulings",
            "cards"
        ],
        "columns": [
            "cards.uuid",
            "cards.name",
            "rulings.text",
            "rulings.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Condemn",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
        "values_list": [
            "cards.name.condemn"
        ]
    },
    {
        "question": "What is the status of card \"Cloudchaser Eagle\"?",
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "legalities.uuid",
            "legalities.status",
            "cards.name",
            "cards.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Cloudchaser Eagle",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Cloudchaser Eagle is the name of card;",
        "values_list": [
            "cards.name.cloudchaser eagle"
        ]
    },
    {
        "question": "What is the type of card \"Benalish Knight\"?",
        "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.uuid",
            "cards.name",
            "foreign_data.uuid",
            "cards.type"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Benalish Knight",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Benalish Knight' is the name of card;",
        "values_list": [
            "cards.name.benalish knight"
        ]
    },
    {
        "question": "What is the rule of playing card \"Benalish Knight\"?",
        "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "legalities.uuid",
            "cards.uuid",
            "legalities.format",
            "cards.name"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Benalish Knight",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
        "values_list": [
            "cards.name.benalish knight"
        ]
    },
    {
        "question": "Please provide the names of the artists who illustrated the card art in Phyrexian.",
        "SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Phyrexian'",
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.artist",
            "foreign_data.language",
            "foreign_data.uuid",
            "cards.uuid"
        ],
        "values": [
            {
                "table": "foreign_data",
                "column": "language",
                "value": "Phyrexian",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Phyrexian' is the language; name of artists refers to artist;",
        "values_list": [
            "foreign_data.language.phyrexian"
        ]
    },
    {
        "question": "What is the percentage of borderless cards?",
        "SQL": "SELECT CAST(SUM(CASE WHEN borderColor = 'borderless' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.bordercolor",
            "cards.id"
        ],
        "values": [
            {
                "table": "cards",
                "column": "bordercolor",
                "value": "borderless",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "borderless card refers to borderColor = 'borderless'; percentage = Divide(Count (id) where borderColor = 'borderless', Count(id)) *100",
        "values_list": [
            "cards.bordercolor.borderless"
        ]
    },
    {
        "question": "How many borderless cards are illustrated in Russian?",
        "SQL": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.borderColor = 'borderless' AND T2.language = 'Russian'",
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.id",
            "cards.bordercolor",
            "foreign_data.uuid",
            "cards.uuid",
            "foreign_data.language"
        ],
        "values": [
            {
                "table": "cards",
                "column": "bordercolor",
                "value": "borderless",
                "condition": "="
            },
            {
                "table": "foreign_data",
                "column": "language",
                "value": "Russian",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "borderless card refers to borderColor = 'borderless'; 'Russian' is the language;",
        "values_list": [
            "cards.bordercolor.borderless",
            "foreign_data.language.russian"
        ]
    },
    {
        "question": "Name the cards that were illustrated by Aaron Boyd.",
        "SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Aaron Boyd'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.artist",
            "cards.name"
        ],
        "values": [
            {
                "table": "cards",
                "column": "artist",
                "value": "Aaron Boyd",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Aaron Boyd' is artist;",
        "values_list": [
            "cards.artist.aaron boyd"
        ]
    },
    {
        "question": "How many black border cards are only available on mtgo?",
        "SQL": "SELECT COUNT(id) FROM cards WHERE availability = 'mtgo' AND borderColor = 'black'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.bordercolor",
            "cards.id",
            "cards.availability"
        ],
        "values": [
            {
                "table": "cards",
                "column": "availability",
                "value": "mtgo",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "bordercolor",
                "value": "black",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "black border card refers to borderColor = black; available on mtgo refers to availability = mtgo;\n\nadd quotes for string = 'black' and = 'mtgo'",
        "values_list": [
            "cards.availability.mtgo",
            "cards.bordercolor.black"
        ]
    },
    {
        "question": "What are the card layout of cards with keyword of flying?",
        "SQL": "SELECT layout FROM cards WHERE keywords = 'Flying'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.keywords",
            "cards.layout"
        ],
        "values": [
            {
                "table": "cards",
                "column": "keywords",
                "value": "Flying",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "cards.keywords.flying"
        ]
    },
    {
        "question": "How many cards with original type of \"Summon - Angel\" have subtype other than \"Angel\"?",
        "SQL": "SELECT COUNT(id) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes != 'Angel'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.originaltype",
            "cards.id",
            "cards.subtypes"
        ],
        "values": [
            {
                "table": "cards",
                "column": "originaltype",
                "value": "Summon - Angel",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "subtypes",
                "value": "Angel",
                "condition": "!="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "subtype other than Angel refers to subtypes is not 'Angel';",
        "values_list": [
            "cards.originaltype.summon - angel",
            "cards.subtypes.angel"
        ]
    },
    {
        "question": "What are the cards belong to duel deck a? List the ID.",
        "SQL": "SELECT id FROM cards WHERE duelDeck = 'a'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.id",
            "cards.dueldeck"
        ],
        "values": [
            {
                "table": "cards",
                "column": "dueldeck",
                "value": "a",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "duel deck a refers to duelDeck = a;",
        "values_list": [
            "cards.dueldeck.a"
        ]
    },
    {
        "question": "List down the name of artists for cards in Chinese Simplified.",
        "SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'",
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.artist",
            "foreign_data.language",
            "foreign_data.uuid",
            "cards.uuid"
        ],
        "values": [
            {
                "table": "foreign_data",
                "column": "language",
                "value": "Chinese Simplified",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Chinese Simplified' is the language;",
        "values_list": [
            "foreign_data.language.chinese simplified"
        ]
    },
    {
        "question": "What are the cards that only available in paper and Japanese language?",
        "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Japanese'",
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.name",
            "foreign_data.uuid",
            "cards.uuid",
            "foreign_data.language",
            "cards.availability"
        ],
        "values": [
            {
                "table": "cards",
                "column": "availability",
                "value": "paper",
                "condition": "="
            },
            {
                "table": "foreign_data",
                "column": "language",
                "value": "Japanese",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "available in paper refers to availability = 'paper'; 'Japanese is the language;",
        "values_list": [
            "cards.availability.paper",
            "foreign_data.language.japanese"
        ]
    },
    {
        "question": "How many of the banned cards are white border?",
        "SQL": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Banned' AND T1.borderColor = 'white'",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.id",
            "cards.bordercolor",
            "legalities.status",
            "legalities.uuid",
            "cards.uuid"
        ],
        "values": [
            {
                "table": "legalities",
                "column": "status",
                "value": "Banned",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "bordercolor",
                "value": "white",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "banned card refers to status = 'Banned'; white border refers to borderColor = 'white';",
        "values_list": [
            "legalities.status.banned",
            "cards.bordercolor.white"
        ]
    },
    {
        "question": "List down the uuid for legacy cards and the foreign language of these cards.",
        "SQL": "SELECT T1.uuid, T3.language FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'legacy'",
        "tables": [
            "cards",
            "legalities",
            "foreign_data"
        ],
        "columns": [
            "legalities.format",
            "foreign_data.uuid",
            "legalities.uuid",
            "cards.uuid",
            "foreign_data.language"
        ],
        "values": [
            {
                "table": "legalities",
                "column": "format",
                "value": "legacy",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "legacy card refers to format = 'legacy'; foreign language refers to language in foreign_data",
        "values_list": [
            "legalities.format.legacy"
        ]
    },
    {
        "question": "Write down the ruling of Beacon of Immortality.",
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality'",
        "tables": [
            "rulings",
            "cards"
        ],
        "columns": [
            "cards.uuid",
            "cards.name",
            "rulings.text",
            "rulings.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Beacon of Immortality",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Beacon of Immortality' is the name of card;",
        "values_list": [
            "cards.name.beacon of immortality"
        ]
    },
    {
        "question": "How many cards are having future frame version and what are the legality status of these cards?",
        "SQL": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.frameVersion = 'future'",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "legalities.uuid",
            "cards.uuid",
            "cards.frameversion",
            "cards.id"
        ],
        "values": [
            {
                "table": "cards",
                "column": "frameversion",
                "value": "future",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "future frame version refers to frameVersion = 'future'; legility status refers to status = 'legal';",
        "values_list": [
            "cards.frameversion.future"
        ]
    },
    {
        "question": "What are the cards for set OGW? State the colour for these cards.",
        "SQL": "SELECT id, colors FROM cards WHERE id IN ( SELECT id FROM set_translations WHERE setCode = 'OGW' )",
        "tables": [
            "set_translations",
            "cards"
        ],
        "columns": [
            "cards.colors"
        ],
        "values": [
            {
                "table": "",
                "column": "setcode",
                "value": "OGW",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "set OGW refers to setCode = 'OGW';",
        "values_list": [
            ".setcode.ogw"
        ]
    },
    {
        "question": "What are the cards in set 10E with converted mana of 5 have translation and what are the languages?",
        "SQL": "SELECT id, language FROM set_translations WHERE id = ( SELECT id FROM cards WHERE convertedManaCost = 5 ) AND setCode = '10E'",
        "tables": [
            "set_translations",
            "cards"
        ],
        "columns": [
            "cards.convertedmanacost",
            "cards.id"
        ],
        "values": [
            {
                "table": "cards",
                "column": "convertedmanacost",
                "value": "5",
                "condition": "="
            },
            {
                "table": "",
                "column": "setcode",
                "value": "10E",
                "condition": "="
            },
            {
                "table": "",
                "column": "convertedmanacost",
                "value": "5",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "set 10E refers to setCode = '10E'; converted mana of 5 refers to convertedManaCost = 5;",
        "values_list": [
            "cards.convertedmanacost.5",
            ".setcode.10e",
            ".convertedmanacost.5"
        ]
    },
    {
        "question": "List down the name of cards with original types of Creature - Elf and the date of rulings for these cards.",
        "SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'",
        "tables": [
            "rulings",
            "cards"
        ],
        "columns": [
            "cards.originaltype",
            "cards.id",
            "rulings.date",
            "cards.uuid",
            "rulings.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "originaltype",
                "value": "Creature - Elf",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Creature - Elf is the originalType;",
        "values_list": [
            "cards.originaltype.creature - elf"
        ]
    },
    {
        "question": "Among the Artifact cards, which are black color and comes with foreign languague translation?",
        "SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B'",
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.originaltype",
            "cards.name",
            "cards.colors",
            "foreign_data.uuid",
            "cards.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "originaltype",
                "value": "Artifact",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "colors",
                "value": "B",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Artifact card refers to originalType = 'Artifact'; black color refers to colors = 'B'; foreign language refers to language in foreign_data",
        "values_list": [
            "cards.originaltype.artifact",
            "cards.colors.b"
        ]
    },
    {
        "question": "Pick 3 cards with rarity of uncommon, list down name these cards according to ascending order of it's ruling date.",
        "SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3",
        "tables": [
            "rulings",
            "cards"
        ],
        "columns": [
            "cards.rarity",
            "rulings.date",
            "cards.name",
            "cards.uuid",
            "rulings.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "rarity",
                "value": "uncommon",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "uncommon refers to rarity = 'uncommon';",
        "values_list": [
            "cards.rarity.uncommon"
        ]
    },
    {
        "question": "On how many cards designed by John Avon is its foil non-powerful?",
        "SQL": "SELECT COUNT(id) FROM cards WHERE (cardKingdomId IS NULL OR cardKingdomFoilId IS NULL) AND artist = 'John Avon'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.artist",
            "cards.id",
            "cards.cardkingdomid",
            "cards.cardkingdomfoilid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "artist",
                "value": "John Avon",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "John Avon refer to artist; foil poweful foils refers to cardKingdomId and cardKingdomFoildId is NOT NULL \n",
        "values_list": [
            "cards.artist.john avon"
        ]
    },
    {
        "question": "How many white bordered cards are powerful?",
        "SQL": "SELECT COUNT(id) FROM cards WHERE borderColor = 'white' AND cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NOT NULL",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.bordercolor",
            "cards.id",
            "cards.cardkingdomid",
            "cards.cardkingdomfoilid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "bordercolor",
                "value": "white",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "white bordered cards refer to borderColor = 'white'; powerful cards refers to cardKingdomFoilId is not null AND cardKingdomId is not null (replace)",
        "values_list": [
            "cards.bordercolor.white"
        ]
    },
    {
        "question": "How many cards designed by UDON and available in mtgo print type has a starting maximum hand size of -1?",
        "SQL": "SELECT COUNT(id) FROM cards WHERE hAND = '-1' AND artist = 'UDON' AND Availability = 'mtgo' ",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.artist",
            "cards.hand",
            "cards.id",
            "cards.availability"
        ],
        "values": [
            {
                "table": "cards",
                "column": "availability",
                "value": "mtgo",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "hand",
                "value": "-1",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "artist",
                "value": "UDON",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "UDON refer to artist; availabe in mtgo refers to availability = 'mtgo'; starting maximum hand size of -1 refers to hand = -1",
        "values_list": [
            "cards.availability.mtgo",
            "cards.hand.-1",
            "cards.artist.udon"
        ]
    },
    {
        "question": "How many cards with a 1993 frame version and available on paper have a sensitive content warning?",
        "SQL": "SELECT COUNT(id) FROM cards WHERE frameVersion = 1993 AND availability = 'paper' AND hasContentWarning = 1",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.frameversion",
            "cards.id",
            "cards.hascontentwarning",
            "cards.availability"
        ],
        "values": [
            {
                "table": "cards",
                "column": "hascontentwarning",
                "value": "1",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "frameversion",
                "value": "1993",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "availability",
                "value": "paper",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "sensitive content warning refer to hasContentWarning = 1; available on paper refer to availability = 'paper' 1993 refer to frameVersion",
        "values_list": [
            "cards.hascontentwarning.1",
            "cards.frameversion.1993",
            "cards.availability.paper"
        ]
    },
    {
        "question": "What is the  unconverted mana do all the cards created by Rob Alexander cost in total?",
        "SQL": "SELECT manaCost FROM cards WHERE artist = 'Rob Alexander'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.artist",
            "cards.manacost"
        ],
        "values": [
            {
                "table": "cards",
                "column": "artist",
                "value": "Rob Alexander",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "unconverted mana refer to manaCost; Rob Alexander refer to artist",
        "values_list": [
            "cards.artist.rob alexander"
        ]
    },
    {
        "question": "Lists all types of cards available in arena.",
        "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE availability = 'arena' AND subtypes IS NOT NULL AND supertypes IS NOT NULL",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.availability",
            "cards.subtypes",
            "cards.supertypes"
        ],
        "values": [
            {
                "table": "cards",
                "column": "availability",
                "value": "arena",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "all types refer to subtypes and supertypes\n\navailble in arena refers to availability = 'arena'",
        "values_list": [
            "cards.availability.arena"
        ]
    },
    {
        "question": "Lists the set code of all cards translated into Spanish.",
        "SQL": "SELECT setCode FROM set_translations WHERE language = 'Spanish'",
        "tables": [
            "set_translations"
        ],
        "columns": [
            "set_translations.setcode",
            "set_translations.language"
        ],
        "values": [
            {
                "table": "set_translations",
                "column": "language",
                "value": "Spanish",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Spanish refer to language; set code refers to setCode",
        "values_list": [
            "set_translations.language.spanish"
        ]
    },
    {
        "question": "Calculate the percentage of cards in Spanish. List them by name.",
        "SQL": "SELECT ( SELECT CAST(SUM(CASE WHEN language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ), name FROM foreign_data WHERE language = 'Spanish'",
        "tables": [
            "foreign_data"
        ],
        "columns": [
            "foreign_data.language"
        ],
        "values": [
            {
                "table": "foreign_data",
                "column": "language",
                "value": "Spanish",
                "condition": "="
            },
            {
                "table": "",
                "column": "language",
                "value": "Spanish",
                "condition": "="
            },
            {
                "table": "",
                "column": "language",
                "value": "Spanish",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Spanish refer to language; Percentage refer to DIVIDE(SUM(ID where language = 'Spanish'), COUNT(id))*100",
        "values_list": [
            "foreign_data.language.spanish",
            ".language.spanish",
            ".language.spanish"
        ]
    },
    {
        "question": "Lists by ID all Creature-type cards with legal status.",
        "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T3.status = 'Legal' AND T1.types = 'Creature'",
        "tables": [
            "rulings",
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.types",
            "cards.id",
            "legalities.status",
            "legalities.uuid",
            "cards.uuid",
            "rulings.uuid"
        ],
        "values": [
            {
                "table": "legalities",
                "column": "status",
                "value": "Legal",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "types",
                "value": "Creature",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "legal status refer to status = 'legal'; Goblin-type cards refer to types = 'Creature';",
        "values_list": [
            "legalities.status.legal",
            "cards.types.creature"
        ]
    },
    {
        "question": "Lists all types of cards in German.",
        "SQL": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL",
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.subtypes",
            "foreign_data.uuid",
            "cards.supertypes",
            "cards.uuid",
            "foreign_data.language"
        ],
        "values": [
            {
                "table": "foreign_data",
                "column": "language",
                "value": "German",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "German refer to language; all types refer to the subtypes, supertypes; subtypes is not null AND supertypes is not null",
        "values_list": [
            "foreign_data.language.german"
        ]
    },
    {
        "question": "Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its ID.",
        "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.artist",
            "legalities.format",
            "cards.id",
            "legalities.uuid",
            "cards.uuid",
            "cards.availability"
        ],
        "values": [
            {
                "table": "cards",
                "column": "availability",
                "value": "paper",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "artist",
                "value": "Erica Yang",
                "condition": "="
            },
            {
                "table": "legalities",
                "column": "format",
                "value": "pauper",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "available in paper refers to availability = 'paper'",
        "values_list": [
            "cards.availability.paper",
            "cards.artist.erica yang",
            "legalities.format.pauper"
        ]
    },
    {
        "question": "What is the foreign name of the card in French of type Creature, normal layout and black border color, by artist Matthew D. Wilson?",
        "SQL": "SELECT name FROM foreign_data WHERE uuid IN ( SELECT uuid FROM cards WHERE types = 'Creature' AND layout = 'normal' AND borderColor = 'black' AND artist = 'Matthew D. Wilson' ) AND language = 'French'",
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.types",
            "cards.artist",
            "cards.name",
            "cards.uuid",
            "cards.layout"
        ],
        "values": [
            {
                "table": "",
                "column": "language",
                "value": "French",
                "condition": "="
            },
            {
                "table": "",
                "column": "artist",
                "value": "Matthew D. Wilson",
                "condition": "="
            },
            {
                "table": "",
                "column": "bordercolor",
                "value": "black",
                "condition": "="
            },
            {
                "table": "",
                "column": "types",
                "value": "Creature",
                "condition": "="
            },
            {
                "table": "",
                "column": "layout",
                "value": "normal",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "in French refers to language = 'French'; black border color refers to borderColor = 'black'",
        "values_list": [
            ".language.french",
            ".artist.matthew d. wilson",
            ".bordercolor.black",
            ".types.creature",
            ".layout.normal"
        ]
    },
    {
        "question": "What language is the set of 180 cards that belongs to the Ravnica block translated into?",
        "SQL": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Ravnica' AND T1.baseSetSize = 180",
        "tables": [
            "sets",
            "set_translations"
        ],
        "columns": [
            "set_translations.language",
            "sets.code",
            "sets.basesetsize",
            "sets.block",
            "set_translations.setcode"
        ],
        "values": [
            {
                "table": "sets",
                "column": "block",
                "value": "Ravnica",
                "condition": "="
            },
            {
                "table": "sets",
                "column": "basesetsize",
                "value": "180",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "set of 180 cards refers to baseSetSize = 180",
        "values_list": [
            "sets.block.ravnica",
            "sets.basesetsize.180"
        ]
    },
    {
        "question": "What percentage of Japanese translated sets are expansion sets?",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.language = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.type = 'expansion'",
        "tables": [
            "sets",
            "set_translations"
        ],
        "columns": [
            "set_translations.language",
            "sets.type",
            "sets.code",
            "sets.id",
            "set_translations.setcode"
        ],
        "values": [
            {
                "table": "sets",
                "column": "type",
                "value": "expansion",
                "condition": "="
            },
            {
                "table": "set_translations",
                "column": "language",
                "value": "Japanese",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Japanese translated refers to language = 'Japanese'; expansion sets refers to type = 'expansion'; percentage = DIVIDE(COUNT(language = 'Japanese'),COUNT(language))*100",
        "values_list": [
            "sets.type.expansion",
            "set_translations.language.japanese"
        ]
    },
    {
        "question": "What kind of printing is on the card that Daren Bader created?",
        "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.artist",
            "cards.availability"
        ],
        "values": [
            {
                "table": "cards",
                "column": "artist",
                "value": "Daren Bader",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
        "values_list": [
            "cards.artist.daren bader"
        ]
    },
    {
        "question": "What languages are available in the set known as Archenemy on the magic card market and having the code ARC?",
        "SQL": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.mcmName = 'Archenemy' AND T2.setCode = 'ARC'",
        "tables": [
            "sets",
            "set_translations"
        ],
        "columns": [
            "sets.mcmname",
            "set_translations.setcode",
            "sets.code",
            "set_translations.language"
        ],
        "values": [
            {
                "table": "sets",
                "column": "mcmname",
                "value": "Archenemy",
                "condition": "="
            },
            {
                "table": "set_translations",
                "column": "setcode",
                "value": "ARC",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "known as Archenemy refers to mcmName = 'Archenemy'; having the code ARC refers to setCode = 'ARC'",
        "values_list": [
            "sets.mcmname.archenemy",
            "set_translations.setcode.arc"
        ]
    },
    {
        "question": "Please list top two sets of cards with their IDs that have Italian-language cards and are located in the Shadowmoor block in alphabetical order.",
        "SQL": "SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Shadowmoor' AND T2.language = 'Italian' ORDER BY T1.id LIMIT 2",
        "tables": [
            "sets",
            "set_translations"
        ],
        "columns": [
            "set_translations.language",
            "sets.code",
            "sets.id",
            "sets.block",
            "set_translations.setcode",
            "sets.name"
        ],
        "values": [
            {
                "table": "sets",
                "column": "block",
                "value": "Shadowmoor",
                "condition": "="
            },
            {
                "table": "set_translations",
                "column": "language",
                "value": "Italian",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "sets.block.shadowmoor",
            "set_translations.language.italian"
        ]
    },
    {
        "question": "Which Russian set of cards contains the most cards overall?",
        "SQL": "SELECT T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Russian' GROUP BY T1.baseSetSize ORDER BY T1.baseSetSize DESC LIMIT 1",
        "tables": [
            "sets",
            "set_translations"
        ],
        "columns": [
            "set_translations.language",
            "sets.code",
            "sets.id",
            "sets.basesetsize",
            "set_translations.setcode"
        ],
        "values": [
            {
                "table": "set_translations",
                "column": "language",
                "value": "Russian",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Russian refers to language = 'Russian'; contains the most cards overall refers to MAX(baseSetSize)",
        "values_list": [
            "set_translations.language.russian"
        ]
    },
    {
        "question": "How many sets are available just in Japanese and not in Magic: The Gathering Online?",
        "SQL": "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.language = 'Japanese'  AND (T1.mtgoCode IS NULL OR T1.mtgoCode = '')",
        "tables": [
            "sets",
            "set_translations"
        ],
        "columns": [
            "set_translations.language",
            "sets.code",
            "sets.id",
            "sets.mtgocode",
            "set_translations.setcode"
        ],
        "values": [
            {
                "table": "set_translations",
                "column": "language",
                "value": "Japanese",
                "condition": "="
            },
            {
                "table": "sets",
                "column": "mtgocode",
                "value": "",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Japanese refers to language = 'Japanese'; not in Magic: The Gathering Online refers to mtgoCode is null or mtgoCode = ''",
        "values_list": [
            "set_translations.language.japanese",
            "sets.mtgocode."
        ]
    },
    {
        "question": "How many card border with black color ? List out the card id.",
        "SQL": "SELECT id FROM cards WHERE borderColor = 'black' GROUP BY id",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.bordercolor",
            "cards.id"
        ],
        "values": [
            {
                "table": "cards",
                "column": "bordercolor",
                "value": "black",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "border with black color refers to borderColor = 'black'",
        "values_list": [
            "cards.bordercolor.black"
        ]
    },
    {
        "question": "How many cards have frame effect as extendedart? List out the id of those cards.",
        "SQL": "SELECT id FROM cards WHERE frameEffects = 'extendedart' GROUP BY id",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.id",
            "cards.frameeffects"
        ],
        "values": [
            {
                "table": "cards",
                "column": "frameeffects",
                "value": "extendedart",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "\nframe effect as extendedart refers to frameEffects = 'extendedart'\n",
        "values_list": [
            "cards.frameeffects.extendedart"
        ]
    },
    {
        "question": "List out the set name of the set code \"ALL\".",
        "SQL": "SELECT name FROM sets WHERE code = 'ALL'",
        "tables": [
            "sets"
        ],
        "columns": [
            "sets.name",
            "sets.code"
        ],
        "values": [
            {
                "table": "sets",
                "column": "code",
                "value": "ALL",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "sets.code.all"
        ]
    },
    {
        "question": "Which foreign language used by \"A Pedra Fellwar\"?",
        "SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar'",
        "tables": [
            "foreign_data"
        ],
        "columns": [
            "foreign_data.language",
            "foreign_data.name"
        ],
        "values": [
            {
                "table": "foreign_data",
                "column": "name",
                "value": "A Pedra Fellwar",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "\"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
        "values_list": [
            "foreign_data.name.a pedra fellwar"
        ]
    },
    {
        "question": "Mention the base set size and set code of the set that was in block named \"Masques\" and \"Mirage\".",
        "SQL": "SELECT DISTINCT T1.baseSetSize, T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.block IN ('Masques', 'Mirage')",
        "tables": [
            "sets",
            "set_translations"
        ],
        "columns": [
            "set_translations.setcode",
            "sets.code",
            "sets.basesetsize",
            "sets.block"
        ],
        "values": [
            {
                "table": "sets",
                "column": "block",
                "value": "Masques"
            },
            {
                "table": "sets",
                "column": "block",
                "value": "Mirage"
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "sets.block.masques",
            "sets.block.mirage"
        ]
    },
    {
        "question": "Give the code of sets have expansion type of 'expansion'?",
        "SQL": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'expansion' GROUP BY T2.setCode",
        "tables": [
            "sets",
            "set_translations"
        ],
        "columns": [
            "sets.type",
            "set_translations.setcode",
            "sets.code"
        ],
        "values": [
            {
                "table": "sets",
                "column": "type",
                "value": "expansion",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "code of sets refers to setCode",
        "values_list": [
            "sets.type.expansion"
        ]
    },
    {
        "question": "Name the foreign name of the card that has boros watermark? List out the type of this card.",
        "SQL": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'boros'",
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.watermark",
            "cards.name",
            "foreign_data.uuid",
            "cards.uuid",
            "cards.type"
        ],
        "values": [
            {
                "table": "cards",
                "column": "watermark",
                "value": "boros",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "cards.watermark.boros"
        ]
    },
    {
        "question": "What is the language and flavor text of the card that has colorpie watermark? List out the type of this card.",
        "SQL": "SELECT DISTINCT T2.language, T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'colorpie'",
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "foreign_data.flavortext",
            "cards.watermark",
            "foreign_data.uuid",
            "cards.uuid",
            "foreign_data.language"
        ],
        "values": [
            {
                "table": "cards",
                "column": "watermark",
                "value": "colorpie",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "cards.watermark.colorpie"
        ]
    },
    {
        "question": "What is percentage of the cards with a converted Mana Cost of 10 in set of Abyssal Horror?",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 10 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id), T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Abyssal Horror'",
        "tables": [
            "sets",
            "cards"
        ],
        "columns": [
            "cards.id",
            "sets.code",
            "cards.convertedmanacost",
            "cards.name",
            "cards.setcode"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Abyssal Horror",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "convertedmanacost",
                "value": "10",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "set of Abyssal Horror refers to name = 'Abyssal Horror'; percentage refers to DIVIDE(COUNT(convertedManaCost = 16),COUNT(convertedManaCost))*100",
        "values_list": [
            "cards.name.abyssal horror",
            "cards.convertedmanacost.10"
        ]
    },
    {
        "question": "Give the code of sets have expansion commander type?",
        "SQL": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'commander'",
        "tables": [
            "sets",
            "set_translations"
        ],
        "columns": [
            "sets.type",
            "set_translations.setcode",
            "sets.code"
        ],
        "values": [
            {
                "table": "sets",
                "column": "type",
                "value": "commander",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "code of sets refers to setCode",
        "values_list": [
            "sets.type.commander"
        ]
    },
    {
        "question": "Name the foreign name of the card that has abzan watermark? List out the type of this card.",
        "SQL": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'abzan'",
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.watermark",
            "cards.name",
            "foreign_data.uuid",
            "cards.uuid",
            "cards.type"
        ],
        "values": [
            {
                "table": "cards",
                "column": "watermark",
                "value": "abzan",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "cards.watermark.abzan"
        ]
    },
    {
        "question": "What is the language of the card that has azorius watermark? List out the type of this card.",
        "SQL": "SELECT DISTINCT T2.language, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'azorius'",
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.watermark",
            "foreign_data.uuid",
            "cards.uuid",
            "foreign_data.language",
            "cards.type"
        ],
        "values": [
            {
                "table": "cards",
                "column": "watermark",
                "value": "azorius",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "cards.watermark.azorius"
        ]
    },
    {
        "question": "Of all the cards that are designed by Aaron Miller, how many of them are incredibly powerful?",
        "SQL": "SELECT SUM(CASE WHEN artist = 'Aaron Miller' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) FROM cards",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.artist",
            "cards.cardkingdomid",
            "cards.cardkingdomfoilid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "artist",
                "value": "Aaron Miller",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "designed by Aaron Miller refers to artist = 'Aaron Miller'; are icredibily powerful refers to cardKingdomFoilId is not null AND cardKingdomId is not null",
        "values_list": [
            "cards.artist.aaron miller"
        ]
    },
    {
        "question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
        "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.name",
            "cards.subtypes",
            "cards.supertypes"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Molimo, Maro-Sorcerer",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "values_list": [
            "cards.name.molimo, maro-sorcerer"
        ]
    },
    {
        "question": "Please list the websites where I can purchase the cards that have the promotional type of \"bundle\".",
        "SQL": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'bundle'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.purchaseurls",
            "cards.promotypes"
        ],
        "values": [
            {
                "table": "cards",
                "column": "promotypes",
                "value": "bundle",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "promotional type of \"bundle\" refers to promoTypes = 'bundle'; websites refers to purchaseUrls",
        "values_list": [
            "cards.promotypes.bundle"
        ]
    },
    {
        "question": "Which card costs more converted mana, \"Serra Angel\" or \"Shrine Keeper\"?",
        "SQL": "SELECT name FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.convertedmanacost",
            "cards.name"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Serra Angel"
            },
            {
                "table": "cards",
                "column": "name",
                "value": "Shrine Keeper"
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "\"Serra Angel\" refers to name = 'Serra Angel'; \"Shrine Keeper\" refers to name = 'Shrine Keeper'; card costs more converted mana when the value of convertedManaCost is greater",
        "values_list": [
            "cards.name.serra angel",
            "cards.name.shrine keeper"
        ]
    },
    {
        "question": "Which artist designed the card whose promotional name is \"Battra, Dark Destroyer\"?",
        "SQL": "SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.artist",
            "cards.flavorname"
        ],
        "values": [
            {
                "table": "cards",
                "column": "flavorname",
                "value": "Battra, Dark Destroyer",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "promotional name is \"Battra, Dark Destroyer\" refers to flavorName = 'Battra, Dark Destroyer'",
        "values_list": [
            "cards.flavorname.battra, dark destroyer"
        ]
    },
    {
        "question": "How many translations are there for the set of cards with \"Angel of Mercy\" in it?",
        "SQL": "SELECT COUNT(DISTINCT translation) FROM set_translations WHERE setCode IN ( SELECT setCode FROM cards WHERE name = 'Angel of Mercy' ) AND translation IS NOT NULL",
        "tables": [
            "cards",
            "set_translations"
        ],
        "columns": [
            "cards.name"
        ],
        "values": [
            {
                "table": "",
                "column": "name",
                "value": "Angel of Mercy",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "set of cards with \"Angel of Mercy\" in it refers to name = 'Angel of Mercy'",
        "values_list": [
            ".name.angel of mercy"
        ]
    },
    {
        "question": "Please list the names of the cards in the set \"Hauptset Zehnte Edition\".",
        "SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T2.translation = 'Hauptset Zehnte Edition'",
        "tables": [
            "set_translations",
            "cards"
        ],
        "columns": [
            "cards.setcode",
            "cards.name",
            "set_translations.setcode",
            "set_translations.translation"
        ],
        "values": [
            {
                "table": "set_translations",
                "column": "translation",
                "value": "Hauptset Zehnte Edition",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card set \"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'",
        "values_list": [
            "set_translations.translation.hauptset zehnte edition"
        ]
    },
    {
        "question": "Among the cards in the set \"Hauptset Zehnte Edition\", how many of them are designed by Adam Rex?",
        "SQL": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T2.translation = 'Hauptset Zehnte Edition' AND T1.artist = 'Adam Rex'",
        "tables": [
            "set_translations",
            "cards"
        ],
        "columns": [
            "cards.artist",
            "cards.id",
            "set_translations.setcode",
            "cards.setcode",
            "set_translations.translation"
        ],
        "values": [
            {
                "table": "set_translations",
                "column": "translation",
                "value": "Hauptset Zehnte Edition",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "artist",
                "value": "Adam Rex",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card set \"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'; designed by Adam refers to artist = 'Adam Rex'",
        "values_list": [
            "set_translations.translation.hauptset zehnte edition",
            "cards.artist.adam rex"
        ]
    },
    {
        "question": "How many cards are there in the base set of \"Hauptset Zehnte Edition\"?",
        "SQL": "SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Hauptset Zehnte Edition'",
        "tables": [
            "sets",
            "set_translations"
        ],
        "columns": [
            "set_translations.translation",
            "set_translations.setcode",
            "sets.code",
            "sets.basesetsize"
        ],
        "values": [
            {
                "table": "set_translations",
                "column": "translation",
                "value": "Hauptset Zehnte Edition",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "\"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'; number of cards refers to baseSetSize",
        "values_list": [
            "set_translations.translation.hauptset zehnte edition"
        ]
    },
    {
        "question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
        "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
        "tables": [
            "sets",
            "cards"
        ],
        "columns": [
            "sets.mtgocode",
            "cards.name",
            "cards.setcode",
            "sets.code"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Angel of Mercy",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "values_list": [
            "cards.name.angel of mercy"
        ]
    },
    {
        "question": "What is the expansion type of the set \"Hauptset Zehnte Edition\"?",
        "SQL": "SELECT T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Hauptset Zehnte Edition'",
        "tables": [
            "sets",
            "set_translations"
        ],
        "columns": [
            "set_translations.translation",
            "sets.type",
            "set_translations.setcode",
            "sets.code"
        ],
        "values": [
            {
                "table": "set_translations",
                "column": "translation",
                "value": "Hauptset Zehnte Edition",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card set \"Hauptset Zehnte Edition\" refers to translation = ' Hauptset Zehnte Edition'; expansion type refers to type",
        "values_list": [
            "set_translations.translation.hauptset zehnte edition"
        ]
    },
    {
        "question": "Among the sets in the block \"Ice Age\", how many of them have an Italian translation?",
        "SQL": "SELECT COUNT(DISTINCT T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.block = 'Ice Age' AND T2.language = 'Italian' AND T2.translation IS NOT NULL",
        "tables": [
            "sets",
            "set_translations"
        ],
        "columns": [
            "set_translations.language",
            "sets.code",
            "sets.id",
            "sets.block",
            "set_translations.setcode",
            "set_translations.translation"
        ],
        "values": [
            {
                "table": "sets",
                "column": "block",
                "value": "Ice Age",
                "condition": "="
            },
            {
                "table": "set_translations",
                "column": "language",
                "value": "Italian",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "sets in the block \"Ice Age\" refers to block = 'Ice Age'; Italian translation refers to language = 'Italian' and translation is not null",
        "values_list": [
            "sets.block.ice age",
            "set_translations.language.italian"
        ]
    },
    {
        "question": "Among the sets of cards that have an Italian translation, how many of them have a base set number of under 100?",
        "SQL": "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation IS NOT NULL AND T1.baseSetSize < 100 AND T2.language = 'Italian'",
        "tables": [
            "sets",
            "set_translations"
        ],
        "columns": [
            "set_translations.language",
            "sets.code",
            "sets.id",
            "sets.basesetsize",
            "set_translations.setcode",
            "set_translations.translation"
        ],
        "values": [
            {
                "table": "set_translations",
                "column": "language",
                "value": "Italian",
                "condition": "="
            },
            {
                "table": "sets",
                "column": "basesetsize",
                "value": "100",
                "condition": "<"
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Italian translation refers to language = 'Italian'; have a translation means translation is not null; base set number of under 100 refers to baseSetSize < 10",
        "values_list": [
            "set_translations.language.italian",
            "sets.basesetsize.100"
        ]
    },
    {
        "question": "How many cards in the set Coldsnap have a black border color?",
        "SQL": "SELECT SUM(CASE WHEN T1.borderColor = 'black' THEN 1 ELSE 0 END) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'",
        "tables": [
            "sets",
            "cards"
        ],
        "columns": [
            "cards.bordercolor",
            "sets.name",
            "cards.setcode",
            "sets.code"
        ],
        "values": [
            {
                "table": "sets",
                "column": "name",
                "value": "Coldsnap",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "bordercolor",
                "value": "black",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card set Coldsnap refers to name = 'Coldsnap'; black border color refers to borderColor = 'black'",
        "values_list": [
            "sets.name.coldsnap",
            "cards.bordercolor.black"
        ]
    },
    {
        "question": "Please list the name of the cards in the set Coldsnap with the highest converted mana cost.",
        "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' ORDER BY T1.convertedManaCost DESC LIMIT 1",
        "tables": [
            "sets",
            "cards"
        ],
        "columns": [
            "sets.code",
            "cards.convertedmanacost",
            "cards.name",
            "cards.setcode",
            "sets.name"
        ],
        "values": [
            {
                "table": "sets",
                "column": "name",
                "value": "Coldsnap",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card set Coldsnap refers to name = 'Coldsnap'",
        "values_list": [
            "sets.name.coldsnap"
        ]
    },
    {
        "question": "Which of these artists have designed a card in the set Coldsnap, Jeremy Jarvis, Aaron Miller or Chippy?",
        "SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE (T2.name = 'Coldsnap' AND T1.artist = 'Chippy') OR (T2.name = 'Coldsnap' AND T1.artist = 'Aaron Miller') OR (T2.name = 'Coldsnap' AND T1.artist = 'Jeremy Jarvis') GROUP BY T1.artist",
        "tables": [
            "sets",
            "cards"
        ],
        "columns": [
            "cards.artist",
            "sets.name",
            "cards.setcode",
            "sets.code"
        ],
        "values": [
            {
                "table": "sets",
                "column": "name",
                "value": "Coldsnap",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "artist",
                "value": "Jeremy Jarvis",
                "condition": "="
            },
            {
                "table": "sets",
                "column": "name",
                "value": "Coldsnap",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "artist",
                "value": "Chippy",
                "condition": "="
            },
            {
                "table": "sets",
                "column": "name",
                "value": "Coldsnap",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "artist",
                "value": "Aaron Miller",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Jeremy Jarvis, Aaron Miller or Chippy are the name of artists which refers to artist IN ('Jeremy Jarvis', 'Aaron Miller','Chippy');",
        "values_list": [
            "sets.name.coldsnap",
            "cards.artist.jeremy jarvis",
            "sets.name.coldsnap",
            "cards.artist.chippy",
            "sets.name.coldsnap",
            "cards.artist.aaron miller"
        ]
    },
    {
        "question": "What is card number 4 in the set Coldsnap?",
        "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.number = 4",
        "tables": [
            "sets",
            "cards"
        ],
        "columns": [
            "sets.code",
            "cards.name",
            "cards.number",
            "cards.setcode",
            "sets.name"
        ],
        "values": [
            {
                "table": "sets",
                "column": "name",
                "value": "Coldsnap",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "number",
                "value": "4",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card set Coldsnap refers to name = 'Coldsnap'; card number 4 refers to number = 4",
        "values_list": [
            "sets.name.coldsnap",
            "cards.number.4"
        ]
    },
    {
        "question": "Please list the Italian text ruling of all the cards in the set Coldsnap.",
        "SQL": "SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian'",
        "tables": [
            "sets",
            "cards",
            "foreign_data"
        ],
        "columns": [
            "sets.code",
            "foreign_data.text",
            "foreign_data.uuid",
            "cards.uuid",
            "foreign_data.language",
            "cards.setcode",
            "sets.name"
        ],
        "values": [
            {
                "table": "sets",
                "column": "name",
                "value": "Coldsnap",
                "condition": "="
            },
            {
                "table": "foreign_data",
                "column": "language",
                "value": "Italian",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'",
        "values_list": [
            "sets.name.coldsnap",
            "foreign_data.language.italian"
        ]
    },
    {
        "question": "Please list the Italian names of the cards in the set Coldsnap with the highest converted mana cost.",
        "SQL": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian' ORDER BY T2.convertedManaCost DESC",
        "tables": [
            "sets",
            "cards",
            "foreign_data"
        ],
        "columns": [
            "sets.code",
            "cards.convertedmanacost",
            "cards.name",
            "foreign_data.uuid",
            "cards.uuid",
            "foreign_data.language",
            "cards.setcode",
            "sets.name"
        ],
        "values": [
            {
                "table": "sets",
                "column": "name",
                "value": "Coldsnap",
                "condition": "="
            },
            {
                "table": "foreign_data",
                "column": "language",
                "value": "Italian",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'; highest converted mana cost refers to MAX(convertedManaCost)",
        "values_list": [
            "sets.name.coldsnap",
            "foreign_data.language.italian"
        ]
    },
    {
        "question": "When was the ruling for the card 'Reminisce' created?",
        "SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Reminisce'",
        "tables": [
            "rulings",
            "cards"
        ],
        "columns": [
            "cards.uuid",
            "cards.name",
            "rulings.date",
            "rulings.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Reminisce",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Reminisce refers to name = 'Reminisce'; when created is the date",
        "values_list": [
            "cards.name.reminisce"
        ]
    },
    {
        "question": "What is the percentage of the cards with a converted mana cost of 7 in the set Coldsnap?",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'",
        "tables": [
            "sets",
            "cards"
        ],
        "columns": [
            "cards.id",
            "sets.code",
            "cards.convertedmanacost",
            "cards.setcode",
            "sets.name"
        ],
        "values": [
            {
                "table": "sets",
                "column": "name",
                "value": "Coldsnap",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "convertedmanacost",
                "value": "7",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "converted mana cost of 7 refers to convertedManaCost = 7; card set Coldsnap refers to name = 'Coldsnap'; percentage = DIVIDE(SUM(convertedManaCost = 7), SUM(convertedManaCost))*100",
        "values_list": [
            "sets.name.coldsnap",
            "cards.convertedmanacost.7"
        ]
    },
    {
        "question": "What is the percentage of incredibly powerful cards in the set Coldsnap?",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.cardKingdomFoilId IS NOT NULL AND T1.cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'",
        "tables": [
            "sets",
            "cards"
        ],
        "columns": [
            "cards.id",
            "sets.code",
            "cards.cardkingdomid",
            "cards.setcode",
            "sets.name",
            "cards.cardkingdomfoilid"
        ],
        "values": [
            {
                "table": "sets",
                "column": "name",
                "value": "Coldsnap",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card set Coldsnap refers to name = 'Coldsnap'; foil is incredibly powerful refers to cardKingdomFoilId is not null AND cardKingdomId is not null; the percentage of incredibly powerful cards in the set refers to DIVIDE(SUM(incredibly powerful), SUM(name = 'Coldsnap'))*100",
        "values_list": [
            "sets.name.coldsnap"
        ]
    },
    {
        "question": "List the keyrune code for the set whose code is 'PKHC'.",
        "SQL": "SELECT keyruneCode FROM sets WHERE code = 'PKHC'",
        "tables": [
            "sets"
        ],
        "columns": [
            "sets.keyrunecode",
            "sets.code"
        ],
        "values": [
            {
                "table": "sets",
                "column": "code",
                "value": "PKHC",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "keyrune code refers to keyruneCode",
        "values_list": [
            "sets.code.pkhc"
        ]
    },
    {
        "question": "For the set which had 'SS2' as the code, what is its magic card market id?",
        "SQL": "SELECT mcmId FROM sets WHERE code = 'SS2'",
        "tables": [
            "sets"
        ],
        "columns": [
            "sets.mcmid",
            "sets.code"
        ],
        "values": [
            {
                "table": "sets",
                "column": "code",
                "value": "SS2",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "magic card market id refers to mcmId",
        "values_list": [
            "sets.code.ss2"
        ]
    },
    {
        "question": "For the set \"Commander 2014 Oversized\" , give its parent code.",
        "SQL": "SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized'",
        "tables": [
            "sets"
        ],
        "columns": [
            "sets.name",
            "sets.parentcode"
        ],
        "values": [
            {
                "table": "sets",
                "column": "name",
                "value": "Commander 2014 Oversized",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "the set \"Commander 2014 Oversized\" refers to name = 'Commander 2014 Oversized';",
        "values_list": [
            "sets.name.commander 2014 oversized"
        ]
    },
    {
        "question": "What was the release date for the set which card \"Evacuation\" in it?",
        "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
        "tables": [
            "sets",
            "cards"
        ],
        "columns": [
            "cards.name",
            "cards.setcode",
            "sets.code",
            "sets.releasedate"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Evacuation",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "values_list": [
            "cards.name.evacuation"
        ]
    },
    {
        "question": "What is the number of cards are there in the set of \"Rinascita di Alara\"?",
        "SQL": "SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Rinascita di Alara'",
        "tables": [
            "sets",
            "set_translations"
        ],
        "columns": [
            "set_translations.translation",
            "set_translations.setcode",
            "sets.code",
            "sets.basesetsize"
        ],
        "values": [
            {
                "table": "set_translations",
                "column": "translation",
                "value": "Rinascita di Alara",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "number of cards refers to baseSetSize; set of \"Rinascita di Alara\" refers to translation = 'Rinascita di Alara'",
        "values_list": [
            "set_translations.translation.rinascita di alara"
        ]
    },
    {
        "question": "List the expansion type of the set \"Huiti\u00e8me \u00e9dition\".",
        "SQL": "SELECT type FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE translation = 'Huiti\u00e8me \u00e9dition' )",
        "tables": [
            "sets",
            "set_translations"
        ],
        "columns": [
            "sets.type",
            "sets.code"
        ],
        "values": [
            {
                "table": "",
                "column": "translation",
                "value": "Huiti\u00e8me \u00e9dition",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "the set \"Huiti\u00e8me \u00e9dition\" refers to translation = 'Huiti\u00e8me \u00e9dition'; expansion type refers to type",
        "values_list": [
            ".translation.huiti\u00e8me \u00e9dition"
        ]
    },
    {
        "question": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in?",
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL",
        "tables": [
            "set_translations",
            "cards"
        ],
        "columns": [
            "set_translations.language",
            "cards.name",
            "set_translations.setcode",
            "cards.setcode",
            "set_translations.translation"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Tendo Ice Bridge",
                "condition": "="
            },
            {
                "table": "set_translations",
                "column": "language",
                "value": "French",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
        "values_list": [
            "cards.name.tendo ice bridge",
            "set_translations.language.french"
        ]
    },
    {
        "question": "How many translations of the name of the set \"Tenth Edition\"?",
        "SQL": "SELECT COUNT(DISTINCT T2.translation) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.name = 'Tenth Edition' AND T2.translation IS NOT NULL",
        "tables": [
            "sets",
            "set_translations"
        ],
        "columns": [
            "sets.name",
            "set_translations.setcode",
            "set_translations.translation",
            "sets.code"
        ],
        "values": [
            {
                "table": "sets",
                "column": "name",
                "value": "Tenth Edition",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "translations of the name refers to translation; translation is not NULL; set \"Salvat 2011\" refers to name = 'Tenth Edition'",
        "values_list": [
            "sets.name.tenth edition"
        ]
    },
    {
        "question": "Tell the Japanese name of the set which card \"Fellwar Stone\" is in it.",
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
        "tables": [
            "set_translations",
            "cards"
        ],
        "columns": [
            "set_translations.language",
            "cards.name",
            "set_translations.setcode",
            "cards.setcode",
            "set_translations.translation"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Fellwar Stone",
                "condition": "="
            },
            {
                "table": "set_translations",
                "column": "language",
                "value": "Japanese",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
        "values_list": [
            "cards.name.fellwar stone",
            "set_translations.language.japanese"
        ]
    },
    {
        "question": "What is the release date for the set \"Ola de fr\u00edo\"?",
        "SQL": "SELECT T1.releaseDate FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Ola de fr\u00edo'",
        "tables": [
            "sets",
            "set_translations"
        ],
        "columns": [
            "set_translations.translation",
            "set_translations.setcode",
            "sets.code",
            "sets.releasedate"
        ],
        "values": [
            {
                "table": "set_translations",
                "column": "translation",
                "value": "Ola de fr\u00edo",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "release date is the date of card set being released; set \"Ola de fr\u00edo\" refers to translation = 'Ola de fr\u00edo'",
        "values_list": [
            "set_translations.translation.ola de fr\u00edo"
        ]
    },
    {
        "question": "What was the expansion type for the set which card \"Samite Pilgrim\" in it?",
        "SQL": "SELECT type FROM sets WHERE code IN ( SELECT setCode FROM cards WHERE name = 'Samite Pilgrim' )",
        "tables": [
            "sets",
            "cards"
        ],
        "columns": [
            "cards.name",
            "sets.code",
            "cards.type"
        ],
        "values": [
            {
                "table": "",
                "column": "name",
                "value": "Samite Pilgrim",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "expansion type refers to type; card \"Samite Pilgrim\" refers to name = 'Samite Pilgrim'",
        "values_list": [
            ".name.samite pilgrim"
        ]
    },
    {
        "question": "How many cards are there in the set 'World Championship Decks 2004' with the converted mana cost as '3'.",
        "SQL": "SELECT COUNT(id) FROM cards WHERE setCode IN ( SELECT code FROM sets WHERE name = 'World Championship Decks 2004' ) AND convertedManaCost = 3",
        "tables": [
            "sets",
            "cards"
        ],
        "columns": [
            "cards.name",
            "sets.id",
            "sets.code"
        ],
        "values": [
            {
                "table": "",
                "column": "convertedmanacost",
                "value": "3",
                "condition": "="
            },
            {
                "table": "",
                "column": "name",
                "value": "World Championship Decks 2004",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "the set 'World Championship Decks 2004' refers to name = 'World Championship Decks 2004'",
        "values_list": [
            ".convertedmanacost.3",
            ".name.world championship decks 2004"
        ]
    },
    {
        "question": "Among the sets whose expansion type is Commander, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set.",
        "SQL": "SELECT id FROM sets WHERE type = 'commander' ORDER BY totalSetSize DESC LIMIT 1",
        "tables": [
            "sets"
        ],
        "columns": [
            "sets.id",
            "sets.type",
            "sets.totalsetsize"
        ],
        "values": [
            {
                "table": "sets",
                "column": "type",
                "value": "commander",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "expansion type refers to type where type = 'commander'; totalSetSize: The total number of cards in the set, including promotional and related supplemental products but excluding Alchemy modifications; highest total number of cards refers to MAX(totalSetSize)",
        "values_list": [
            "sets.type.commander"
        ]
    },
    {
        "question": "In duels, what are the top 10 cards with the highest uncoverted mana cost?",
        "SQL": "SELECT DISTINCT name FROM cards WHERE uuid IN ( SELECT uuid FROM legalities WHERE format = 'duel' ) ORDER BY manaCost DESC LIMIT 0, 10",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.uuid",
            "cards.name",
            "legalities.format"
        ],
        "values": [
            {
                "table": "",
                "column": "format",
                "value": "duel",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "duels refer to format = 'duel'; the highest uncoverted mana cost refers to MAX(manaCost)",
        "values_list": [
            ".format.duel"
        ]
    },
    {
        "question": "When was the oldest mythic card released and what are its legal play formats?",
        "SQL": "SELECT T1.originalReleaseDate, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T1.originalReleaseDate IS NOT NULL AND T2.status = 'Legal' ORDER BY T1.originalReleaseDate LIMIT 1",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.rarity",
            "legalities.format",
            "legalities.status",
            "cards.originalreleasedate",
            "legalities.uuid",
            "cards.uuid"
        ],
        "values": [
            {
                "table": "legalities",
                "column": "status",
                "value": "Legal",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "rarity",
                "value": "mythic",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "the oldest card refers to MIN(originalReleaseDate); mythic card refers to rarity = 'mythic'; legal play refers to status = 'legal'; play format refers to format",
        "values_list": [
            "legalities.status.legal",
            "cards.rarity.mythic"
        ]
    },
    {
        "question": "How many rare enchantment Abundance cards are there whose play format status are all legal?",
        "SQL": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.rarity = 'rare' AND T1.types = 'Enchantment' AND T1.name = 'Abundance' AND T2.status = 'Legal'",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.types",
            "cards.rarity",
            "cards.id",
            "legalities.status",
            "cards.name",
            "legalities.uuid",
            "cards.uuid"
        ],
        "values": [
            {
                "table": "legalities",
                "column": "status",
                "value": "Legal",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "name",
                "value": "Abundance",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "rarity",
                "value": "rare",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "types",
                "value": "Enchantment",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "rare refers to rarity = 'rare'; enchantment card refers to types = 'Enchantment'; Abundance cards refers to name = 'Abundance'; format status are all legal refers to status = 'Legal'",
        "values_list": [
            "legalities.status.legal",
            "cards.name.abundance",
            "cards.rarity.rare",
            "cards.types.enchantment"
        ]
    },
    {
        "question": "Which of the play format has the highest number of banned status? Indicate the play format and the names of all the card meet the condition.",
        "SQL": "WITH MaxBanned AS (SELECT format, COUNT(*) AS count_banned FROM legalities WHERE status = 'Banned' GROUP BY format ORDER BY COUNT(*) DESC LIMIT 1) SELECT T2.format, T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid INNER JOIN MaxBanned MB ON MB.format = T2.format WHERE T2.status = 'Banned'",
        "tables": [
            "cards",
            "legalities",
            "maxbanned"
        ],
        "columns": [
            "maxbanned.format",
            "legalities.format",
            "legalities.status",
            "cards.name",
            "legalities.uuid",
            "cards.uuid"
        ],
        "values": [
            {
                "table": "legalities",
                "column": "status",
                "value": "Banned",
                "condition": "="
            },
            {
                "table": "legalities",
                "column": "status",
                "value": "Banned",
                "condition": "="
            },
            {
                "table": "",
                "column": "status",
                "value": "Banned",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "play format refers to format; banned status refers to status = 'Banned'; the highest number of banned status refers to MAX(COUNT(status = 'Banned'))",
        "values_list": [
            "legalities.status.banned",
            "legalities.status.banned",
            ".status.banned"
        ]
    },
    {
        "question": "What is the language of the \"Battlebond\" set?",
        "SQL": "SELECT language FROM set_translations WHERE id IN ( SELECT id FROM sets WHERE name = 'Battlebond' )",
        "tables": [
            "sets",
            "set_translations"
        ],
        "columns": [
            "sets.id",
            "sets.name"
        ],
        "values": [
            {
                "table": "",
                "column": "name",
                "value": "Battlebond",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "\"Battlebond\" set refers to name = 'Battlebond'",
        "values_list": [
            ".name.battlebond"
        ]
    },
    {
        "question": "Among the cards whose version of frame style is 1997, what is the status of the card illustrated by D. Alexander Gregory in legacy play format that has sensitive content or Wizards of the Coast?",
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.frameVersion = 1997 AND T1.hasContentWarning = 1 AND T1.artist = 'D. Alexander Gregory' AND T2.format = 'legacy'",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.artist",
            "legalities.format",
            "legalities.status",
            "cards.frameversion",
            "cards.hascontentwarning",
            "legalities.uuid",
            "cards.uuid"
        ],
        "values": [
            {
                "table": "legalities",
                "column": "format",
                "value": "legacy",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "artist",
                "value": "D. Alexander Gregory",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "frameversion",
                "value": "1997",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "hascontentwarning",
                "value": "1",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "version of frame style is 1997 refers to frameVersion = '1997'; illustrated by D. Alexander Gregory refers to artist = 'D. Alexander Gregory'; sensitive content refers to hasContentWarning = 1; legacy play format refers to format = 'legacy'; status of the card refers to status",
        "values_list": [
            "legalities.format.legacy",
            "cards.artist.d. alexander gregory",
            "cards.frameversion.1997",
            "cards.hascontentwarning.1"
        ]
    },
    {
        "question": "Which cards are ranked 1st on EDHRec? List all of the cards name and its banned play format.",
        "SQL": "SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Banned' GROUP BY T1.name, T2.format",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "legalities.format",
            "legalities.status",
            "cards.name",
            "legalities.uuid",
            "cards.uuid",
            "cards.edhrecrank"
        ],
        "values": [
            {
                "table": "cards",
                "column": "edhrecrank",
                "value": "1",
                "condition": "="
            },
            {
                "table": "legalities",
                "column": "status",
                "value": "Banned",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "ranked 1st on EDHRec refers to edhrecRank = 1; banned refers to status = 'Banned'; play format refers to format; cards name refers to name",
        "values_list": [
            "cards.edhrecrank.1",
            "legalities.status.banned"
        ]
    },
    {
        "question": "List the artists who illustrated cards with black borders which are available only in arena.",
        "SQL": "SELECT DISTINCT artist FROM cards WHERE availability = 'arena' AND BorderColor = 'black'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.bordercolor",
            "cards.artist",
            "cards.availability"
        ],
        "values": [
            {
                "table": "cards",
                "column": "availability",
                "value": "arena",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "bordercolor",
                "value": "black",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "black borders refers to BorderColor = 'black'; available only in arena refers to availability = 'arena'",
        "values_list": [
            "cards.availability.arena",
            "cards.bordercolor.black"
        ]
    },
    {
        "question": "Among the card designed by Matthew D. Wilson, how many are available only in the paper?",
        "SQL": "SELECT COUNT(id) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.artist",
            "cards.id",
            "cards.availability"
        ],
        "values": [
            {
                "table": "cards",
                "column": "artist",
                "value": "Matthew D. Wilson",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "availability",
                "value": "paper",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card designed by Matthew D. Wilson refers to artist = 'Matthew D. Wilson'; available only in the paper refers to availability = 'paper'",
        "values_list": [
            "cards.artist.matthew d. wilson",
            "cards.availability.paper"
        ]
    },
    {
        "question": "What are the rulings for the card named and designed by Kev Walker? List them in descending order of dates.",
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Kev Walker' ORDER BY T2.date DESC",
        "tables": [
            "rulings",
            "cards"
        ],
        "columns": [
            "cards.artist",
            "rulings.date",
            "rulings.text",
            "cards.uuid",
            "rulings.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "artist",
                "value": "Kev Walker",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
        "values_list": [
            "cards.artist.kev walker"
        ]
    },
    {
        "question": "List the names of all the cards in the set Hour of Devastation and find the formats in which these cards are legal.",
        "SQL": "SELECT DISTINCT T2.name , CASE WHEN T1.status = 'Legal' THEN T1.format ELSE NULL END FROM legalities AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid WHERE T2.setCode IN ( SELECT code FROM sets WHERE name = 'Hour of Devastation' )",
        "tables": [
            "sets",
            "cards",
            "legalities"
        ],
        "columns": [
            "legalities.format",
            "sets.code",
            "legalities.status",
            "cards.name",
            "legalities.uuid",
            "cards.uuid",
            "cards.setcode"
        ],
        "values": [
            {
                "table": "legalities",
                "column": "status",
                "value": "Legal",
                "condition": "="
            },
            {
                "table": "",
                "column": "name",
                "value": "Hour of Devastation",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "the set Hour of Devastation refers to set.name = 'Hour of Devastation'; names of all the cards in the set refers to cards.name; legal cards refers to status = 'Legal'; the formats refers to format",
        "values_list": [
            "legalities.status.legal",
            ".name.hour of devastation"
        ]
    },
    {
        "question": "List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.",
        "SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.artist",
            "legalities.status",
            "cards.name",
            "cards.frameversion",
            "legalities.uuid",
            "cards.uuid"
        ],
        "values": [
            {
                "table": "legalities",
                "column": "status",
                "value": "Banned",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "artist",
                "value": "Allen Williams",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
        "values_list": [
            "legalities.status.banned",
            "cards.artist.allen williams"
        ]
    },
    {
        "question": "Which user has a higher reputation, Harlan or Jarrod Dixon?",
        "SQL": "SELECT DisplayName FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') AND Reputation = ( SELECT MAX(Reputation) FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') )",
        "tables": [
            "users"
        ],
        "columns": [
            "users.reputation",
            "users.displayname"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Harlan"
            },
            {
                "table": "users",
                "column": "displayname",
                "value": "Jarrod Dixon"
            },
            {
                "table": "",
                "column": "displayname",
                "value": "Harlan"
            },
            {
                "table": "",
                "column": "displayname",
                "value": "Jarrod Dixon"
            },
            {
                "table": "",
                "column": "displayname",
                "value": "Harlan"
            },
            {
                "table": "",
                "column": "displayname",
                "value": "Jarrod Dixon"
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Harlan\" and \"Jarrod Dixon\" are both DisplayName; highest reputation refers to Max(Reputation)",
        "values_list": [
            "users.displayname.harlan",
            "users.displayname.jarrod dixon",
            ".displayname.harlan",
            ".displayname.jarrod dixon",
            ".displayname.harlan",
            ".displayname.jarrod dixon"
        ]
    },
    {
        "question": "How many posts does the user csgillespie own?",
        "SQL": "SELECT COUNT(T1.id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "posts.id",
            "users.id",
            "users.displayname",
            "posts.owneruserid"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "csgillespie",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"csgillespie\" is the DisplayName of user",
        "values_list": [
            "users.displayname.csgillespie"
        ]
    },
    {
        "question": "Please list the titles of the posts owned by the user csgillespie?",
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.id",
            "posts.title",
            "users.displayname",
            "posts.owneruserid"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "csgillespie",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"csgillespie\" is the DisplayName of user",
        "values_list": [
            "users.displayname.csgillespie"
        ]
    },
    {
        "question": "Who is the owner of the post \"Eliciting priors from experts\"?",
        "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.id",
            "posts.title",
            "users.displayname",
            "posts.owneruserid"
        ],
        "values": [
            {
                "table": "posts",
                "column": "title",
                "value": "Eliciting priors from experts",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
        "values_list": [
            "posts.title.eliciting priors from experts"
        ]
    },
    {
        "question": "What is the title of the post that is owned by csgillespie and has the highest popularity?",
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.ViewCount DESC LIMIT 1",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "posts.title",
            "posts.owneruserid",
            "users.id",
            "users.displayname",
            "posts.viewcount"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "csgillespie",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"csgillespie\" is the DisplayName of user; highest popularity refers to Max(ViewCount)",
        "values_list": [
            "users.displayname.csgillespie"
        ]
    },
    {
        "question": "What is the total number of comments of all the posts owned by csgillespie?",
        "SQL": "SELECT SUM(T1.CommentCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.id",
            "users.displayname",
            "posts.commentcount",
            "posts.owneruserid"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "csgillespie",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"csgillespie\" is the DisplayName of user; total number of comments refers to Sum(CommentCount)",
        "values_list": [
            "users.displayname.csgillespie"
        ]
    },
    {
        "question": "For the post that got the most number of answers owned by csgillespie, how many answers did it get?",
        "SQL": "SELECT MAX(T1.AnswerCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.id",
            "posts.owneruserid",
            "users.displayname",
            "posts.answercount"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "csgillespie",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"csgillespie\" is the DisplayName of user; the most number of answer refers to Max(AnswerCount)",
        "values_list": [
            "users.displayname.csgillespie"
        ]
    },
    {
        "question": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?",
        "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.id",
            "posts.lasteditoruserid",
            "posts.title",
            "users.displayname"
        ],
        "values": [
            {
                "table": "posts",
                "column": "title",
                "value": "Examples for teaching: Correlation does not mean causation",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
        "values_list": [
            "posts.title.examples for teaching: correlation does not mean causation"
        ]
    },
    {
        "question": "Among the posts owned by csgillespie, how many of them are root posts?",
        "SQL": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' AND T1.ParentId IS NULL",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "posts.id",
            "posts.owneruserid",
            "posts.parentid",
            "users.id",
            "users.displayname"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "csgillespie",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"csgillespie\" is the DisplayName of user; root post refers to ParentId IS Null",
        "values_list": [
            "users.displayname.csgillespie"
        ]
    },
    {
        "question": "What is the location of the owner of the post \"Eliciting priors from experts\"?",
        "SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.id",
            "users.location",
            "posts.title",
            "posts.owneruserid"
        ],
        "values": [
            {
                "table": "posts",
                "column": "title",
                "value": "Eliciting priors from experts",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
        "values_list": [
            "posts.title.eliciting priors from experts"
        ]
    },
    {
        "question": "From which post is the tag \"bayesian\" excerpted from? Please give the body of the post.",
        "SQL": "SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.ExcerptPostId WHERE T1.TagName = 'bayesian'",
        "tables": [
            "tags",
            "posts"
        ],
        "columns": [
            "posts.id",
            "tags.tagname",
            "posts.body",
            "tags.excerptpostid"
        ],
        "values": [
            {
                "table": "tags",
                "column": "tagname",
                "value": "bayesian",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"bayesian\" is the TagName; excerpt from refers to ExcerptPostId",
        "values_list": [
            "tags.tagname.bayesian"
        ]
    },
    {
        "question": "How many badges has the user csgillespie obtained?",
        "SQL": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "badges.id",
            "badges.userid",
            "users.displayname"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "csgillespie",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"csgillespie\" is the DisplayName of user",
        "values_list": [
            "users.displayname.csgillespie"
        ]
    },
    {
        "question": "Please list the names of the badges obtained by csgillespie.",
        "SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "badges.userid",
            "users.displayname",
            "badges.name"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "csgillespie",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"csgillespie\" is the DisplayName of user",
        "values_list": [
            "users.displayname.csgillespie"
        ]
    },
    {
        "question": "Among the badges obtained by csgillespie, how many of them were obtained in the year 2011?",
        "SQL": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE STRFTIME('%Y', T1.Date) = '2011' AND T2.DisplayName = 'csgillespie'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "badges.userid",
            "users.id",
            "users.displayname",
            "badges.id",
            "badges.date"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "csgillespie",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"csgillespie\" is the DisplayName of user; obtained in 2011 refers to YEAR (Date) = 2011",
        "values_list": [
            "users.displayname.csgillespie"
        ]
    },
    {
        "question": "What is the average score of the posts owned by the user csgillespie?",
        "SQL": "SELECT AVG(T1.Score) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.id",
            "posts.score",
            "users.displayname",
            "posts.owneruserid"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "csgillespie",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"csgillespie\" is the DisplayName of user; average score refers to AVG(Score)",
        "values_list": [
            "users.displayname.csgillespie"
        ]
    },
    {
        "question": "Give the number of \"Revival\" badges.",
        "SQL": "SELECT COUNT(Id) FROM badges WHERE Name = 'Revival'",
        "tables": [
            "badges"
        ],
        "columns": [
            "badges.id",
            "badges.name"
        ],
        "values": [
            {
                "table": "badges",
                "column": "name",
                "value": "Revival",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "number refers to Id; 'Revival' is the Name of badge",
        "values_list": [
            "badges.name.revival"
        ]
    },
    {
        "question": "For the user with the display name of \"Tiago Pasqualini\", how many posts did he/she own?",
        "SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Tiago Pasqualini'",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.id",
            "users.displayname",
            "posts.owneruserid"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Tiago Pasqualini",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Tiago Pasqualini\" is the DisplayName;",
        "values_list": [
            "users.displayname.tiago pasqualini"
        ]
    },
    {
        "question": "For the user whose display name is \"DatEpicCoderGuyWhoPrograms\", what is his/her badge's name?",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "badges.userid",
            "users.displayname",
            "badges.name"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "DatEpicCoderGuyWhoPrograms",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"DatEpicCoderGuyWhoPrograms\" is the DisplayName;",
        "values_list": [
            "users.displayname.datepiccoderguywhoprograms"
        ]
    },
    {
        "question": "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?",
        "SQL": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
        "tables": [
            "posts"
        ],
        "columns": [
            "posts.title",
            "posts.viewcount"
        ],
        "values": [
            {
                "table": "posts",
                "column": "title",
                "value": "Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
        "values_list": [
            "posts.title.integration of weka and/or rapidminer into informatica powercenter/developer"
        ]
    },
    {
        "question": "Which user has the website URL listed at 'http://stackoverflow.com'",
        "SQL": "SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com'",
        "tables": [
            "users"
        ],
        "columns": [
            "users.websiteurl",
            "users.displayname"
        ],
        "values": [
            {
                "table": "users",
                "column": "websiteurl",
                "value": "http://stackoverflow.com",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"http://stackoverflow.com\" is the WebsiteUrl; user refers to DisplayName",
        "values_list": [
            "users.websiteurl.http://stackoverflow.com"
        ]
    },
    {
        "question": "What is the badge name that user 'SilentGhost' obtained?",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'SilentGhost'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "badges.userid",
            "users.displayname",
            "badges.name"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "SilentGhost",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"SilentGhost\" is the DisplayName of user;",
        "values_list": [
            "users.displayname.silentghost"
        ]
    },
    {
        "question": "Name the user that commented 'thank you user93!'",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Text = 'thank you user93!'",
        "tables": [
            "users",
            "comments"
        ],
        "columns": [
            "users.id",
            "comments.userid",
            "users.displayname",
            "comments.text"
        ],
        "values": [
            {
                "table": "comments",
                "column": "text",
                "value": "thank you user93!",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"thank you user93\" is the Text of comment; user refers to DisplayName",
        "values_list": [
            "comments.text.thank you user93!"
        ]
    },
    {
        "question": "Write all comments made by user 'A Lion.'",
        "SQL": "SELECT T2.Text FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'A Lion'",
        "tables": [
            "users",
            "comments"
        ],
        "columns": [
            "comments.text",
            "users.id",
            "comments.userid",
            "users.displayname"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "A Lion",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"A Lion\" is the DisplayName of user; comment refers to Text",
        "values_list": [
            "users.displayname.a lion"
        ]
    },
    {
        "question": "Which user made a post titled 'Understanding what Dassault iSight is doing?' and how much is the reputation of the user?",
        "SQL": "SELECT T1.DisplayName, T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Title = 'Understanding what Dassault iSight is doing?'",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "posts.title",
            "posts.owneruserid",
            "users.id",
            "users.reputation",
            "users.displayname"
        ],
        "values": [
            {
                "table": "posts",
                "column": "title",
                "value": "Understanding what Dassault iSight is doing?",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Understanding what Dassault iSight is doing?\" is the Title of post; user refers to DisplayName;",
        "values_list": [
            "posts.title.understanding what dassault isight is doing?"
        ]
    },
    {
        "question": "Write all comments made on the post titled 'How does gentle boosting differ from AdaBoost?'",
        "SQL": "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'How does gentle boosting differ from AdaBoost?'",
        "tables": [
            "posts",
            "comments"
        ],
        "columns": [
            "comments.text",
            "posts.title",
            "comments.postid",
            "posts.id"
        ],
        "values": [
            {
                "table": "posts",
                "column": "title",
                "value": "How does gentle boosting differ from AdaBoost?",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"How does gentle boosting differ from AdaBoost?\" is the Title of post; comments refers to Text",
        "values_list": [
            "posts.title.how does gentle boosting differ from adaboost?"
        ]
    },
    {
        "question": "Name 10 users with the badge name 'Necromancer.'",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "badges.userid",
            "users.displayname",
            "badges.name"
        ],
        "values": [
            {
                "table": "badges",
                "column": "name",
                "value": "Necromancer",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
        "values_list": [
            "badges.name.necromancer"
        ]
    },
    {
        "question": "Who is the editor of the post titled 'Open source tools for visualizing multi-dimensional data?'",
        "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Open source tools for visualizing multi-dimensional data?'",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.id",
            "posts.title",
            "users.displayname",
            "posts.owneruserid"
        ],
        "values": [
            {
                "table": "posts",
                "column": "title",
                "value": "Open source tools for visualizing multi-dimensional data?",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "'Open source tools for visualizing multi-dimensional data' is the Title of Post; editor refers to DisplayName;",
        "values_list": [
            "posts.title.open source tools for visualizing multi-dimensional data?"
        ]
    },
    {
        "question": "List the title of posts which were edited by Vebjorn Ljosa.",
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Vebjorn Ljosa'",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.id",
            "posts.title",
            "users.displayname",
            "posts.owneruserid"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Vebjorn Ljosa",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Vebjorn Ljosa\" is the DisplayName; last edited refers to LastEditorUserId",
        "values_list": [
            "users.displayname.vebjorn ljosa"
        ]
    },
    {
        "question": "What is the total score of the posts edited by Yevgeny and include the user's website URL.",
        "SQL": "SELECT SUM(T1.Score), T2.WebsiteUrl FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T2.DisplayName = 'Yevgeny' GROUP BY T2.WebsiteUrl",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "posts.score",
            "users.websiteurl",
            "users.id",
            "users.displayname",
            "posts.lasteditoruserid"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Yevgeny",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Yevgeny\" is the DisplayName; edited refers to LastEditorUserId",
        "values_list": [
            "users.displayname.yevgeny"
        ]
    },
    {
        "question": "Write all the comments left by users who edited the post titled 'Why square the difference instead of taking the absolute value in standard deviation?'",
        "SQL": "SELECT T2.Comment FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'",
        "tables": [
            "posts",
            "posthistory"
        ],
        "columns": [
            "posthistory.comment",
            "posthistory.postid",
            "posts.title",
            "posts.id"
        ],
        "values": [
            {
                "table": "posts",
                "column": "title",
                "value": "Why square the difference instead of taking the absolute value in standard deviation?",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Why square the difference instead of taking the absolute value in standard deviation?\" is the Title of post;",
        "values_list": [
            "posts.title.why square the difference instead of taking the absolute value in standard deviation?"
        ]
    },
    {
        "question": "How many users are awarded with supporter badge during year 2011?",
        "SQL": "SELECT COUNT(Id) FROM badges WHERE STRFTIME('%Y', Date) = '2011' AND Name = 'Supporter'",
        "tables": [
            "badges"
        ],
        "columns": [
            "badges.id",
            "badges.date",
            "badges.name"
        ],
        "values": [
            {
                "table": "badges",
                "column": "name",
                "value": "Supporter",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Supporter\" is the Name of badge; in year 2011 refers to year(Date) = 2011",
        "values_list": [
            "badges.name.supporter"
        ]
    },
    {
        "question": "How many users from New York have a teacher and supporter badge?",
        "SQL": "SELECT COUNT(DISTINCT T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name IN ('Supporter', 'Teacher') AND T2.Location = 'New York'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.location",
            "badges.userid",
            "badges.name",
            "users.id",
            "badges.id"
        ],
        "values": [
            {
                "table": "badges",
                "column": "name",
                "value": "Supporter"
            },
            {
                "table": "badges",
                "column": "name",
                "value": "Teacher"
            },
            {
                "table": "users",
                "column": "location",
                "value": "New York",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Supporter\" and \"Teachers\" are both Name of badge; 'New York' is the Location; user refers to UserId",
        "values_list": [
            "badges.name.supporter",
            "badges.name.teacher",
            "users.location.new york"
        ]
    },
    {
        "question": "How many users from India have the teacher badges?",
        "SQL": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Location = 'India' AND T1.Name = 'Teacher'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.location",
            "badges.userid",
            "badges.name",
            "users.id",
            "badges.id"
        ],
        "values": [
            {
                "table": "users",
                "column": "location",
                "value": "India",
                "condition": "="
            },
            {
                "table": "badges",
                "column": "name",
                "value": "Teacher",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"India\" is the Location; \"Teacher\" is the Name of badge",
        "values_list": [
            "users.location.india",
            "badges.name.teacher"
        ]
    },
    {
        "question": "What is the percentage difference of student badges given during 2010 and 2011?",
        "SQL": "SELECT CAST(SUM(IIF(STRFTIME('%Y', Date) = '2010', 1, 0)) AS REAL) * 100 / COUNT(Id) - CAST(SUM(IIF(STRFTIME('%Y', Date) = '2011', 1, 0)) AS REAL) * 100 / COUNT(Id) FROM badges WHERE Name = 'Student'",
        "tables": [
            "badges"
        ],
        "columns": [
            "badges.id",
            "badges.date",
            "badges.name"
        ],
        "values": [
            {
                "table": "badges",
                "column": "name",
                "value": "Student",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "student badges refers to badge's name = 'Student'; during 2010 refers to Year(Date) = 2010; during 2011 refers to Year(Date) = 2011; percentage difference = Subtract (Divide(Count(Name where Year(Date) = 2010), Count (Name)) *100, Divide(Count(Name where Year(Date) = 2011), Count(Name)) * 100)",
        "values_list": [
            "badges.name.student"
        ]
    },
    {
        "question": "How many users obtained the \"Announcer\" badge?",
        "SQL": "SELECT COUNT(id) FROM badges WHERE Name = 'Announcer'",
        "tables": [
            "badges"
        ],
        "columns": [
            "badges.id",
            "badges.name"
        ],
        "values": [
            {
                "table": "badges",
                "column": "name",
                "value": "Announcer",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Announcer\" is the Name of badge; user refers to UserId",
        "values_list": [
            "badges.name.announcer"
        ]
    },
    {
        "question": "What is the name of badge that the user whose display name is \"Pierre\" obtained?",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Pierre'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "badges.userid",
            "users.displayname",
            "badges.name"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Pierre",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "users.displayname.pierre"
        ]
    },
    {
        "question": "List out the dates that users who are located in Rochester, NY obtained their badges?",
        "SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Rochester, NY'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "users.location",
            "badges.userid",
            "badges.date"
        ],
        "values": [
            {
                "table": "users",
                "column": "location",
                "value": "Rochester, NY",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Rochester, NY\" is the Location of user; user refers to UserId",
        "values_list": [
            "users.location.rochester, ny"
        ]
    },
    {
        "question": "Among the users who obtained the \"Teacher\" badge, calculate their percentage of users",
        "SQL": "SELECT CAST(COUNT(T1.Id) AS REAL) * 100 / (SELECT COUNT(Id) FROM users) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Teacher'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "badges.id",
            "badges.userid",
            "badges.name"
        ],
        "values": [
            {
                "table": "badges",
                "column": "name",
                "value": "Teacher",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Teacher\" is the Name of badge;  percentage = Divide (Count(UserId where it's \"Teacher\"), Count(UserId)) * 100",
        "values_list": [
            "badges.name.teacher"
        ]
    },
    {
        "question": "Among the users who obtained the \"Organizer\" badges, calculate the percentage of users who are teenagers.",
        "SQL": "SELECT CAST(SUM(IIF(T2.Age BETWEEN 13 AND 18, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.`Name` = 'Organizer'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "badges.userid",
            "badges.name",
            "users.id",
            "users.age",
            "badges.id"
        ],
        "values": [
            {
                "table": "badges",
                "column": "name",
                "value": "Organizer",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Organizer\" is the Name of badge; teenager refers to Age BETWEEN 13 AND 18; percentage = Divide (Count(UserId where Age BETWEEN 13 AND 18), Count(UserId)) *100",
        "values_list": [
            "badges.name.organizer"
        ]
    },
    {
        "question": "List out the age of users who located in Vienna, Austria obtained the badge?",
        "SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Vienna, Austria'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.age",
            "users.id",
            "users.location",
            "badges.userid"
        ],
        "values": [
            {
                "table": "users",
                "column": "location",
                "value": "Vienna, Austria",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Vienna, Austria\" is the Location",
        "values_list": [
            "users.location.vienna, austria"
        ]
    },
    {
        "question": "How many adults who obtained the badge Supporter?",
        "SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Supporter' AND T1.Age BETWEEN 19 AND 65",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "users.age",
            "badges.userid",
            "badges.name"
        ],
        "values": [
            {
                "table": "badges",
                "column": "name",
                "value": "Supporter",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "Supporter is the Name of badge; adult refers to Age BETWEEN 19 AND 65",
        "values_list": [
            "badges.name.supporter"
        ]
    },
    {
        "question": "State the name of badge that the user whose display name is \"Sharpie\" obtained.",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sharpie'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "badges.userid",
            "users.displayname",
            "badges.name"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Sharpie",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Sharpie\" is the DisplayName of user; user refers to UserId",
        "values_list": [
            "users.displayname.sharpie"
        ]
    },
    {
        "question": "How many users were from New York?",
        "SQL": "SELECT COUNT(Id) FROM users WHERE Location = 'New York'",
        "tables": [
            "users"
        ],
        "columns": [
            "users.id",
            "users.location"
        ],
        "values": [
            {
                "table": "users",
                "column": "location",
                "value": "New York",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "New York refers to Location;",
        "values_list": [
            "users.location.new york"
        ]
    },
    {
        "question": "What is the name of tags used by John Salvatier's?",
        "SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'John Salvatier'",
        "tables": [
            "users",
            "posts",
            "posthistory"
        ],
        "columns": [
            "posts.tags",
            "posts.id",
            "users.id",
            "posthistory.postid",
            "users.displayname",
            "posthistory.userid"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "John Salvatier",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "DisplayName = 'John Salvatier';",
        "values_list": [
            "users.displayname.john salvatier"
        ]
    },
    {
        "question": "How many posts were created by Daniel Vassallo?",
        "SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Daniel Vassallo'",
        "tables": [
            "users",
            "posthistory"
        ],
        "columns": [
            "users.id",
            "users.displayname",
            "posthistory.userid"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Daniel Vassallo",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "DisplayName = 'Daniel Vassallo';",
        "values_list": [
            "users.displayname.daniel vassallo"
        ]
    },
    {
        "question": "How many votes were made by Harlan?",
        "SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN votes AS T3 ON T3.PostId = T2.PostId WHERE T1.DisplayName = 'Harlan'",
        "tables": [
            "votes",
            "users",
            "posthistory"
        ],
        "columns": [
            "votes.postid",
            "users.id",
            "posthistory.postid",
            "users.displayname",
            "posthistory.userid"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Harlan",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "DisplayName = 'Harlan';",
        "values_list": [
            "users.displayname.harlan"
        ]
    },
    {
        "question": "Which post by slashnick has the most answers count? State the post ID.",
        "SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'slashnick' ORDER BY T3.AnswerCount DESC LIMIT 1",
        "tables": [
            "users",
            "posts",
            "posthistory"
        ],
        "columns": [
            "posts.id",
            "posts.answercount",
            "posthistory.postid",
            "users.id",
            "users.displayname",
            "posthistory.userid"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "slashnick",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "most answers count refers to MAX(AnswerCount); post by slashnick refers to DisplayName = 'slashnick';",
        "values_list": [
            "users.displayname.slashnick"
        ]
    },
    {
        "question": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Harvey Motulsky' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
        "tables": [
            "users",
            "posts",
            "posthistory"
        ],
        "columns": [
            "posts.id",
            "posts.viewcount",
            "users.id",
            "posthistory.postid",
            "users.displayname",
            "posthistory.userid"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Harvey Motulsky",
                "condition": "="
            },
            {
                "table": "users",
                "column": "displayname",
                "value": "Noah Snyder",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "Has higher popularity means the post has higher view count ; calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';",
        "values_list": [
            "users.displayname.harvey motulsky",
            "users.displayname.noah snyder"
        ]
    },
    {
        "question": "How many posts by Matt Parker have more than 4 votes?",
        "SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id INNER JOIN votes AS T4 ON T4.PostId = T3.Id WHERE T1.DisplayName = 'Matt Parker' GROUP BY T2.PostId, T4.Id HAVING COUNT(T4.Id) > 4",
        "tables": [
            "votes",
            "users",
            "posts",
            "posthistory"
        ],
        "columns": [
            "posts.id",
            "votes.postid",
            "users.id",
            "posthistory.postid",
            "users.displayname",
            "posthistory.userid",
            "votes.id"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Matt Parker",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "more than 4 votes refer to PostId > 4; DisplayName = 'Matt Parker';",
        "values_list": [
            "users.displayname.matt parker"
        ]
    },
    {
        "question": "List all the name of users that obtained the Organizer Badges.",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "badges.userid",
            "users.displayname",
            "badges.name"
        ],
        "values": [
            {
                "table": "badges",
                "column": "name",
                "value": "Organizer",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "values_list": [
            "badges.name.organizer"
        ]
    },
    {
        "question": "Based on posts posted by Community, calculate the percentage of posts that use the R language.",
        "SQL": "SELECT CAST(SUM(IIF(T3.TagName = 'r', 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN tags AS T3 ON T3.ExcerptPostId = T2.PostId WHERE T1.DisplayName = 'Community'",
        "tables": [
            "tags",
            "users",
            "posthistory"
        ],
        "columns": [
            "tags.excerptpostid",
            "users.id",
            "posthistory.postid",
            "users.displayname",
            "posthistory.userid",
            "tags.tagname"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Community",
                "condition": "="
            },
            {
                "table": "tags",
                "column": "tagname",
                "value": "r",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "DIVIDE(COUNT(PostId WHERE TagName = 'r')), (COUNT(PostId WHERE DisplayName = 'Community')) as percentage; R language refers to tagname = 'r'",
        "values_list": [
            "users.displayname.community",
            "tags.tagname.r"
        ]
    },
    {
        "question": "Calculate the difference in view count from post posted by Mornington and view count from posts posted by Amos.",
        "SQL": "SELECT SUM(IIF(T1.DisplayName = 'Mornington', T3.ViewCount, 0)) - SUM(IIF(T1.DisplayName = 'Amos', T3.ViewCount, 0)) AS diff FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId",
        "tables": [
            "users",
            "posts",
            "posthistory"
        ],
        "columns": [
            "posts.id",
            "posthistory.userid",
            "users.id",
            "posthistory.postid",
            "users.displayname",
            "posts.viewcount"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Mornington",
                "condition": "="
            },
            {
                "table": "users",
                "column": "displayname",
                "value": "Amos",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "calculation = SUBTRACT(SUM(ViewCount where DisplayName = 'Mornington'), SUM(ViewCount where DisplayName = 'Amos'));",
        "values_list": [
            "users.displayname.mornington",
            "users.displayname.amos"
        ]
    },
    {
        "question": "How many users received commentator badges in 2014?",
        "SQL": "SELECT COUNT(Id) FROM badges WHERE Name = 'Commentator' AND STRFTIME('%Y', Date) = '2014'",
        "tables": [
            "badges"
        ],
        "columns": [
            "badges.id",
            "badges.date",
            "badges.name"
        ],
        "values": [
            {
                "table": "badges",
                "column": "name",
                "value": "Commentator",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "Commentator is the name of the badge; year(Date) = 2014;",
        "values_list": [
            "badges.name.commentator"
        ]
    },
    {
        "question": "Provide the last edit date and last edit user ID for the post \"Detecting a given face in a database of facial images\".",
        "SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'",
        "tables": [
            "posts"
        ],
        "columns": [
            "posts.lasteditoruserid",
            "posts.title",
            "posts.lasteditdate"
        ],
        "values": [
            {
                "table": "posts",
                "column": "title",
                "value": "Detecting a given face in a database of facial images",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "Title = 'Detecting a given face in a database of facial images';",
        "values_list": [
            "posts.title.detecting a given face in a database of facial images"
        ]
    },
    {
        "question": "Provide the badge names received in 2011 for the user whose location is in the North Pole.",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'North Pole'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.location",
            "badges.userid",
            "badges.name",
            "users.id",
            "badges.date"
        ],
        "values": [
            {
                "table": "users",
                "column": "location",
                "value": "North Pole",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "received in 2011 refers to year(Date) = 2011;",
        "values_list": [
            "users.location.north pole"
        ]
    },
    {
        "question": "Describe the post history counts and last edit date of the post title \"What is the best introductory Bayesian statistics textbook?\"",
        "SQL": "SELECT T1.Id, T2.LastEditDate FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'What is the best introductory Bayesian statistics textbook?'",
        "tables": [
            "posts",
            "posthistory"
        ],
        "columns": [
            "posts.id",
            "posts.title",
            "posthistory.id",
            "posts.lasteditdate",
            "posthistory.postid"
        ],
        "values": [
            {
                "table": "posts",
                "column": "title",
                "value": "What is the best introductory Bayesian statistics textbook?",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "posts.title.what is the best introductory bayesian statistics textbook?"
        ]
    },
    {
        "question": "Describe the last accessed date and location of the users who received the outliers badge.",
        "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.location",
            "badges.userid",
            "badges.name",
            "users.id",
            "users.lastaccessdate"
        ],
        "values": [
            {
                "table": "badges",
                "column": "name",
                "value": "outliers",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "Outliers is the name of the badge;",
        "values_list": [
            "badges.name.outliers"
        ]
    },
    {
        "question": "Provide the related post title of \"How to tell if something happened in a data set which monitors a value over time\".",
        "SQL": "SELECT T3.Title FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN posts AS T3 ON T1.RelatedPostId = T3.Id WHERE T2.Title = 'How to tell if something happened in a data set which monitors a value over time'",
        "tables": [
            "posts",
            "postlinks"
        ],
        "columns": [
            "posts.id",
            "postlinks.relatedpostid",
            "posts.title",
            "postlinks.postid"
        ],
        "values": [
            {
                "table": "posts",
                "column": "title",
                "value": "How to tell if something happened in a data set which monitors a value over time",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "posts.title.how to tell if something happened in a data set which monitors a value over time"
        ]
    },
    {
        "question": "List the post IDs and badge names of the user Samuel in 2013.",
        "SQL": "SELECT T1.PostId, T2.Name FROM postHistory AS T1 INNER JOIN badges AS T2 ON T1.UserId = T2.UserId WHERE T1.UserDisplayName = 'Samuel' AND STRFTIME('%Y', T1.CreationDate) = '2013' AND STRFTIME('%Y', T2.Date) = '2013'",
        "tables": [
            "badges",
            "posthistory"
        ],
        "columns": [
            "posthistory.creationdate",
            "badges.userid",
            "badges.name",
            "posthistory.postid",
            "posthistory.userid",
            "badges.date",
            "posthistory.userdisplayname"
        ],
        "values": [
            {
                "table": "posthistory",
                "column": "userdisplayname",
                "value": "Samuel",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "Samuel refers to UserDisplayName; YEAR(CreationDate) = 2013 relates to PostId; YEAR(Date) = 2013 relates to the badge;",
        "values_list": [
            "posthistory.userdisplayname.samuel"
        ]
    },
    {
        "question": "Mention the display name and location of the user who owned the excerpt post with hypothesis-testing tag.",
        "SQL": "SELECT T3.DisplayName, T3.Location FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id INNER JOIN users AS T3 ON T3.Id = T2.OwnerUserId WHERE T1.TagName = 'hypothesis-testing'",
        "tables": [
            "tags",
            "users",
            "posts"
        ],
        "columns": [
            "posts.id",
            "tags.excerptpostid",
            "posts.owneruserid",
            "users.location",
            "users.id",
            "users.displayname",
            "tags.tagname"
        ],
        "values": [
            {
                "table": "tags",
                "column": "tagname",
                "value": "hypothesis-testing",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "user who owned the excerpt post with hypothesis-testing tag refers to OwnerUserId WHERE TagName = 'hypothesis-testing';",
        "values_list": [
            "tags.tagname.hypothesis-testing"
        ]
    },
    {
        "question": "Write down the related posts titles and link type IDs of the post \"What are principal component scores?\".",
        "SQL": "SELECT T3.Title, T2.LinkTypeId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId INNER JOIN posts AS T3 ON T2.RelatedPostId = T3.Id WHERE T1.Title = 'What are principal component scores?'",
        "tables": [
            "posts",
            "postlinks"
        ],
        "columns": [
            "posts.id",
            "posts.title",
            "postlinks.postid",
            "postlinks.relatedpostid",
            "postlinks.linktypeid"
        ],
        "values": [
            {
                "table": "posts",
                "column": "title",
                "value": "What are principal component scores?",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "Title = 'What are principal component scores?';",
        "values_list": [
            "posts.title.what are principal component scores?"
        ]
    },
    {
        "question": "When did 'chl' cast its first vote in a post?",
        "SQL": "SELECT T2.CreationDate FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'chl' ORDER BY T2.CreationDate LIMIT 1",
        "tables": [
            "votes",
            "users"
        ],
        "columns": [
            "votes.creationdate",
            "users.id",
            "users.displayname",
            "votes.userid"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "chl",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "DisplayName = 'chl'; cast its first vote refers to MIN(CreationDate);",
        "values_list": [
            "users.displayname.chl"
        ]
    },
    {
        "question": "What is the display name of the user who acquired the first Autobiographer badge?",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "badges.userid",
            "badges.name",
            "users.id",
            "users.displayname",
            "badges.date"
        ],
        "values": [
            {
                "table": "badges",
                "column": "name",
                "value": "Autobiographer",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "values_list": [
            "badges.name.autobiographer"
        ]
    },
    {
        "question": "Among the users located in United Kingdom, how many users whose post have a total favorite amount of 4 or more?",
        "SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Location = 'United Kingdom' AND T2.FavoriteCount >= 4",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.id",
            "users.location",
            "posts.favoritecount",
            "posts.owneruserid"
        ],
        "values": [
            {
                "table": "users",
                "column": "location",
                "value": "United Kingdom",
                "condition": "="
            },
            {
                "table": "posts",
                "column": "favoritecount",
                "value": "4",
                "condition": ">="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "favorite amount of 4 or more refers to FavoriteCount > = 4; Location = 'United Kingdom';",
        "values_list": [
            "users.location.united kingdom",
            "posts.favoritecount.4"
        ]
    },
    {
        "question": "How many posts did Jay Stevens have in 2010?",
        "SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T2.CreaionDate) = '2010' AND T1.DisplayName = 'Jay Stevens'",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.id",
            "users.displayname",
            "posts.creaiondate",
            "posts.owneruserid"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Jay Stevens",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "DisplayName = 'Jay Stevens'; in 2010 refers to YEAR(CreationDate) = 2010;",
        "values_list": [
            "users.displayname.jay stevens"
        ]
    },
    {
        "question": "Which post by Harvey Motulsky has the most views? Please give the id and title of this post.",
        "SQL": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Harvey Motulsky' ORDER BY T2.ViewCount DESC LIMIT 1",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "posts.id",
            "posts.title",
            "posts.owneruserid",
            "users.id",
            "users.displayname",
            "posts.viewcount"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Harvey Motulsky",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "DisplayName = 'Harvey Motulsky'; the most views refer to MAX(ViewCount);",
        "values_list": [
            "users.displayname.harvey motulsky"
        ]
    },
    {
        "question": "What is the average score of Stephen Turner's posts?",
        "SQL": "SELECT AVG(T2.Score) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Stephen Turner'",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.id",
            "posts.score",
            "users.displayname",
            "posts.owneruserid"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Stephen Turner",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "DisplayName = 'Stephen Turner'; average score refers to AVG(Score);",
        "values_list": [
            "users.displayname.stephen turner"
        ]
    },
    {
        "question": "Identify the total views on the post 'Computer Game Datasets'. Name the user who posted it last time.",
        "SQL": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'Computer Game Datasets'",
        "tables": [
            "users",
            "posts",
            "posthistory"
        ],
        "columns": [
            "posts.id",
            "posthistory.text",
            "posthistory.postid",
            "users.id",
            "users.displayname",
            "posts.viewcount",
            "posts.lasteditoruserid"
        ],
        "values": [
            {
                "table": "posthistory",
                "column": "text",
                "value": "Computer Game Datasets",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "total views refer to ViewCount; Name the user refers to DisplayName; post 'Computer Game Datasets' refers to Text = 'Computer Game Datasets';",
        "values_list": [
            "posthistory.text.computer game datasets"
        ]
    },
    {
        "question": "Identify the latest badge awarded to the user with the display name Emmett.",
        "SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ORDER BY T1.Date DESC LIMIT 1",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "badges.userid",
            "badges.name",
            "users.id",
            "users.displayname",
            "badges.date"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Emmett",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "the latest badge refers to Name FROM badges where MAX(Date);",
        "values_list": [
            "users.displayname.emmett"
        ]
    },
    {
        "question": "How long did it take the user, known by his or her display name 'Zolomon' to get the badge? Count from the date the user's account was created.",
        "SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "badges.userid",
            "users.id",
            "users.displayname",
            "users.creationdate",
            "badges.date"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Zolomon",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';",
        "values_list": [
            "users.displayname.zolomon"
        ]
    },
    {
        "question": "Provide the text of the latest 10 comments to the post with the title 'Analysing wind data with R' and the display name of the user who left it.",
        "SQL": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Analysing wind data with R' ORDER BY T1.CreationDate DESC LIMIT 10",
        "tables": [
            "users",
            "posts",
            "comments"
        ],
        "columns": [
            "posts.id",
            "posts.title",
            "posts.owneruserid",
            "comments.text",
            "users.id",
            "users.displayname",
            "users.creationdate",
            "comments.postid"
        ],
        "values": [
            {
                "table": "posts",
                "column": "title",
                "value": "Analysing wind data with R",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "the latest comment refers to MAX(CreationDate);",
        "values_list": [
            "posts.title.analysing wind data with r"
        ]
    },
    {
        "question": "How many users were awarded with 'Citizen Patrol' badge?",
        "SQL": "SELECT COUNT(id) FROM badges WHERE `Name` = 'Citizen Patrol'",
        "tables": [
            "badges"
        ],
        "columns": [
            "badges.id",
            "badges.name"
        ],
        "values": [
            {
                "table": "badges",
                "column": "name",
                "value": "Citizen Patrol",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "Citizen Patrol' is the name of the badge;",
        "values_list": [
            "badges.name.citizen patrol"
        ]
    },
    {
        "question": "Count the number of posts with a tag specified as 'careers'.",
        "SQL": "SELECT COUNT(Id) FROM tags WHERE TagName = 'careers'",
        "tables": [
            "tags"
        ],
        "columns": [
            "tags.id",
            "tags.tagname"
        ],
        "values": [
            {
                "table": "tags",
                "column": "tagname",
                "value": "careers",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "tag specified as 'careers' refers to TagName = 'careers';",
        "values_list": [
            "tags.tagname.careers"
        ]
    },
    {
        "question": "What is the reputation and view count of the user, who is known by his or her display name 'Jarrod Dixon'?",
        "SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'",
        "tables": [
            "users"
        ],
        "columns": [
            "users.reputation",
            "users.views",
            "users.displayname"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Jarrod Dixon",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "users.displayname.jarrod dixon"
        ]
    },
    {
        "question": "How many comments and answers were left by the users on the post with the title 'Clustering 1D data'?",
        "SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Clustering 1D data'",
        "tables": [
            "posts"
        ],
        "columns": [
            "posts.title",
            "posts.commentcount",
            "posts.answercount"
        ],
        "values": [
            {
                "table": "posts",
                "column": "title",
                "value": "Clustering 1D data",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "posts.title.clustering 1d data"
        ]
    },
    {
        "question": "When did the user known as 'IrishStat' create his or her account?",
        "SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'",
        "tables": [
            "users"
        ],
        "columns": [
            "users.creationdate",
            "users.displayname"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "IrishStat",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
        "values_list": [
            "users.displayname.irishstat"
        ]
    },
    {
        "question": "What is the excerpt post ID and wiki post ID of the tag named sample?",
        "SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'",
        "tables": [
            "tags"
        ],
        "columns": [
            "tags.tagname",
            "tags.wikipostid",
            "tags.excerptpostid"
        ],
        "values": [
            {
                "table": "tags",
                "column": "tagname",
                "value": "sample",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "tag named sample refers to TagName = 'sample';",
        "values_list": [
            "tags.tagname.sample"
        ]
    },
    {
        "question": "Give the user's reputation and up vote number of the user that commented \"fine, you win :)\".",
        "SQL": "SELECT T2.Reputation, T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'fine, you win :)'",
        "tables": [
            "users",
            "comments"
        ],
        "columns": [
            "users.upvotes",
            "users.id",
            "users.reputation",
            "comments.text",
            "comments.userid"
        ],
        "values": [
            {
                "table": "comments",
                "column": "text",
                "value": "fine, you win :)",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "Text = 'fine, you win :)';",
        "values_list": [
            "comments.text.fine, you win :)"
        ]
    },
    {
        "question": "What is the post ID and the comments commented in the post titled by \"Group differences on a five point Likert item\"?",
        "SQL": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Group differences on a five point Likert item'",
        "tables": [
            "posts",
            "comments"
        ],
        "columns": [
            "posts.id",
            "posts.title",
            "comments.postid",
            "comments.text"
        ],
        "values": [
            {
                "table": "posts",
                "column": "title",
                "value": "Group differences on a five point Likert item",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "Title = 'Group differences on a five point Likert item';",
        "values_list": [
            "posts.title.group differences on a five point likert item"
        ]
    },
    {
        "question": "What is the up vote number of the user that commented \"R is also lazy evaluated.\"?",
        "SQL": "SELECT T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'R is also lazy evaluated.'",
        "tables": [
            "users",
            "comments"
        ],
        "columns": [
            "users.id",
            "users.upvotes",
            "comments.userid",
            "comments.text"
        ],
        "values": [
            {
                "table": "comments",
                "column": "text",
                "value": "R is also lazy evaluated.",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "commented \"R is also lazy evaluated.\" refers to Text of the comment;",
        "values_list": [
            "comments.text.r is also lazy evaluated."
        ]
    },
    {
        "question": "List the comments commented by the user with a username of Harvey Motulsky.",
        "SQL": "SELECT T1.Text FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Harvey Motulsky'",
        "tables": [
            "users",
            "comments"
        ],
        "columns": [
            "comments.text",
            "users.id",
            "comments.userid",
            "users.displayname"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Harvey Motulsky",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "comments refer to Text; username of Harvey Motulsky refers to DisplayName = 'Harvey Motulsky';",
        "values_list": [
            "users.displayname.harvey motulsky"
        ]
    },
    {
        "question": "Please list all the superpowers of 3-D Man.",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = '3-D Man'",
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "hero_power.power_id",
            "superhero.id",
            "superpower.id",
            "superhero.superhero_name",
            "hero_power.hero_id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "3-D Man",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "3-D Man refers to superhero_name = '3-D Man'; superpowers refers to power_name",
        "values_list": [
            "superhero.superhero_name.3-d man"
        ]
    },
    {
        "question": "How many superheroes have the super power of \"Super Strength\"?",
        "SQL": "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Super Strength'",
        "tables": [
            "hero_power",
            "superpower"
        ],
        "columns": [
            "superpower.power_name",
            "hero_power.power_id",
            "hero_power.hero_id",
            "superpower.id"
        ],
        "values": [
            {
                "table": "superpower",
                "column": "power_name",
                "value": "Super Strength",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "super power of \"Super Strength\" refers to power_name = 'Super Strength'",
        "values_list": [
            "superpower.power_name.super strength"
        ]
    },
    {
        "question": "Among the superheroes with the super power of \"Super Strength\", how many of them have a height of over 200cm?",
        "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200",
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "hero_power.power_id",
            "superhero.id",
            "superhero.height_cm",
            "superpower.id",
            "hero_power.hero_id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "superpower",
                "column": "power_name",
                "value": "Super Strength",
                "condition": "="
            },
            {
                "table": "superhero",
                "column": "height_cm",
                "value": "200",
                "condition": ">"
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "super power of \"Super Strength\" refers to power_name = 'Super Strength'; a height of over 200cm refers to height_cm > 200",
        "values_list": [
            "superpower.power_name.super strength",
            "superhero.height_cm.200"
        ]
    },
    {
        "question": "How many superheroes have blue eyes?",
        "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue'",
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "colour.id",
            "superhero.eye_colour_id",
            "colour.colour",
            "superhero.id"
        ],
        "values": [
            {
                "table": "colour",
                "column": "colour",
                "value": "Blue",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id;",
        "values_list": [
            "colour.colour.blue"
        ]
    },
    {
        "question": "What is the colour of Apocalypse's skin?",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse'",
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "colour.id",
            "superhero.superhero_name",
            "superhero.skin_colour_id",
            "colour.colour"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Apocalypse",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "Apocalypse refers to superhero_name = 'Apocalypse'; colour of skin refers to colour where skin_colour_id = colour.id",
        "values_list": [
            "superhero.superhero_name.apocalypse"
        ]
    },
    {
        "question": "Among the superheroes with blue eyes, how many of them have the super power of \"Agility\"?",
        "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN colour AS T4 ON T1.eye_colour_id = T4.id WHERE T3.power_name = 'Agility' AND T4.colour = 'Blue'",
        "tables": [
            "colour",
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "hero_power.power_id",
            "superhero.id",
            "superpower.id",
            "colour.colour",
            "colour.id",
            "hero_power.hero_id",
            "superhero.eye_colour_id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "superpower",
                "column": "power_name",
                "value": "Agility",
                "condition": "="
            },
            {
                "table": "colour",
                "column": "colour",
                "value": "Blue",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; super power of \"Agility\" refers to power_name = 'Agility'",
        "values_list": [
            "superpower.power_name.agility",
            "colour.colour.blue"
        ]
    },
    {
        "question": "Please list the superhero names of all the superheroes that have blue eyes and blond hair.",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'",
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "superhero.hair_colour_id",
            "superhero.superhero_name",
            "colour.colour",
            "colour.id",
            "superhero.eye_colour_id"
        ],
        "values": [
            {
                "table": "colour",
                "column": "colour",
                "value": "Blue",
                "condition": "="
            },
            {
                "table": "colour",
                "column": "colour",
                "value": "Blond",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; blond hair refers to colour = 'Blond' and hair_colour_id = colour.id; super power of \"Agility\" refers to power_name = 'Agility'",
        "values_list": [
            "colour.colour.blue",
            "colour.colour.blond"
        ]
    },
    {
        "question": "How many superheroes are published by Marvel Comics?",
        "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'",
        "tables": [
            "publisher",
            "superhero"
        ],
        "columns": [
            "publisher.id",
            "superhero.id",
            "superhero.publisher_id",
            "publisher.publisher_name"
        ],
        "values": [
            {
                "table": "publisher",
                "column": "publisher_name",
                "value": "Marvel Comics",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "published by Marvel Comics refers to publisher_name = 'Marvel Comics'",
        "values_list": [
            "publisher.publisher_name.marvel comics"
        ]
    },
    {
        "question": "Rank heroes published by Marvel Comics by their height in descending order.",
        "SQL": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
        "tables": [
            "publisher",
            "superhero"
        ],
        "columns": [
            "publisher.id",
            "superhero.publisher_id",
            "publisher.publisher_name"
        ],
        "values": [
            {
                "table": "publisher",
                "column": "publisher_name",
                "value": "Marvel Comics",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "name refers to superhero_name; the tallest hero refers to MAX(height_cm); published by Marvel Comics refers to publisher_name = 'Marvel Comics'",
        "values_list": [
            "publisher.publisher_name.marvel comics"
        ]
    },
    {
        "question": "Who is the publisher of Sauron?",
        "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron'",
        "tables": [
            "publisher",
            "superhero"
        ],
        "columns": [
            "superhero.superhero_name",
            "publisher.id",
            "superhero.publisher_id",
            "publisher.publisher_name"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Sauron",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "the publisher refers to publisher_name; Sauron refers to superhero_name = 'Sauron'",
        "values_list": [
            "superhero.superhero_name.sauron"
        ]
    },
    {
        "question": "Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color.",
        "SQL": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY colour.colour",
        "tables": [
            "publisher",
            "superhero",
            "colour"
        ],
        "columns": [
            "superhero.id",
            "colour.colour",
            "publisher.publisher_name",
            "colour.id",
            "publisher.id",
            "superhero.eye_colour_id",
            "superhero.publisher_id"
        ],
        "values": [
            {
                "table": "publisher",
                "column": "publisher_name",
                "value": "Marvel Comics",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; most common color refers to COUNT(superhero.id) DESC;",
        "values_list": [
            "publisher.publisher_name.marvel comics"
        ]
    },
    {
        "question": "What is the average height of the superheroes from Marvel Comics?",
        "SQL": "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'",
        "tables": [
            "publisher",
            "superhero"
        ],
        "columns": [
            "publisher.id",
            "superhero.height_cm",
            "superhero.publisher_id",
            "publisher.publisher_name"
        ],
        "values": [
            {
                "table": "publisher",
                "column": "publisher_name",
                "value": "Marvel Comics",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; average height of the superheroes refers to AVG(height_cm)",
        "values_list": [
            "publisher.publisher_name.marvel comics"
        ]
    },
    {
        "question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
        "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
        "tables": [
            "publisher",
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "superhero.id",
            "hero_power.power_id",
            "superpower.id",
            "publisher.publisher_name",
            "publisher.id",
            "hero_power.hero_id",
            "superpower.power_name",
            "superhero.publisher_id"
        ],
        "values": [
            {
                "table": "superpower",
                "column": "power_name",
                "value": "Super Strength",
                "condition": "="
            },
            {
                "table": "publisher",
                "column": "publisher_name",
                "value": "Marvel Comics",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
        "values_list": [
            "superpower.power_name.super strength",
            "publisher.publisher_name.marvel comics"
        ]
    },
    {
        "question": "How many superheroes did DC Comics publish?",
        "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics'",
        "tables": [
            "publisher",
            "superhero"
        ],
        "columns": [
            "publisher.id",
            "superhero.id",
            "superhero.publisher_id",
            "publisher.publisher_name"
        ],
        "values": [
            {
                "table": "publisher",
                "column": "publisher_name",
                "value": "DC Comics",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "superheroes that DC Comics published refers to publisher_name = 'DC Comics'",
        "values_list": [
            "publisher.publisher_name.dc comics"
        ]
    },
    {
        "question": "How many gold-eyed superheroes did Marvel Comics publish?",
        "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.colour = 'Gold'",
        "tables": [
            "publisher",
            "superhero",
            "colour"
        ],
        "columns": [
            "superhero.id",
            "colour.colour",
            "publisher.publisher_name",
            "colour.id",
            "publisher.id",
            "superhero.eye_colour_id",
            "superhero.publisher_id"
        ],
        "values": [
            {
                "table": "publisher",
                "column": "publisher_name",
                "value": "Marvel Comics",
                "condition": "="
            },
            {
                "table": "colour",
                "column": "colour",
                "value": "Gold",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "gold-eyed refers to colour = 'Gold' where eye_colour_id = colour.id; superheroes that Marvel Comics published refers to publisher_name = 'Marvel Comics'",
        "values_list": [
            "publisher.publisher_name.marvel comics",
            "colour.colour.gold"
        ]
    },
    {
        "question": "What is the publisher's name of Blue Beetle II?",
        "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Blue Beetle II'",
        "tables": [
            "publisher",
            "superhero"
        ],
        "columns": [
            "superhero.superhero_name",
            "publisher.id",
            "superhero.publisher_id",
            "publisher.publisher_name"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Blue Beetle II",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "Blue Beetle II refers to superhero_name = 'Blue Beetle II'",
        "values_list": [
            "superhero.superhero_name.blue beetle ii"
        ]
    },
    {
        "question": "How many superheroes with blonde hair are there?",
        "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id WHERE T2.colour = 'Blond'",
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "colour.id",
            "colour.colour",
            "superhero.id",
            "superhero.hair_colour_id"
        ],
        "values": [
            {
                "table": "colour",
                "column": "colour",
                "value": "Blond",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "superheroes with blonde hair refers to colour = 'Blond' where hair_colour_id = colour.id",
        "values_list": [
            "colour.colour.blond"
        ]
    },
    {
        "question": "What is Copycat's race?",
        "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'",
        "tables": [
            "race",
            "superhero"
        ],
        "columns": [
            "superhero.superhero_name",
            "superhero.race_id",
            "race.race",
            "race.id"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Copycat",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "Copycat is the superhero_name;",
        "values_list": [
            "superhero.superhero_name.copycat"
        ]
    },
    {
        "question": "Which superheroes have a durability attribute value of less than 50?",
        "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_attribute AS T2 INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Durability' AND T2.attribute_value < 50 AND T1.id = T2.hero_id)",
        "tables": [
            "hero_attribute",
            "superhero",
            "attribute"
        ],
        "columns": [
            "hero_attribute.attribute_value",
            "superhero.id",
            "attribute.id",
            "hero_attribute.hero_id",
            "attribute.attribute_name",
            "hero_attribute.attribute_id"
        ],
        "values": [
            {
                "table": "attribute",
                "column": "attribute_name",
                "value": "Durability",
                "condition": "="
            },
            {
                "table": "hero_attribute",
                "column": "attribute_value",
                "value": "50",
                "condition": "<"
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "durability of less than 50 refers to attribute_name = 'Durability' AND attribute_value < 50",
        "values_list": [
            "attribute.attribute_name.durability",
            "hero_attribute.attribute_value.50"
        ]
    },
    {
        "question": "What are the names of the superheroes with the power of death touch?",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "hero_power.power_id",
            "superhero.id",
            "superpower.id",
            "superhero.superhero_name",
            "hero_power.hero_id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "superpower",
                "column": "power_name",
                "value": "Death Touch",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
        "values_list": [
            "superpower.power_name.death touch"
        ]
    },
    {
        "question": "How many female superheroes have a strength value of 100?",
        "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.attribute_name = 'Strength' AND T2.attribute_value = 100 AND T4.gender = 'Female'",
        "tables": [
            "hero_attribute",
            "superhero",
            "gender",
            "attribute"
        ],
        "columns": [
            "gender.gender",
            "hero_attribute.attribute_value",
            "superhero.id",
            "gender.id",
            "superhero.gender_id",
            "attribute.id",
            "hero_attribute.hero_id",
            "attribute.attribute_name",
            "hero_attribute.attribute_id"
        ],
        "values": [
            {
                "table": "gender",
                "column": "gender",
                "value": "Female",
                "condition": "="
            },
            {
                "table": "attribute",
                "column": "attribute_name",
                "value": "Strength",
                "condition": "="
            },
            {
                "table": "hero_attribute",
                "column": "attribute_value",
                "value": "100",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "female refers to gender = 'Female'; strength value of 100 refers to attribute_name = 'Strength' AND attribute_value = 100",
        "values_list": [
            "gender.gender.female",
            "attribute.attribute_name.strength",
            "hero_attribute.attribute_value.100"
        ]
    },
    {
        "question": "How many vampire superheroes are there?",
        "SQL": "SELECT COUNT(T1.superhero_name) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'",
        "tables": [
            "race",
            "superhero"
        ],
        "columns": [
            "superhero.superhero_name",
            "race.race",
            "superhero.race_id",
            "race.id"
        ],
        "values": [
            {
                "table": "race",
                "column": "race",
                "value": "Vampire",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "vampire superheroes refers to race = 'Vampire'",
        "values_list": [
            "race.race.vampire"
        ]
    },
    {
        "question": "Give the publisher ID of Star Trek.",
        "SQL": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'",
        "tables": [
            "publisher"
        ],
        "columns": [
            "publisher.id",
            "publisher.publisher_name"
        ],
        "values": [
            {
                "table": "publisher",
                "column": "publisher_name",
                "value": "Star Trek",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "Star Trek is the publisher_name;",
        "values_list": [
            "publisher.publisher_name.star trek"
        ]
    },
    {
        "question": "Provide the superpowers of the superhero called Deathlok.",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Deathlok'",
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "hero_power.power_id",
            "superhero.id",
            "superpower.id",
            "superhero.superhero_name",
            "hero_power.hero_id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Deathlok",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "superpowers refers to power_name; Deathlok refers to superhero_name = 'Deathlok'",
        "values_list": [
            "superhero.superhero_name.deathlok"
        ]
    },
    {
        "question": "What is the average weight of all female superheroes?",
        "SQL": "SELECT AVG(T1.weight_kg) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Female'",
        "tables": [
            "superhero",
            "gender"
        ],
        "columns": [
            "gender.gender",
            "gender.id",
            "superhero.gender_id",
            "superhero.weight_kg"
        ],
        "values": [
            {
                "table": "gender",
                "column": "gender",
                "value": "Female",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "female refers to gender = 'Female'; average weight refers to AVG(weight_kg)",
        "values_list": [
            "gender.gender.female"
        ]
    },
    {
        "question": "List down at least five superpowers of male superheroes.",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN gender AS T4 ON T4.id = T1.gender_id WHERE T4.gender = 'Male' LIMIT 5",
        "tables": [
            "superhero",
            "gender",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "gender.gender",
            "hero_power.power_id",
            "superhero.id",
            "superpower.id",
            "gender.id",
            "superhero.gender_id",
            "hero_power.hero_id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "gender",
                "column": "gender",
                "value": "Male",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "male refers to gender = 'Male'; superpowers refers to power_name;",
        "values_list": [
            "gender.gender.male"
        ]
    },
    {
        "question": "Give the name of the alien superheroes.",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'",
        "tables": [
            "race",
            "superhero"
        ],
        "columns": [
            "superhero.superhero_name",
            "race.race",
            "superhero.race_id",
            "race.id"
        ],
        "values": [
            {
                "table": "race",
                "column": "race",
                "value": "Alien",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "alien superheroes refers to race = 'Alien'; name of superhero refers to superhero_name;",
        "values_list": [
            "race.race.alien"
        ]
    },
    {
        "question": "List down at least five full name of Demi-God superheroes.",
        "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God'",
        "tables": [
            "race",
            "superhero"
        ],
        "columns": [
            "race.race",
            "superhero.full_name",
            "superhero.race_id",
            "race.id"
        ],
        "values": [
            {
                "table": "race",
                "column": "race",
                "value": "Demi-God",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "Demi-God superheroes refers to race = 'Demi-God'",
        "values_list": [
            "race.race.demi-god"
        ]
    },
    {
        "question": "How many bad superheroes are there?",
        "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Bad'",
        "tables": [
            "superhero",
            "alignment"
        ],
        "columns": [
            "alignment.id",
            "alignment.alignment",
            "superhero.alignment_id",
            "superhero.id"
        ],
        "values": [
            {
                "table": "alignment",
                "column": "alignment",
                "value": "Bad",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "bad superheroes refers to alignment_id = Bad",
        "values_list": [
            "alignment.alignment.bad"
        ]
    },
    {
        "question": "Provide the hair colour of the human superhero who is 185 cm tall.",
        "SQL": "SELECT DISTINCT T3.colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T1.height_cm = 185 AND T2.race = 'Human'",
        "tables": [
            "race",
            "superhero",
            "colour"
        ],
        "columns": [
            "superhero.height_cm",
            "superhero.hair_colour_id",
            "race.id",
            "colour.colour",
            "superhero.race_id",
            "colour.id",
            "race.race"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "height_cm",
                "value": "185",
                "condition": "="
            },
            {
                "table": "race",
                "column": "race",
                "value": "Human",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "185 cm tall refers to height_cm = 185; human superhero refers to race = 'human'; hair colour refers to colour where hair_colour_id = colour.id;",
        "values_list": [
            "superhero.height_cm.185",
            "race.race.human"
        ]
    },
    {
        "question": "In superheroes with height between 150 to 180, what is the percentage of heroes published by Marvel Comics?",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.height_cm BETWEEN 150 AND 180",
        "tables": [
            "publisher",
            "superhero"
        ],
        "columns": [
            "superhero.id",
            "superhero.height_cm",
            "publisher.publisher_name",
            "publisher.id",
            "superhero.publisher_id"
        ],
        "values": [
            {
                "table": "publisher",
                "column": "publisher_name",
                "value": "Marvel Comics",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "height between 150 to 180 refers to height_cm BETWEEN 150 AND 180; heroes published by Marvel Comics refers to publisher_name = 'Marvel Comics'; calculation = MULTIPLY(DIVIDE(SUM(publisher.id = 13)), COUNT(publisher.id), 100)",
        "values_list": [
            "publisher.publisher_name.marvel comics"
        ]
    },
    {
        "question": "Among the male superheroes, list the super hero names of superheroes with weight greater than the 79% average weight of all superheroes.",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Male' AND T1.weight_kg * 100 > ( SELECT AVG(weight_kg) FROM superhero ) * 79",
        "tables": [
            "superhero",
            "gender"
        ],
        "columns": [
            "gender.gender",
            "superhero.weight_kg",
            "superhero.superhero_name",
            "gender.id",
            "superhero.gender_id"
        ],
        "values": [
            {
                "table": "gender",
                "column": "gender",
                "value": "Male",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "super hero names refers to superhero_name;male superheros refers to gender = 'Male';Calculation = weight_kg > MULTIPLY(AVG(weight_kg), 0.79)",
        "values_list": [
            "gender.gender.male"
        ]
    },
    {
        "question": "Indicate the attribute value of superhero Abomination.",
        "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Abomination'",
        "tables": [
            "hero_attribute",
            "superhero"
        ],
        "columns": [
            "superhero.superhero_name",
            "hero_attribute.hero_id",
            "hero_attribute.attribute_value",
            "superhero.id"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Abomination",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "Abomination refers to superhero_name = 'Abomination';",
        "values_list": [
            "superhero.superhero_name.abomination"
        ]
    },
    {
        "question": "How many heroes have stealth power?",
        "SQL": "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Stealth'",
        "tables": [
            "hero_power",
            "superpower"
        ],
        "columns": [
            "superpower.power_name",
            "hero_power.power_id",
            "hero_power.hero_id",
            "superpower.id"
        ],
        "values": [
            {
                "table": "superpower",
                "column": "power_name",
                "value": "Stealth",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "stealth power refers to power_name = 'stealth';",
        "values_list": [
            "superpower.power_name.stealth"
        ]
    },
    {
        "question": "What is the hero's full name with the highest attribute in strength?",
        "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' ORDER BY T2.attribute_value DESC LIMIT 1",
        "tables": [
            "hero_attribute",
            "superhero",
            "attribute"
        ],
        "columns": [
            "hero_attribute.attribute_value",
            "superhero.id",
            "superhero.full_name",
            "attribute.id",
            "hero_attribute.hero_id",
            "attribute.attribute_name",
            "hero_attribute.attribute_id"
        ],
        "values": [
            {
                "table": "attribute",
                "column": "attribute_name",
                "value": "Strength",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "highest attribute in strength refers to MAX(attribute_value) WHERE attribute_name = 'strength';",
        "values_list": [
            "attribute.attribute_name.strength"
        ]
    },
    {
        "question": "How many superheroes were published by Dark Horse Comics?",
        "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Dark Horse Comics'",
        "tables": [
            "publisher",
            "superhero"
        ],
        "columns": [
            "publisher.id",
            "superhero.id",
            "superhero.publisher_id",
            "publisher.publisher_name"
        ],
        "values": [
            {
                "table": "publisher",
                "column": "publisher_name",
                "value": "Dark Horse Comics",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
        "values_list": [
            "publisher.publisher_name.dark horse comics"
        ]
    },
    {
        "question": "Which superhero has the most durability published by Dark Horse Comics?",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
        "tables": [
            "publisher",
            "hero_attribute",
            "superhero",
            "attribute"
        ],
        "columns": [
            "superhero.id",
            "superhero.superhero_name",
            "publisher.publisher_name",
            "attribute.attribute_name",
            "publisher.id",
            "attribute.id",
            "hero_attribute.hero_id",
            "hero_attribute.attribute_value",
            "superhero.publisher_id",
            "hero_attribute.attribute_id"
        ],
        "values": [
            {
                "table": "publisher",
                "column": "publisher_name",
                "value": "Dark Horse Comics",
                "condition": "="
            },
            {
                "table": "attribute",
                "column": "attribute_name",
                "value": "Durability",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
        "values_list": [
            "publisher.publisher_name.dark horse comics",
            "attribute.attribute_name.durability"
        ]
    },
    {
        "question": "What is the eyes colour of Abraham Sapien?",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraham Sapien'",
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "colour.id",
            "superhero.eye_colour_id",
            "superhero.full_name",
            "colour.colour"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "full_name",
                "value": "Abraham Sapien",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Abraham Sapien is the full name of superhero;",
        "values_list": [
            "superhero.full_name.abraham sapien"
        ]
    },
    {
        "question": "List the name of superheroes with flight power.",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'",
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "hero_power.power_id",
            "superhero.id",
            "superpower.id",
            "superhero.superhero_name",
            "hero_power.hero_id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "superpower",
                "column": "power_name",
                "value": "Flight",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
        "values_list": [
            "superpower.power_name.flight"
        ]
    },
    {
        "question": "List the eyes, hair and skin colour of all female superheroes published by Dark Horse Comics.",
        "SQL": "SELECT T1.eye_colour_id, T1.hair_colour_id, T1.skin_colour_id FROM superhero AS T1 INNER JOIN publisher AS T2 ON T2.id = T1.publisher_id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.gender = 'Female'",
        "tables": [
            "publisher",
            "superhero",
            "gender"
        ],
        "columns": [
            "gender.gender",
            "superhero.hair_colour_id",
            "gender.id",
            "superhero.gender_id",
            "publisher.publisher_name",
            "publisher.id",
            "superhero.eye_colour_id",
            "superhero.skin_colour_id",
            "superhero.publisher_id"
        ],
        "values": [
            {
                "table": "publisher",
                "column": "publisher_name",
                "value": "Dark Horse Comics",
                "condition": "="
            },
            {
                "table": "gender",
                "column": "gender",
                "value": "Female",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "eyes refers to eye_colour_id; hair refers to hair_colour_id; skin colour refers to skin_colour_id; female superheroes refers to gender = 'Female'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
        "values_list": [
            "publisher.publisher_name.dark horse comics",
            "gender.gender.female"
        ]
    },
    {
        "question": "Which group does superhero A-Bomb belong to?",
        "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
        "tables": [
            "race",
            "superhero"
        ],
        "columns": [
            "superhero.superhero_name",
            "superhero.race_id",
            "race.race",
            "race.id"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "A-Bomb",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "group refers to race; A-Bomb refers to superhero_name = 'A-Bomb';",
        "values_list": [
            "superhero.superhero_name.a-bomb"
        ]
    },
    {
        "question": "What is the percentage of blue female superheroes among all female superheroes?",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T3.colour = 'Blue' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T2.gender = 'Female'",
        "tables": [
            "colour",
            "superhero",
            "gender"
        ],
        "columns": [
            "gender.gender",
            "superhero.id",
            "gender.id",
            "superhero.gender_id",
            "colour.colour",
            "colour.id",
            "superhero.skin_colour_id"
        ],
        "values": [
            {
                "table": "gender",
                "column": "gender",
                "value": "Female",
                "condition": "="
            },
            {
                "table": "colour",
                "column": "colour",
                "value": "Blue",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "percentage = MULTIPLY(DIVIDE(SUM(colour = 'Blue' WHERE gender = 'Female'), COUNT(gender = 'Female')), 100); blue refers to the color = 'Blue' WHERE skin_colour_id = colour.id; female refers to gender = 'Female';",
        "values_list": [
            "gender.gender.female",
            "colour.colour.blue"
        ]
    },
    {
        "question": "Provide the hero name and race of Charles Chandler.",
        "SQL": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Charles Chandler'",
        "tables": [
            "race",
            "superhero"
        ],
        "columns": [
            "race.id",
            "superhero.superhero_name",
            "superhero.full_name",
            "superhero.race_id",
            "race.race"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "full_name",
                "value": "Charles Chandler",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "hero name refers to superhero_name; Charles Chandler is the full name of superhero;",
        "values_list": [
            "superhero.full_name.charles chandler"
        ]
    },
    {
        "question": "What is the gender of Agent 13 hero?",
        "SQL": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent 13'",
        "tables": [
            "superhero",
            "gender"
        ],
        "columns": [
            "gender.gender",
            "gender.id",
            "superhero.gender_id",
            "superhero.superhero_name"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Agent 13",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "Agent 13 hero refers to superhero_name = 'Agent 13';",
        "values_list": [
            "superhero.superhero_name.agent 13"
        ]
    },
    {
        "question": "Provide superheroes' names who have the adaptation power.",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'",
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "hero_power.power_id",
            "superhero.id",
            "superpower.id",
            "superhero.superhero_name",
            "hero_power.hero_id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "superpower",
                "column": "power_name",
                "value": "Adaptation",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "adaptation power refers to power_name = 'Adaptation';",
        "values_list": [
            "superpower.power_name.adaptation"
        ]
    },
    {
        "question": "How many powers does Amazo hero have?",
        "SQL": "SELECT COUNT(T1.power_id) FROM hero_power AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T2.superhero_name = 'Amazo'",
        "tables": [
            "superhero",
            "hero_power"
        ],
        "columns": [
            "superhero.superhero_name",
            "superhero.id",
            "hero_power.power_id",
            "hero_power.hero_id"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Amazo",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "Amazo hero refers to superhero_name = 'Amazo';",
        "values_list": [
            "superhero.superhero_name.amazo"
        ]
    },
    {
        "question": "List the powers of Hunter Zolomon.",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Hunter Zolomon'",
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "hero_power.power_id",
            "superhero.id",
            "superpower.id",
            "superhero.full_name",
            "hero_power.hero_id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "full_name",
                "value": "Hunter Zolomon",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "Hunter Zolomon is the full name of superhero; list the powers refers to power_name;",
        "values_list": [
            "superhero.full_name.hunter zolomon"
        ]
    },
    {
        "question": "Provide the heights of the heroes whose eye colours are amber.",
        "SQL": "SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Amber'",
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "colour.id",
            "superhero.eye_colour_id",
            "colour.colour",
            "superhero.height_cm"
        ],
        "values": [
            {
                "table": "colour",
                "column": "colour",
                "value": "Amber",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "heights of the heroes refers to height_cm; eye colours are amber refers to colour.colour = 'Amber' WHERE eye_colour_id = colour.id;",
        "values_list": [
            "colour.colour.amber"
        ]
    },
    {
        "question": "List the heroes' names whose eyes and hair colours are both black.",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id AND T1.hair_colour_id = T2.id WHERE T2.colour = 'Black'",
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "superhero.hair_colour_id",
            "superhero.superhero_name",
            "colour.colour",
            "colour.id",
            "superhero.eye_colour_id"
        ],
        "values": [
            {
                "table": "colour",
                "column": "colour",
                "value": "Black",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "heroes' names refers to superhero_name; eyes and hair colours are both black refers to eye_colour_id AND hair_colour_id WHERE colour.colour = 'Black';",
        "values_list": [
            "colour.colour.black"
        ]
    },
    {
        "question": "Provide the eye colours of the heroes whose skin colours are gold.",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T3.colour = 'Gold'",
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "colour.id",
            "superhero.eye_colour_id",
            "superhero.skin_colour_id",
            "colour.colour"
        ],
        "values": [
            {
                "table": "colour",
                "column": "colour",
                "value": "Gold",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "skin colours are gold refers to colour.colour = 'Gold' WHERE skin_colour_id = colour.id;",
        "values_list": [
            "colour.colour.gold"
        ]
    },
    {
        "question": "Provide the full names of vampire heroes.",
        "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'",
        "tables": [
            "race",
            "superhero"
        ],
        "columns": [
            "race.race",
            "superhero.full_name",
            "superhero.race_id",
            "race.id"
        ],
        "values": [
            {
                "table": "race",
                "column": "race",
                "value": "Vampire",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "vampire heroes refers to race = 'Vampire';",
        "values_list": [
            "race.race.vampire"
        ]
    },
    {
        "question": "Describe the names of neutral alignment superheroes.",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'",
        "tables": [
            "superhero",
            "alignment"
        ],
        "columns": [
            "superhero.superhero_name",
            "alignment.alignment",
            "superhero.alignment_id",
            "alignment.id"
        ],
        "values": [
            {
                "table": "alignment",
                "column": "alignment",
                "value": "Neutral",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "names of superheroes refers to superhero_name; neutral alignment refers to alignment = 'Neutral';",
        "values_list": [
            "alignment.alignment.neutral"
        ]
    },
    {
        "question": "How many heroes have the highest attribute value in strength?",
        "SQL": "SELECT COUNT(T1.hero_id) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Strength' AND T1.attribute_value = ( SELECT MAX(attribute_value) FROM hero_attribute )",
        "tables": [
            "hero_attribute",
            "attribute"
        ],
        "columns": [
            "attribute.attribute_name",
            "attribute.id",
            "hero_attribute.hero_id",
            "hero_attribute.attribute_value",
            "hero_attribute.attribute_id"
        ],
        "values": [
            {
                "table": "attribute",
                "column": "attribute_name",
                "value": "Strength",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "highest attribute value in strength refers to MAX(attribute_value) WHERE attribute_name = 'Strength';",
        "values_list": [
            "attribute.attribute_name.strength"
        ]
    },
    {
        "question": "What are the race and alignment of Cameron Hicks?",
        "SQL": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Cameron Hicks'",
        "tables": [
            "race",
            "superhero",
            "alignment"
        ],
        "columns": [
            "alignment.alignment",
            "superhero.alignment_id",
            "race.id",
            "superhero.superhero_name",
            "superhero.race_id",
            "race.race",
            "alignment.id"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Cameron Hicks",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "Cameron Hicks refers to superhero_name = 'Cameron Hicks';",
        "values_list": [
            "superhero.superhero_name.cameron hicks"
        ]
    },
    {
        "question": "How many percent of female heroes were published by Marvel Comics?",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T3.gender = 'Female'",
        "tables": [
            "publisher",
            "superhero",
            "gender"
        ],
        "columns": [
            "gender.gender",
            "superhero.id",
            "gender.id",
            "superhero.gender_id",
            "publisher.publisher_name",
            "publisher.id",
            "superhero.publisher_id"
        ],
        "values": [
            {
                "table": "gender",
                "column": "gender",
                "value": "Female",
                "condition": "="
            },
            {
                "table": "publisher",
                "column": "publisher_name",
                "value": "Marvel Comics",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "percent = MULTIPLY(DIVIDE(SUM(gender = 'Female' WHERE publisher_name = 'Marvel Comics'), COUNT(publisher_name = 'Marvel Comics')), 100); female heroes refers to gender = 'Female'; Marvel Comics refers to publisher_name = 'Marvel Comics';",
        "values_list": [
            "gender.gender.female",
            "publisher.publisher_name.marvel comics"
        ]
    },
    {
        "question": "Find the average weight of the heroes who are aliens.",
        "SQL": "SELECT CAST(SUM(T1.weight_kg) AS REAL) / COUNT(T1.id) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'",
        "tables": [
            "race",
            "superhero"
        ],
        "columns": [
            "superhero.id",
            "superhero.weight_kg",
            "race.id",
            "superhero.race_id",
            "race.race"
        ],
        "values": [
            {
                "table": "race",
                "column": "race",
                "value": "Alien",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "average = AVG(weight_kg); aliens refers to race = 'Alien';",
        "values_list": [
            "race.race.alien"
        ]
    },
    {
        "question": "Calculate the difference between Emil Blonsky's weight and Charles Chandler's weight.",
        "SQL": "SELECT ( SELECT weight_kg FROM superhero WHERE full_name LIKE 'Emil Blonsky' ) - ( SELECT weight_kg FROM superhero WHERE full_name LIKE 'Charles Chandler' ) AS CALCULATE",
        "tables": [
            "superhero"
        ],
        "columns": [
            "superhero.full_name",
            "superhero.weight_kg"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "full_name",
                "value": "Charles Chandler",
                "condition": "LIKE"
            },
            {
                "table": "superhero",
                "column": "full_name",
                "value": "Emil Blonsky",
                "condition": "LIKE"
            },
            {
                "table": "",
                "column": "full_name",
                "value": "Emil Blonsky",
                "condition": "LIKE"
            },
            {
                "table": "",
                "column": "full_name",
                "value": "Charles Chandler",
                "condition": "LIKE"
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "difference = SUBTRACT(SUM(weight_kg WHERE full_name = 'Emil Blonsky'), SUM(weight_kg WHERE full_name = 'Charles Chandler')); Emil Blonsky is the full name of superhero; Charles Chandler is the full name of superhero;",
        "values_list": [
            "superhero.full_name.charles chandler",
            "superhero.full_name.emil blonsky",
            ".full_name.emil blonsky",
            ".full_name.charles chandler"
        ]
    },
    {
        "question": "What is Abomination's superpower?",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Abomination'",
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "hero_power.power_id",
            "superhero.id",
            "superpower.id",
            "superhero.superhero_name",
            "hero_power.hero_id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Abomination",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "Abomination refers to superhero_name = 'Abomination'; superpower refers to power_name;",
        "values_list": [
            "superhero.superhero_name.abomination"
        ]
    },
    {
        "question": "How many superheroes have a neutral alignment?",
        "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'",
        "tables": [
            "superhero",
            "alignment"
        ],
        "columns": [
            "alignment.id",
            "alignment.alignment",
            "superhero.alignment_id",
            "superhero.id"
        ],
        "values": [
            {
                "table": "alignment",
                "column": "alignment",
                "value": "Neutral",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "neutral alignment refers to alignment_id = 3;",
        "values_list": [
            "alignment.alignment.neutral"
        ]
    },
    {
        "question": "State all of 3-D Man's attributes along with their values.",
        "SQL": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = '3-D Man'",
        "tables": [
            "hero_attribute",
            "superhero",
            "attribute"
        ],
        "columns": [
            "hero_attribute.attribute_value",
            "superhero.id",
            "superhero.superhero_name",
            "attribute.id",
            "hero_attribute.hero_id",
            "attribute.attribute_name",
            "hero_attribute.attribute_id"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "3-D Man",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "3-D Man is the superhero_name. attributes refers to attribute_name; values refers to attribute_value;",
        "values_list": [
            "superhero.superhero_name.3-d man"
        ]
    },
    {
        "question": "Which superheroes have blue eyes with brown hair?",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Brown'",
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "superhero.hair_colour_id",
            "superhero.superhero_name",
            "colour.colour",
            "colour.id",
            "superhero.eye_colour_id"
        ],
        "values": [
            {
                "table": "colour",
                "column": "colour",
                "value": "Blue",
                "condition": "="
            },
            {
                "table": "colour",
                "column": "colour",
                "value": "Brown",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "which superheroes refers to superhero_name; blue eyes refers to color = 'Blue' and color.id = eye_colour_id; brown hair refers to color = 'Brown' and color.id = hair_colour_id;",
        "values_list": [
            "colour.colour.blue",
            "colour.colour.brown"
        ]
    },
    {
        "question": "What is the publisher for Hawkman, Karate Kid and Speedy?",
        "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')",
        "tables": [
            "publisher",
            "superhero"
        ],
        "columns": [
            "superhero.superhero_name",
            "publisher.id",
            "superhero.publisher_id",
            "publisher.publisher_name"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Hawkman"
            },
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Karate Kid"
            },
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Speedy"
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "publisher refers to publisher_name; Hawkman refers to superhero_name = 'Hawkman'; Karate Kid refers to superhero_name = 'Karate Kid'; Speedy refers to superhero_name = 'Speedy';",
        "values_list": [
            "superhero.superhero_name.hawkman",
            "superhero.superhero_name.karate kid",
            "superhero.superhero_name.speedy"
        ]
    },
    {
        "question": "Calculate the percentage of superheroes with blue eyes.",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.colour = 'Blue' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id",
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "colour.id",
            "superhero.eye_colour_id",
            "colour.colour",
            "superhero.id"
        ],
        "values": [
            {
                "table": "colour",
                "column": "colour",
                "value": "Blue",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "percentage = MULTIPLY(DIVIDE(SUM(superhero_name WHERE color = 'Blue'), COUNT(superhero_name)), 100.0); blue eyes refers to color = 'Blue' and color.id =  eye_colour_id = 7;",
        "values_list": [
            "colour.colour.blue"
        ]
    },
    {
        "question": "Find the ratio between male superheroes and female superheroes.",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.gender = 'Male' THEN T1.id ELSE NULL END) AS REAL) / COUNT(CASE WHEN T2.gender = 'Female' THEN T1.id ELSE NULL END) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id",
        "tables": [
            "superhero",
            "gender"
        ],
        "columns": [
            "gender.gender",
            "gender.id",
            "superhero.gender_id",
            "superhero.id"
        ],
        "values": [
            {
                "table": "gender",
                "column": "gender",
                "value": "Female",
                "condition": "="
            },
            {
                "table": "gender",
                "column": "gender",
                "value": "Male",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "ratio = DIVIDE(SUM(gender_id = 1) / SUM(gender_id = 2)); male superheroes refers to gender = 'Female'; female superheroes refers to gender = 'Male';",
        "values_list": [
            "gender.gender.female",
            "gender.gender.male"
        ]
    },
    {
        "question": "What is the power ID of cryokinesis?",
        "SQL": "SELECT id FROM superpower WHERE power_name = 'Cryokinesis'",
        "tables": [
            "superpower"
        ],
        "columns": [
            "superpower.power_name",
            "superpower.id"
        ],
        "values": [
            {
                "table": "superpower",
                "column": "power_name",
                "value": "Cryokinesis",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
        "values_list": [
            "superpower.power_name.cryokinesis"
        ]
    },
    {
        "question": "Provide the eye colour of the superhero who has Karen Beecher-Duncan as their full name.",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan'",
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "colour.id",
            "superhero.eye_colour_id",
            "superhero.full_name",
            "colour.colour"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "full_name",
                "value": "Karen Beecher-Duncan",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Karen Beecher-Duncan is the full name of superhero;",
        "values_list": [
            "superhero.full_name.karen beecher-duncan"
        ]
    },
    {
        "question": "What is the superpowers of the superhero has Helen Parr as their full name?",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Helen Parr'",
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "hero_power.power_id",
            "superhero.id",
            "superpower.id",
            "superhero.full_name",
            "hero_power.hero_id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "full_name",
                "value": "Helen Parr",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "superpowers refers to power_name; Helen Parr is the full name of superhero;",
        "values_list": [
            "superhero.full_name.helen parr"
        ]
    },
    {
        "question": "Give the alignment and superpowers of the superhero named Atom IV.",
        "SQL": "SELECT T4.alignment, T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'Atom IV'",
        "tables": [
            "superhero",
            "hero_power",
            "superpower",
            "alignment"
        ],
        "columns": [
            "alignment.alignment",
            "superhero.alignment_id",
            "superhero.id",
            "hero_power.power_id",
            "superpower.id",
            "superhero.superhero_name",
            "hero_power.hero_id",
            "alignment.id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Atom IV",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "superpowers refers to power_name;",
        "values_list": [
            "superhero.superhero_name.atom iv"
        ]
    },
    {
        "question": "List down at least five full names of superheroes with blue eyes.",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue' LIMIT 5",
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "superhero.superhero_name",
            "superhero.eye_colour_id",
            "colour.id",
            "colour.colour"
        ],
        "values": [
            {
                "table": "colour",
                "column": "colour",
                "value": "Blue",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "blue eyes refers to colour.colour = 'Blue' WHERE eye_colour_id = colour.id; Name of superheroes refers to superhero_name;",
        "values_list": [
            "colour.colour.blue"
        ]
    },
    {
        "question": "Calculate the average attribute value of all neutral superheroes.",
        "SQL": "SELECT AVG(T1.attribute_value) FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id INNER JOIN alignment AS T3 ON T2.alignment_id = T3.id WHERE T3.alignment = 'Neutral'",
        "tables": [
            "hero_attribute",
            "superhero",
            "alignment"
        ],
        "columns": [
            "alignment.alignment",
            "superhero.alignment_id",
            "superhero.id",
            "alignment.id",
            "hero_attribute.hero_id",
            "hero_attribute.attribute_value"
        ],
        "values": [
            {
                "table": "alignment",
                "column": "alignment",
                "value": "Neutral",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "average = AVG(attribute_value); neutral superheroes refers to alignment_id = 3;",
        "values_list": [
            "alignment.alignment.neutral"
        ]
    },
    {
        "question": "Count the good female superheroes.",
        "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.alignment = 'Good' AND T3.gender = 'Female'",
        "tables": [
            "superhero",
            "gender",
            "alignment"
        ],
        "columns": [
            "alignment.alignment",
            "gender.gender",
            "superhero.alignment_id",
            "superhero.id",
            "gender.id",
            "superhero.gender_id",
            "alignment.id"
        ],
        "values": [
            {
                "table": "alignment",
                "column": "alignment",
                "value": "Good",
                "condition": "="
            },
            {
                "table": "gender",
                "column": "gender",
                "value": "Female",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "good refers to alignment.id = 1; female refers to gender.id = 2;",
        "values_list": [
            "alignment.alignment.good",
            "gender.gender.female"
        ]
    },
    {
        "question": "Give the race of the blue-haired male superhero.",
        "SQL": "SELECT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T2.colour = 'Blue' AND T4.gender = 'Male'",
        "tables": [
            "race",
            "superhero",
            "gender",
            "colour"
        ],
        "columns": [
            "gender.gender",
            "race.id",
            "superhero.hair_colour_id",
            "gender.id",
            "superhero.gender_id",
            "colour.colour",
            "superhero.race_id",
            "colour.id",
            "race.race"
        ],
        "values": [
            {
                "table": "colour",
                "column": "colour",
                "value": "Blue",
                "condition": "="
            },
            {
                "table": "gender",
                "column": "gender",
                "value": "Male",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "blue-haired refers to colour.colour = 'blue' WHERE hair_colour_id = colour.id; male refers to gender = 'male';",
        "values_list": [
            "colour.colour.blue",
            "gender.gender.male"
        ]
    },
    {
        "question": "Among the bad superheroes, what is the percentage of female superheroes?",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'Female' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.alignment = 'Bad'",
        "tables": [
            "superhero",
            "gender",
            "alignment"
        ],
        "columns": [
            "alignment.alignment",
            "gender.gender",
            "superhero.alignment_id",
            "superhero.id",
            "gender.id",
            "superhero.gender_id",
            "alignment.id"
        ],
        "values": [
            {
                "table": "alignment",
                "column": "alignment",
                "value": "Bad",
                "condition": "="
            },
            {
                "table": "gender",
                "column": "gender",
                "value": "Female",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "bad superheroes refers to alignment.id = 2; percentage = MULTIPLY(DIVIDE(SUM(gender.id = 2 WHERE alignment.id = 2), COUNT(alignment.id = 2)), 100.0); female refers to gender.id = 2;",
        "values_list": [
            "alignment.alignment.bad",
            "gender.gender.female"
        ]
    },
    {
        "question": "List down Ajax's superpowers.",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Ajax'",
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "hero_power.power_id",
            "superhero.id",
            "superpower.id",
            "superhero.superhero_name",
            "hero_power.hero_id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Ajax",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "Ajax refers to superhero_name = 'Ajax'; superpowers refers to power_name;",
        "values_list": [
            "superhero.superhero_name.ajax"
        ]
    },
    {
        "question": "How many female superheroes are in Marvel Comics?",
        "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.gender = 'Female'",
        "tables": [
            "publisher",
            "superhero",
            "gender"
        ],
        "columns": [
            "gender.gender",
            "superhero.id",
            "gender.id",
            "superhero.gender_id",
            "publisher.publisher_name",
            "publisher.id",
            "superhero.publisher_id"
        ],
        "values": [
            {
                "table": "publisher",
                "column": "publisher_name",
                "value": "Marvel Comics",
                "condition": "="
            },
            {
                "table": "gender",
                "column": "gender",
                "value": "Female",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "female refers to gender = 'Female'; Marvel Comics refers to publisher_name = 'Marvel Comics';",
        "values_list": [
            "publisher.publisher_name.marvel comics",
            "gender.gender.female"
        ]
    },
    {
        "question": "Identify the gender of the superhero who has the ability of Phoenix Force.",
        "SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force'",
        "tables": [
            "superhero",
            "gender",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "gender.gender",
            "hero_power.power_id",
            "superhero.id",
            "superpower.id",
            "gender.id",
            "superhero.gender_id",
            "hero_power.hero_id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "superpower",
                "column": "power_name",
                "value": "Phoenix Force",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "ability of Phoenix Force refers to power_name = 'Phoenix Force';",
        "values_list": [
            "superpower.power_name.phoenix force"
        ]
    },
    {
        "question": "Identify the heaviest superhero in DC Comics.",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics' ORDER BY T1.weight_kg DESC LIMIT 1",
        "tables": [
            "publisher",
            "superhero"
        ],
        "columns": [
            "superhero.weight_kg",
            "superhero.superhero_name",
            "publisher.publisher_name",
            "publisher.id",
            "superhero.publisher_id"
        ],
        "values": [
            {
                "table": "publisher",
                "column": "publisher_name",
                "value": "DC Comics",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "heaviest refers to MAX(weight_kg); DC Comics refers to publisher_name = 'DC Comics'; superhero refers to superhero_name;",
        "values_list": [
            "publisher.publisher_name.dc comics"
        ]
    },
    {
        "question": "What is the average height of a non-human superhero in Dark Horse Comics?",
        "SQL": "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.race != 'Human'",
        "tables": [
            "publisher",
            "superhero",
            "race"
        ],
        "columns": [
            "superhero.height_cm",
            "race.id",
            "superhero.race_id",
            "publisher.publisher_name",
            "publisher.id",
            "race.race",
            "superhero.publisher_id"
        ],
        "values": [
            {
                "table": "publisher",
                "column": "publisher_name",
                "value": "Dark Horse Comics",
                "condition": "="
            },
            {
                "table": "race",
                "column": "race",
                "value": "Human",
                "condition": "!="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "average = AVG(height_cm); non-human superhero refers to race <> 'Human'; Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
        "values_list": [
            "publisher.publisher_name.dark horse comics",
            "race.race.human"
        ]
    },
    {
        "question": "Identify the weakest attribute of the Black Panther.",
        "SQL": "SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Black Panther' ORDER BY T2.attribute_value ASC LIMIT 1",
        "tables": [
            "hero_attribute",
            "superhero",
            "attribute"
        ],
        "columns": [
            "hero_attribute.attribute_value",
            "superhero.id",
            "superhero.superhero_name",
            "attribute.id",
            "hero_attribute.hero_id",
            "attribute.attribute_name",
            "hero_attribute.attribute_id"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Black Panther",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "weakest attribute refers to attribute_name WHERE MIN(attribute_value); Black Panther refers to superhero_name = 'Black Panther';",
        "values_list": [
            "superhero.superhero_name.black panther"
        ]
    },
    {
        "question": "What is Abomination's eye colour?",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Abomination'",
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "colour.id",
            "superhero.eye_colour_id",
            "superhero.superhero_name",
            "colour.colour"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Abomination",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "Abomination refers to superhero_name = 'Abomination'; eye colour refers to colour.colour where eye_colour_id = colour.id;",
        "values_list": [
            "superhero.superhero_name.abomination"
        ]
    },
    {
        "question": "Name the superhero, otherwise known as Charles Chandler.",
        "SQL": "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'",
        "tables": [
            "superhero"
        ],
        "columns": [
            "superhero.superhero_name",
            "superhero.full_name"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "full_name",
                "value": "Charles Chandler",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "name the superhero refers to superhero_name; Charles Chandler is the full name of superhero;",
        "values_list": [
            "superhero.full_name.charles chandler"
        ]
    },
    {
        "question": "Among all superheroes created by George Lucas, identify the percentage of female superheroes.",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'Female' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.publisher_name = 'George Lucas'",
        "tables": [
            "publisher",
            "superhero",
            "gender"
        ],
        "columns": [
            "gender.gender",
            "superhero.id",
            "gender.id",
            "superhero.gender_id",
            "publisher.publisher_name",
            "publisher.id",
            "superhero.publisher_id"
        ],
        "values": [
            {
                "table": "publisher",
                "column": "publisher_name",
                "value": "George Lucas",
                "condition": "="
            },
            {
                "table": "gender",
                "column": "gender",
                "value": "Female",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "created by George Lucas refers to publisher_name = 'George Lucas'; percentage = MULTIPLY(DIVIDE(SUM(gender = 'Female' WHERE publisher_name = 'George Lucas'), COUNT(publisher_name = 'George Lucas')), 100.0); female refers to gender = 'Female';",
        "values_list": [
            "publisher.publisher_name.george lucas",
            "gender.gender.female"
        ]
    },
    {
        "question": "Among all superheroes in Marvel Comics, identify the percentage of 'good' superheroes.",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T3.alignment = 'Good' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T2.publisher_name = 'Marvel Comics'",
        "tables": [
            "publisher",
            "superhero",
            "alignment"
        ],
        "columns": [
            "alignment.alignment",
            "superhero.alignment_id",
            "superhero.id",
            "publisher.publisher_name",
            "publisher.id",
            "alignment.id",
            "superhero.publisher_id"
        ],
        "values": [
            {
                "table": "publisher",
                "column": "publisher_name",
                "value": "Marvel Comics",
                "condition": "="
            },
            {
                "table": "alignment",
                "column": "alignment",
                "value": "Good",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "Marvel Comics refers to publisher_name = 'Marvel Comics'; percentage = MULTIPLY(DIVIDE(SUM(alignment = 'Good' WHERE publisher_name = 'Marvel Comics'), COUNT(publisher_name = 'Marvel Comics')), 100.0); good superheroes refers to alignment = 'Good';",
        "values_list": [
            "publisher.publisher_name.marvel comics",
            "alignment.alignment.good"
        ]
    },
    {
        "question": "Provide the full name of the superhero named Alien.",
        "SQL": "SELECT full_name FROM superhero WHERE superhero_name = 'Alien'",
        "tables": [
            "superhero"
        ],
        "columns": [
            "superhero.superhero_name",
            "superhero.full_name"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Alien",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "superhero.superhero_name.alien"
        ]
    },
    {
        "question": "In superheroes with weight less than 100, list the full name of the superheroes with brown eyes.",
        "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg < 100 AND T2.colour = 'Brown'",
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "superhero.weight_kg",
            "superhero.full_name",
            "colour.colour",
            "colour.id",
            "superhero.eye_colour_id"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "weight_kg",
                "value": "100",
                "condition": "<"
            },
            {
                "table": "colour",
                "column": "colour",
                "value": "Brown",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "weight less than 100 refers to weight_kg < 100",
        "values_list": [
            "superhero.weight_kg.100",
            "colour.colour.brown"
        ]
    },
    {
        "question": "List the attribute value of the superhero named Aquababy.",
        "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Aquababy'",
        "tables": [
            "hero_attribute",
            "superhero"
        ],
        "columns": [
            "superhero.superhero_name",
            "hero_attribute.hero_id",
            "hero_attribute.attribute_value",
            "superhero.id"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Aquababy",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "superhero.superhero_name.aquababy"
        ]
    },
    {
        "question": "Calculate the average height of all neutral superheroes.",
        "SQL": "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'",
        "tables": [
            "superhero",
            "alignment"
        ],
        "columns": [
            "alignment.id",
            "alignment.alignment",
            "superhero.alignment_id",
            "superhero.height_cm"
        ],
        "values": [
            {
                "table": "alignment",
                "column": "alignment",
                "value": "Neutral",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "alignment.alignment.neutral"
        ]
    },
    {
        "question": "Give the eye colour of Blackwulf.",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Blackwulf'",
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "colour.id",
            "superhero.eye_colour_id",
            "superhero.superhero_name",
            "colour.colour"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Blackwulf",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Blackwulf refers to superhero_name = 'Blackwulf';",
        "values_list": [
            "superhero.superhero_name.blackwulf"
        ]
    },
    {
        "question": "Please list the year during which the race is held on circuits in Shanghai.",
        "SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Shanghai'",
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "circuits.circuitid",
            "races.year",
            "races.circuitid",
            "circuits.location"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "location",
                "value": "Shanghai",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "Shanghai is a name of location;",
        "values_list": [
            "circuits.location.shanghai"
        ]
    },
    {
        "question": "Where can the introduction of the races held on Circuit de Barcelona-Catalunya be found?",
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "circuits.circuitid",
            "races.circuitid",
            "circuits.name",
            "circuits.url"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "name",
                "value": "Circuit de Barcelona-Catalunya",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
        "values_list": [
            "circuits.name.circuit de barcelona-catalunya"
        ]
    },
    {
        "question": "Please give the name of the race held on the circuits in Germany.",
        "SQL": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Germany'",
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "circuits.circuitid",
            "races.name",
            "circuits.country",
            "races.circuitid"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "country",
                "value": "Germany",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "Germany is a name of country;",
        "values_list": [
            "circuits.country.germany"
        ]
    },
    {
        "question": "Please list the positions of the circuits built by the constructor Renault.",
        "SQL": "SELECT DISTINCT T1.position FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T2.name = 'Renault'",
        "tables": [
            "constructors",
            "constructorstandings"
        ],
        "columns": [
            "constructorstandings.constructorid",
            "constructors.name",
            "constructorstandings.position",
            "constructors.constructorid"
        ],
        "values": [
            {
                "table": "constructors",
                "column": "name",
                "value": "Renault",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "Renault is a name of constructor;",
        "values_list": [
            "constructors.name.renault"
        ]
    },
    {
        "question": "Please give the names of the races held on the circuits in Spain.",
        "SQL": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Spain'",
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "circuits.circuitid",
            "races.name",
            "circuits.country",
            "races.circuitid"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "country",
                "value": "Spain",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "Spain is a name of country;",
        "values_list": [
            "circuits.country.spain"
        ]
    },
    {
        "question": "What is the coordinates location of the circuits for Australian grand prix?",
        "SQL": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Australian Grand Prix'",
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "races.circuitid",
            "circuits.lat",
            "races.name",
            "circuits.lng",
            "circuits.circuitid"
        ],
        "values": [
            {
                "table": "races",
                "column": "name",
                "value": "Australian Grand Prix",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "coordinate position/location refers to lat, lng; circuits for Australian grand prix refers to races.name = 'Australian Grand Prix'",
        "values_list": [
            "races.name.australian grand prix"
        ]
    },
    {
        "question": "Where can I find the information about the races held on Sepang International Circuit?",
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "circuits.circuitid",
            "races.circuitid",
            "circuits.name",
            "circuits.url"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "name",
                "value": "Sepang International Circuit",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "information about races refers to url;",
        "values_list": [
            "circuits.name.sepang international circuit"
        ]
    },
    {
        "question": "Please list the time of the races held on Sepang International Circuit.",
        "SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "circuits.circuitid",
            "circuits.name",
            "races.time",
            "races.circuitid"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "name",
                "value": "Sepang International Circuit",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "circuits.name.sepang international circuit"
        ]
    },
    {
        "question": "Give the coordinate position for Abu Dhabi Grand Prix.",
        "SQL": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Abu Dhabi Grand Prix'",
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "races.circuitid",
            "circuits.lat",
            "races.name",
            "circuits.lng",
            "circuits.circuitid"
        ],
        "values": [
            {
                "table": "races",
                "column": "name",
                "value": "Abu Dhabi Grand Prix",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "coordinate position/location refers to lat, lng; Abu Dhabi Grand Prix refers to races.name = 'Abu Dhabi Grand Prix'",
        "values_list": [
            "races.name.abu dhabi grand prix"
        ]
    },
    {
        "question": "What's Bruno Senna's Q1 result in the qualifying race No. 354?",
        "SQL": "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 354 AND T2.forename = 'Bruno' AND T2.surname = 'Senna'",
        "tables": [
            "qualifying",
            "drivers"
        ],
        "columns": [
            "drivers.surname",
            "qualifying.raceid",
            "qualifying.driverid",
            "drivers.driverid",
            "drivers.forename",
            "qualifying.q1"
        ],
        "values": [
            {
                "table": "drivers",
                "column": "surname",
                "value": "Senna",
                "condition": "="
            },
            {
                "table": "qualifying",
                "column": "raceid",
                "value": "354",
                "condition": "="
            },
            {
                "table": "drivers",
                "column": "forename",
                "value": "Bruno",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "race number refers to raceId; Bruno Senna refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;",
        "values_list": [
            "drivers.surname.senna",
            "qualifying.raceid.354",
            "drivers.forename.bruno"
        ]
    },
    {
        "question": "For the Bahrain Grand Prix in 2007, how many drivers not finished the game?",
        "SQL": "SELECT COUNT(T3.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2007 AND T1.name = 'Bahrain Grand Prix' AND T2.time IS NULL",
        "tables": [
            "results",
            "races",
            "drivers"
        ],
        "columns": [
            "races.raceid",
            "results.time",
            "races.year",
            "drivers.driverid",
            "results.raceid",
            "races.name",
            "results.driverid"
        ],
        "values": [
            {
                "table": "races",
                "column": "year",
                "value": "2007",
                "condition": "="
            },
            {
                "table": "races",
                "column": "name",
                "value": "Bahrain Grand Prix",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "Bahrain Grand Prix refers to races.name = 'Bahrain Grand Prix'; drivers who finished the race refers to time is not empty (i.e. time IS NOT NULL);",
        "values_list": [
            "races.year.2007",
            "races.name.bahrain grand prix"
        ]
    },
    {
        "question": "Where is Malaysian Grand Prix held? Give the location coordinates.",
        "SQL": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Malaysian Grand Prix'",
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "races.circuitid",
            "circuits.lat",
            "races.name",
            "circuits.lng",
            "circuits.circuitid"
        ],
        "values": [
            {
                "table": "races",
                "column": "name",
                "value": "Malaysian Grand Prix",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "location coordinates refers to (lat, lng); Malaysian Grand Prix refers to races.name = 'Malaysian Grand Prix'",
        "values_list": [
            "races.name.malaysian grand prix"
        ]
    },
    {
        "question": "What's Lucas di Grassi's Q1 result in the race No. 345?",
        "SQL": "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 345 AND T2.forename = 'Lucas' AND T2.surname = 'di Grassi'",
        "tables": [
            "qualifying",
            "drivers"
        ],
        "columns": [
            "drivers.surname",
            "qualifying.raceid",
            "qualifying.driverid",
            "drivers.driverid",
            "drivers.forename",
            "qualifying.q1"
        ],
        "values": [
            {
                "table": "drivers",
                "column": "surname",
                "value": "di Grassi",
                "condition": "="
            },
            {
                "table": "qualifying",
                "column": "raceid",
                "value": "345",
                "condition": "="
            },
            {
                "table": "drivers",
                "column": "forename",
                "value": "Lucas",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "race number refers to raceId;",
        "values_list": [
            "drivers.surname.di grassi",
            "qualifying.raceid.345",
            "drivers.forename.lucas"
        ]
    },
    {
        "question": "What is the actual finish time for Bruce McLaren in the race No.743?",
        "SQL": "SELECT T2.time FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 743 AND T1.forename = 'Bruce' AND T1.surname = 'McLaren'",
        "tables": [
            "results",
            "drivers"
        ],
        "columns": [
            "drivers.surname",
            "results.time",
            "drivers.driverid",
            "results.raceid",
            "drivers.forename",
            "results.driverid"
        ],
        "values": [
            {
                "table": "drivers",
                "column": "surname",
                "value": "McLaren",
                "condition": "="
            },
            {
                "table": "results",
                "column": "raceid",
                "value": "743",
                "condition": "="
            },
            {
                "table": "drivers",
                "column": "forename",
                "value": "Bruce",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "race number refers to raceId;",
        "values_list": [
            "drivers.surname.mclaren",
            "results.raceid.743",
            "drivers.forename.bruce"
        ]
    },
    {
        "question": "Who finished second in the San Marino Grand Prix in 2006?",
        "SQL": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2006 AND T1.name = 'San Marino Grand Prix' AND T2.position = 2",
        "tables": [
            "results",
            "races",
            "drivers"
        ],
        "columns": [
            "results.position",
            "drivers.surname",
            "races.raceid",
            "races.year",
            "drivers.driverid",
            "results.raceid",
            "races.name",
            "drivers.forename",
            "results.driverid"
        ],
        "values": [
            {
                "table": "results",
                "column": "position",
                "value": "2",
                "condition": "="
            },
            {
                "table": "races",
                "column": "year",
                "value": "2006",
                "condition": "="
            },
            {
                "table": "races",
                "column": "name",
                "value": "San Marino Grand Prix",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "finished second refers to position = 2;",
        "values_list": [
            "results.position.2",
            "races.year.2006",
            "races.name.san marino grand prix"
        ]
    },
    {
        "question": "Which year was the first Singapore Grand Prix?",
        "SQL": "SELECT year FROM races WHERE name = 'Singapore Grand Prix' ORDER BY year ASC LIMIT 1",
        "tables": [
            "races"
        ],
        "columns": [
            "races.name",
            "races.year"
        ],
        "values": [
            {
                "table": "races",
                "column": "name",
                "value": "Singapore Grand Prix",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "the first race refers to race happened in min(year);",
        "values_list": [
            "races.name.singapore grand prix"
        ]
    },
    {
        "question": "In which country was the first European Grand Prix hosted? Name the circuit and location.",
        "SQL": "SELECT T1.country, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'European Grand Prix' ORDER BY T2.year ASC LIMIT 1",
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "races.circuitid",
            "circuits.location",
            "circuits.country",
            "races.year",
            "races.name",
            "circuits.circuitid"
        ],
        "values": [
            {
                "table": "races",
                "column": "name",
                "value": "European Grand Prix",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "the first refers to min(year);",
        "values_list": [
            "races.name.european grand prix"
        ]
    },
    {
        "question": "When was the last f1 season whereby Brands Hatch hosted the British Grand Prix?",
        "SQL": "SELECT T2.date FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Brands Hatch' AND T2.name = 'British Grand Prix' ORDER BY T2.year DESC LIMIT 1",
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "races.circuitid",
            "races.date",
            "races.year",
            "races.name",
            "circuits.circuitid",
            "circuits.name"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "name",
                "value": "Brands Hatch",
                "condition": "="
            },
            {
                "table": "races",
                "column": "name",
                "value": "British Grand Prix",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "the last refers to max(year);",
        "values_list": [
            "circuits.name.brands hatch",
            "races.name.british grand prix"
        ]
    },
    {
        "question": "Name all drivers in the 2010 Singapore Grand Prix order by their position stands.",
        "SQL": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Singapore Grand Prix' AND T1.year = 2010 ORDER BY T2.position ASC",
        "tables": [
            "driverstandings",
            "races",
            "drivers"
        ],
        "columns": [
            "drivers.surname",
            "races.raceid",
            "races.year",
            "driverstandings.position",
            "driverstandings.raceid",
            "drivers.driverid",
            "driverstandings.driverid",
            "races.name",
            "drivers.forename"
        ],
        "values": [
            {
                "table": "races",
                "column": "name",
                "value": "Singapore Grand Prix",
                "condition": "="
            },
            {
                "table": "races",
                "column": "year",
                "value": "2010",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "races.name.singapore grand prix",
            "races.year.2010"
        ]
    },
    {
        "question": "Name the top 3 drivers and the points they scored in the 2017 Chinese Grand Prix.",
        "SQL": "SELECT T3.forename, T3.surname, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Chinese Grand Prix' AND T1.year = 2017 ORDER BY T2.points DESC LIMIT 3",
        "tables": [
            "driverstandings",
            "races",
            "drivers"
        ],
        "columns": [
            "drivers.surname",
            "races.raceid",
            "races.year",
            "driverstandings.raceid",
            "driverstandings.points",
            "drivers.driverid",
            "driverstandings.driverid",
            "races.name",
            "drivers.forename"
        ],
        "values": [
            {
                "table": "races",
                "column": "name",
                "value": "Chinese Grand Prix",
                "condition": "="
            },
            {
                "table": "races",
                "column": "year",
                "value": "2017",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "races.name.chinese grand prix",
            "races.year.2017"
        ]
    },
    {
        "question": "What is the average lap time for Lewis Hamilton in the 2009 Malaysian Grand Prix?",
        "SQL": "SELECT AVG(T2.milliseconds) FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.year = 2009 AND T1.name = 'Malaysian Grand Prix'",
        "tables": [
            "laptimes",
            "races",
            "drivers"
        ],
        "columns": [
            "drivers.surname",
            "races.raceid",
            "laptimes.raceid",
            "laptimes.driverid",
            "races.year",
            "drivers.driverid",
            "laptimes.milliseconds",
            "races.name",
            "drivers.forename"
        ],
        "values": [
            {
                "table": "races",
                "column": "name",
                "value": "Malaysian Grand Prix",
                "condition": "="
            },
            {
                "table": "races",
                "column": "year",
                "value": "2009",
                "condition": "="
            },
            {
                "table": "drivers",
                "column": "forename",
                "value": "Lewis",
                "condition": "="
            },
            {
                "table": "drivers",
                "column": "surname",
                "value": "Hamilton",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "average lap time = AVG(milliseconds); 'Lewis Hamilton' refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname; 'Malaysian Grand Prix' refers to races.name = 'Malaysian Grand Prix'",
        "values_list": [
            "races.name.malaysian grand prix",
            "races.year.2009",
            "drivers.forename.lewis",
            "drivers.surname.hamilton"
        ]
    },
    {
        "question": "Calculate the percentage whereby Hamilton was not at the 1st track of the the f1 circuit since 2010.",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.position <> 1 THEN T2.position END) AS REAL) * 100 / COUNT(T2.driverStandingsId) FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.surname = 'Hamilton' AND T1.year >= 2010",
        "tables": [
            "driverstandings",
            "races",
            "drivers"
        ],
        "columns": [
            "drivers.surname",
            "races.raceid",
            "races.year",
            "driverstandings.position",
            "driverstandings.raceid",
            "driverstandings.driverid",
            "drivers.driverid",
            "driverstandings.driverstandingsid"
        ],
        "values": [
            {
                "table": "drivers",
                "column": "surname",
                "value": "Hamilton",
                "condition": "="
            },
            {
                "table": "races",
                "column": "year",
                "value": "2010",
                "condition": ">="
            },
            {
                "table": "driverstandings",
                "column": "position",
                "value": "1",
                "condition": "!="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "percentage = DIVIDE(COUNT(raceId) where surname = 'Hamilton' and position>1), (COUNT(raceId) where surname = 'Hamilton'); since 2010 refers to year >= 2010",
        "values_list": [
            "drivers.surname.hamilton",
            "races.year.2010",
            "driverstandings.position.1"
        ]
    },
    {
        "question": "How old is the youngest Japanese driver? What is his name?",
        "SQL": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1",
        "tables": [
            "drivers"
        ],
        "columns": [
            "drivers.surname",
            "drivers.dob",
            "drivers.forename",
            "drivers.nationality"
        ],
        "values": [
            {
                "table": "drivers",
                "column": "nationality",
                "value": "Japanese",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa; Japanese refers to nationality = 'Japanese'; age = YEAR(CURRENT_TIMESTAMP) - YEAR(dob);",
        "values_list": [
            "drivers.nationality.japanese"
        ]
    },
    {
        "question": "List circuits in USA which hosted f1 races in 2006. State the name and location of circuit and the name of the race it hosted.",
        "SQL": "SELECT T1.name, T1.location, T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'USA' AND T2.year = 2006",
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "races.circuitid",
            "circuits.location",
            "circuits.country",
            "races.year",
            "races.name",
            "circuits.circuitid",
            "circuits.name"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "country",
                "value": "USA",
                "condition": "="
            },
            {
                "table": "races",
                "column": "year",
                "value": "2006",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "circuits.country.usa",
            "races.year.2006"
        ]
    },
    {
        "question": "Which race was Alex Yoong in when he was in track number less than 20?",
        "SQL": "SELECT T1.name FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Alex' AND T3.surname = 'Yoong' AND T2.position < 20",
        "tables": [
            "driverstandings",
            "races",
            "drivers"
        ],
        "columns": [
            "drivers.surname",
            "races.raceid",
            "driverstandings.position",
            "driverstandings.raceid",
            "driverstandings.driverid",
            "races.name",
            "drivers.driverid",
            "drivers.forename"
        ],
        "values": [
            {
                "table": "driverstandings",
                "column": "position",
                "value": "20",
                "condition": "<"
            },
            {
                "table": "drivers",
                "column": "forename",
                "value": "Alex",
                "condition": "="
            },
            {
                "table": "drivers",
                "column": "surname",
                "value": "Yoong",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "Alex Yoong refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;track number less than 10 refers to position < 20",
        "values_list": [
            "driverstandings.position.20",
            "drivers.forename.alex",
            "drivers.surname.yoong"
        ]
    },
    {
        "question": "How many times did Michael Schumacher won from races hosted in Sepang International Circuit?",
        "SQL": "SELECT SUM(T2.wins) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId INNER JOIN circuits AS T4 ON T4.circuitId = T3.circuitId WHERE T1.forename = 'Michael' AND T1.surname = 'Schumacher' AND T4.name = 'Sepang International Circuit'",
        "tables": [
            "races",
            "circuits",
            "driverstandings",
            "drivers"
        ],
        "columns": [
            "drivers.surname",
            "races.circuitid",
            "races.raceid",
            "driverstandings.wins",
            "driverstandings.raceid",
            "driverstandings.driverid",
            "drivers.driverid",
            "circuits.circuitid",
            "circuits.name",
            "drivers.forename"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "name",
                "value": "Sepang International Circuit",
                "condition": "="
            },
            {
                "table": "drivers",
                "column": "forename",
                "value": "Michael",
                "condition": "="
            },
            {
                "table": "drivers",
                "column": "surname",
                "value": "Schumacher",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "win from races refers to max(points)",
        "values_list": [
            "circuits.name.sepang international circuit",
            "drivers.forename.michael",
            "drivers.surname.schumacher"
        ]
    },
    {
        "question": "State the race and year of race in which Michael Schumacher had his fastest lap.",
        "SQL": "SELECT T1.name, T1.year FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Michael' AND T3.surname = 'Schumacher' ORDER BY T2.milliseconds ASC LIMIT 1",
        "tables": [
            "laptimes",
            "races",
            "drivers"
        ],
        "columns": [
            "drivers.surname",
            "races.raceid",
            "laptimes.raceid",
            "races.year",
            "laptimes.driverid",
            "races.name",
            "drivers.driverid",
            "laptimes.milliseconds",
            "drivers.forename"
        ],
        "values": [
            {
                "table": "drivers",
                "column": "forename",
                "value": "Michael",
                "condition": "="
            },
            {
                "table": "drivers",
                "column": "surname",
                "value": "Schumacher",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "fastest lap refers to min(milliseconds); Alex Yoong refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;",
        "values_list": [
            "drivers.forename.michael",
            "drivers.surname.schumacher"
        ]
    },
    {
        "question": "What is Eddie Irvine's average points scored in year 2000?",
        "SQL": "SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Eddie' AND T1.surname = 'Irvine' AND T3.year = 2000",
        "tables": [
            "races",
            "driverstandings",
            "drivers"
        ],
        "columns": [
            "drivers.surname",
            "races.raceid",
            "races.year",
            "driverstandings.raceid",
            "driverstandings.points",
            "driverstandings.driverid",
            "drivers.driverid",
            "drivers.forename"
        ],
        "values": [
            {
                "table": "races",
                "column": "year",
                "value": "2000",
                "condition": "="
            },
            {
                "table": "drivers",
                "column": "forename",
                "value": "Eddie",
                "condition": "="
            },
            {
                "table": "drivers",
                "column": "surname",
                "value": "Irvine",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "average points = AVG(points where year = 2000)",
        "values_list": [
            "races.year.2000",
            "drivers.forename.eddie",
            "drivers.surname.irvine"
        ]
    },
    {
        "question": "Which was Lewis Hamilton first race? What was his points recorded for his first race event?",
        "SQL": "SELECT T1.name, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' ORDER BY T1.year ASC LIMIT 1",
        "tables": [
            "driverstandings",
            "races",
            "drivers"
        ],
        "columns": [
            "drivers.surname",
            "races.raceid",
            "races.year",
            "driverstandings.raceid",
            "driverstandings.points",
            "races.name",
            "drivers.driverid",
            "driverstandings.driverid",
            "drivers.forename"
        ],
        "values": [
            {
                "table": "drivers",
                "column": "forename",
                "value": "Lewis",
                "condition": "="
            },
            {
                "table": "drivers",
                "column": "surname",
                "value": "Hamilton",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "first race refers to min(Year); Lewis Hamiltonrefers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;",
        "values_list": [
            "drivers.forename.lewis",
            "drivers.surname.hamilton"
        ]
    },
    {
        "question": "Among all European Grand Prix races, what is the percentage of the races were hosted in Germany?",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.country = 'Germany' THEN T2.circuitID END) AS REAL) * 100 / COUNT(T2.circuitId) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'European Grand Prix'",
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "circuits.circuitid",
            "races.name",
            "circuits.country",
            "races.circuitid"
        ],
        "values": [
            {
                "table": "races",
                "column": "name",
                "value": "European Grand Prix",
                "condition": "="
            },
            {
                "table": "circuits",
                "column": "country",
                "value": "Germany",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "European Grand Prix races refers to races.name = 'European Grand Prix';percentage = divide(COUNT(races where country = Germany and name = 'Europearn Grand Prix'),COUNT(races where name = 'Europearn Grand Prix'))*100",
        "values_list": [
            "races.name.european grand prix",
            "circuits.country.germany"
        ]
    },
    {
        "question": "What's the location coordinates of Silverstone Circuit?",
        "SQL": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
        "tables": [
            "circuits"
        ],
        "columns": [
            "circuits.lat",
            "circuits.lng",
            "circuits.name"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "name",
                "value": "Silverstone Circuit",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
        "values_list": [
            "circuits.name.silverstone circuit"
        ]
    },
    {
        "question": "Which of these circuits is located at a higher latitude, Silverstone Circuit, Hockenheimring or Hungaroring?",
        "SQL": "SELECT name FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY lat DESC LIMIT 1",
        "tables": [
            "circuits"
        ],
        "columns": [
            "circuits.lat",
            "circuits.name"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "name",
                "value": "Silverstone Circuit"
            },
            {
                "table": "circuits",
                "column": "name",
                "value": "Hockenheimring"
            },
            {
                "table": "circuits",
                "column": "name",
                "value": "Hungaroring"
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "higher latitude refers to max(lat)",
        "values_list": [
            "circuits.name.silverstone circuit",
            "circuits.name.hockenheimring",
            "circuits.name.hungaroring"
        ]
    },
    {
        "question": "What's the reference name of Marina Bay Street Circuit?",
        "SQL": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'",
        "tables": [
            "circuits"
        ],
        "columns": [
            "circuits.circuitref",
            "circuits.name"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "name",
                "value": "Marina Bay Street Circuit",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'",
        "values_list": [
            "circuits.name.marina bay street circuit"
        ]
    },
    {
        "question": "Please list the surnames of all the Italian drivers.",
        "SQL": "SELECT surname FROM drivers WHERE nationality = 'Italian'",
        "tables": [
            "drivers"
        ],
        "columns": [
            "drivers.surname",
            "drivers.nationality"
        ],
        "values": [
            {
                "table": "drivers",
                "column": "nationality",
                "value": "Italian",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "Italian refers to nationality = 'italian'",
        "values_list": [
            "drivers.nationality.italian"
        ]
    },
    {
        "question": "Which website should I go to if I want to know more about Anthony Davidson?",
        "SQL": "SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson'",
        "tables": [
            "drivers"
        ],
        "columns": [
            "drivers.url",
            "drivers.surname",
            "drivers.forename"
        ],
        "values": [
            {
                "table": "drivers",
                "column": "forename",
                "value": "Anthony",
                "condition": "="
            },
            {
                "table": "drivers",
                "column": "surname",
                "value": "Davidson",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "website refers to url",
        "values_list": [
            "drivers.forename.anthony",
            "drivers.surname.davidson"
        ]
    },
    {
        "question": "What's Lewis Hamilton's reference name?",
        "SQL": "SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'",
        "tables": [
            "drivers"
        ],
        "columns": [
            "drivers.driverref",
            "drivers.surname",
            "drivers.forename"
        ],
        "values": [
            {
                "table": "drivers",
                "column": "forename",
                "value": "Lewis",
                "condition": "="
            },
            {
                "table": "drivers",
                "column": "surname",
                "value": "Hamilton",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "reference name refers to driverRef",
        "values_list": [
            "drivers.forename.lewis",
            "drivers.surname.hamilton"
        ]
    },
    {
        "question": "Which circuit did the 2009 Spanish Grand Prix use?",
        "SQL": "SELECT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'",
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "races.circuitid",
            "races.year",
            "races.name",
            "circuits.circuitid",
            "circuits.name"
        ],
        "values": [
            {
                "table": "races",
                "column": "year",
                "value": "2009",
                "condition": "="
            },
            {
                "table": "races",
                "column": "name",
                "value": "Spanish Grand Prix",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "races.year.2009",
            "races.name.spanish grand prix"
        ]
    },
    {
        "question": "Please list all the years that Silverstone Circuit was used in a Formula_1 race.",
        "SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "circuits.circuitid",
            "races.year",
            "races.circuitid",
            "circuits.name"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "name",
                "value": "Silverstone Circuit",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "circuits.name.silverstone circuit"
        ]
    },
    {
        "question": "Please give more information about the Formula_1 races that used the Silverstone Circuit.",
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "circuits.circuitid",
            "races.circuitid",
            "circuits.name",
            "circuits.url"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "name",
                "value": "Silverstone Circuit",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "more information refers to url",
        "values_list": [
            "circuits.name.silverstone circuit"
        ]
    },
    {
        "question": "How many Formula_1 races took place on the circuits in Italy?",
        "SQL": "SELECT COUNT(T2.circuitId) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Italy'",
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "circuits.circuitid",
            "circuits.country",
            "races.circuitid"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "country",
                "value": "Italy",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "circuits.country.italy"
        ]
    },
    {
        "question": "Please give the link of the website that shows more information about the circuits the Spanish Grand Prix used in 2009.",
        "SQL": "SELECT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'",
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "races.circuitid",
            "races.year",
            "circuits.url",
            "races.name",
            "circuits.circuitid"
        ],
        "values": [
            {
                "table": "races",
                "column": "year",
                "value": "2009",
                "condition": "="
            },
            {
                "table": "races",
                "column": "name",
                "value": "Spanish Grand Prix",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "link of the website refers to url",
        "values_list": [
            "races.year.2009",
            "races.name.spanish grand prix"
        ]
    },
    {
        "question": "What's the fastest lap time ever in a race for Lewis Hamilton?",
        "SQL": "SELECT T2.fastestLapTime FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapTime ASC LIMIT 1",
        "tables": [
            "results",
            "drivers"
        ],
        "columns": [
            "drivers.surname",
            "results.fastestlaptime",
            "drivers.driverid",
            "drivers.forename",
            "results.driverid"
        ],
        "values": [
            {
                "table": "drivers",
                "column": "forename",
                "value": "Lewis",
                "condition": "="
            },
            {
                "table": "drivers",
                "column": "surname",
                "value": "Hamilton",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "fastest lap time ever refers to min(fastestLapTime)",
        "values_list": [
            "drivers.forename.lewis",
            "drivers.surname.hamilton"
        ]
    },
    {
        "question": "Please list the Formula_1 races that Lewis Hamilton participated.",
        "SQL": "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'",
        "tables": [
            "results",
            "races",
            "drivers"
        ],
        "columns": [
            "drivers.surname",
            "races.raceid",
            "races.name",
            "results.raceid",
            "drivers.driverid",
            "drivers.forename",
            "results.driverid"
        ],
        "values": [
            {
                "table": "drivers",
                "column": "forename",
                "value": "Lewis",
                "condition": "="
            },
            {
                "table": "drivers",
                "column": "surname",
                "value": "Hamilton",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "drivers.forename.lewis",
            "drivers.surname.hamilton"
        ]
    },
    {
        "question": "In which Formula_1 race did Lewis Hamilton rank the highest?",
        "SQL": "SELECT name FROM races WHERE raceId IN ( SELECT raceId FROM results WHERE rank = 1 AND driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' ) )",
        "tables": [
            "results",
            "races",
            "drivers"
        ],
        "columns": [
            "drivers.surname",
            "results.rank",
            "drivers.driverid",
            "races.name",
            "drivers.forename"
        ],
        "values": [
            {
                "table": "drivers",
                "column": "forename",
                "value": "Lewis",
                "condition": "="
            },
            {
                "table": "drivers",
                "column": "surname",
                "value": "Hamilton",
                "condition": "="
            },
            {
                "table": "",
                "column": "rank",
                "value": "1",
                "condition": "="
            },
            {
                "table": "",
                "column": "forename",
                "value": "Lewis",
                "condition": "="
            },
            {
                "table": "",
                "column": "surname",
                "value": "Hamilton",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "rank the highest refers to min(rank); Lewis Hamilton refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;",
        "values_list": [
            "drivers.forename.lewis",
            "drivers.surname.hamilton",
            ".rank.1",
            ".forename.lewis",
            ".surname.hamilton"
        ]
    },
    {
        "question": "What was the fastest lap speed among all drivers in the 2009 Spanish Grand Prix?",
        "SQL": "SELECT T2.fastestLapSpeed FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.name = 'Spanish Grand Prix' AND T1.year = 2009 AND T2.fastestLapSpeed IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
        "tables": [
            "results",
            "races"
        ],
        "columns": [
            "races.raceid",
            "races.year",
            "results.fastestlapspeed",
            "races.name",
            "results.raceid"
        ],
        "values": [
            {
                "table": "races",
                "column": "name",
                "value": "Spanish Grand Prix",
                "condition": "="
            },
            {
                "table": "races",
                "column": "year",
                "value": "2009",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "the fastest lap speed among all refers to max(fastestLapSpeed); Spanish Grand Prix refers to races.name = 'Spanish Grand Prix';",
        "values_list": [
            "races.name.spanish grand prix",
            "races.year.2009"
        ]
    },
    {
        "question": "In which years did Lewis Hamilton participate in a Formula_1 race?",
        "SQL": "SELECT DISTINCT T1.year FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'",
        "tables": [
            "results",
            "races",
            "drivers"
        ],
        "columns": [
            "drivers.surname",
            "races.raceid",
            "races.year",
            "drivers.driverid",
            "results.raceid",
            "drivers.forename",
            "results.driverid"
        ],
        "values": [
            {
                "table": "drivers",
                "column": "forename",
                "value": "Lewis",
                "condition": "="
            },
            {
                "table": "drivers",
                "column": "surname",
                "value": "Hamilton",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "drivers.forename.lewis",
            "drivers.surname.hamilton"
        ]
    },
    {
        "question": "What was Lewis Hamilton's final rank in the 2008 Chinese Grand Prix?",
        "SQL": "SELECT T2.positionOrder FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.name = 'Chinese Grand Prix' AND T1.year = 2008",
        "tables": [
            "results",
            "races",
            "drivers"
        ],
        "columns": [
            "drivers.surname",
            "results.positionorder",
            "races.raceid",
            "races.year",
            "drivers.driverid",
            "results.raceid",
            "races.name",
            "drivers.forename",
            "results.driverid"
        ],
        "values": [
            {
                "table": "races",
                "column": "year",
                "value": "2008",
                "condition": "="
            },
            {
                "table": "races",
                "column": "name",
                "value": "Chinese Grand Prix",
                "condition": "="
            },
            {
                "table": "drivers",
                "column": "forename",
                "value": "Lewis",
                "condition": "="
            },
            {
                "table": "drivers",
                "column": "surname",
                "value": "Hamilton",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "Lewis Hamilton refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname; final rank refers to positionOrder; Chinese Grand Prix refers to races.name = 'Chinese Grand Prix';",
        "values_list": [
            "races.year.2008",
            "races.name.chinese grand prix",
            "drivers.forename.lewis",
            "drivers.surname.hamilton"
        ]
    },
    {
        "question": "Which driver was in the no. 4 grid formation when starting the race in 1989's Australian Grand Prix? Please give his forename and surname.",
        "SQL": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T2.grid = 4 AND T1.name = 'Australian Grand Prix' AND T1.year = 1989",
        "tables": [
            "results",
            "races",
            "drivers"
        ],
        "columns": [
            "drivers.surname",
            "races.raceid",
            "races.year",
            "drivers.driverid",
            "results.raceid",
            "races.name",
            "drivers.forename",
            "results.grid",
            "results.driverid"
        ],
        "values": [
            {
                "table": "races",
                "column": "year",
                "value": "1989",
                "condition": "="
            },
            {
                "table": "results",
                "column": "grid",
                "value": "4",
                "condition": "="
            },
            {
                "table": "races",
                "column": "name",
                "value": "Australian Grand Prix",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "the no. 4 grid formation refers to grid = 4",
        "values_list": [
            "races.year.1989",
            "results.grid.4",
            "races.name.australian grand prix"
        ]
    },
    {
        "question": "How many drivers managed to finish the race in the 2008 Australian Grand Prix?",
        "SQL": "SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.name = 'Australian Grand Prix' AND T1.year = 2008 AND T2.time IS NOT NULL",
        "tables": [
            "results",
            "races"
        ],
        "columns": [
            "races.raceid",
            "races.year",
            "results.time",
            "races.name",
            "results.raceid",
            "results.driverid"
        ],
        "values": [
            {
                "table": "races",
                "column": "name",
                "value": "Australian Grand Prix",
                "condition": "="
            },
            {
                "table": "races",
                "column": "year",
                "value": "2008",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "managed to finish the race refers to time is not null",
        "values_list": [
            "races.name.australian grand prix",
            "races.year.2008"
        ]
    },
    {
        "question": "Which was the fastest lap for Lewis Hamilton in the 2008 Australian Grand Prix?",
        "SQL": "SELECT T1.fastestLap FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008 AND T3.forename = 'Lewis' AND T3.surname = 'Hamilton'",
        "tables": [
            "results",
            "races",
            "drivers"
        ],
        "columns": [
            "drivers.surname",
            "races.raceid",
            "races.year",
            "drivers.driverid",
            "results.raceid",
            "races.name",
            "drivers.forename",
            "results.driverid",
            "results.fastestlap"
        ],
        "values": [
            {
                "table": "drivers",
                "column": "surname",
                "value": "Hamilton",
                "condition": "="
            },
            {
                "table": "drivers",
                "column": "forename",
                "value": "Lewis",
                "condition": "="
            },
            {
                "table": "races",
                "column": "name",
                "value": "Australian Grand Prix",
                "condition": "="
            },
            {
                "table": "races",
                "column": "year",
                "value": "2008",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "drivers.surname.hamilton",
            "drivers.forename.lewis",
            "races.name.australian grand prix",
            "races.year.2008"
        ]
    },
    {
        "question": "Among the drivers that finished the race in the 2008 Chinese Grand Prix, how many of them have participated in Formula_1 races?",
        "SQL": "SELECT COUNT(*) FROM ( SELECT T1.driverId FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'Chinese Grand Prix' AND T2.year = 2008 AND T1.time IS NOT NULL GROUP BY T1.driverId HAVING COUNT(T2.raceId) > 0 )",
        "tables": [
            "results",
            "races"
        ],
        "columns": [
            "races.raceid",
            "races.year",
            "results.time",
            "races.name",
            "results.raceid",
            "results.driverid"
        ],
        "values": [
            {
                "table": "races",
                "column": "name",
                "value": "Chinese Grand Prix",
                "condition": "="
            },
            {
                "table": "races",
                "column": "year",
                "value": "2008",
                "condition": "="
            },
            {
                "table": "races",
                "column": "name",
                "value": "Chinese Grand Prix",
                "condition": "="
            },
            {
                "table": "races",
                "column": "year",
                "value": "2008",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "COUNT(raceID) > 0 reveals that this driver participated in races; drivers who finished the race refers to time has value.",
        "values_list": [
            "races.name.chinese grand prix",
            "races.year.2008",
            "races.name.chinese grand prix",
            "races.year.2008"
        ]
    },
    {
        "question": "How many points did Lewis Hamilton get in total in all the Formula_1 races he participated?",
        "SQL": "SELECT SUM(T2.points) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton'",
        "tables": [
            "results",
            "drivers"
        ],
        "columns": [
            "drivers.surname",
            "results.points",
            "drivers.driverid",
            "drivers.forename",
            "results.driverid"
        ],
        "values": [
            {
                "table": "drivers",
                "column": "forename",
                "value": "Lewis",
                "condition": "="
            },
            {
                "table": "drivers",
                "column": "surname",
                "value": "Hamilton",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "drivers.forename.lewis",
            "drivers.surname.hamilton"
        ]
    },
    {
        "question": "What is the average fastest lap time in seconds for Lewis Hamilton in all the Formula_1 races?",
        "SQL": "SELECT AVG(CAST(SUBSTR(T2.fastestLapTime, 1, INSTR(T2.fastestLapTime, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(T2.fastestLapTime, INSTR(T2.fastestLapTime, ':') + 1) AS REAL)) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.surname = 'Hamilton' AND T1.forename = 'Lewis'",
        "tables": [
            "results",
            "drivers"
        ],
        "columns": [
            "drivers.surname",
            "results.fastestlaptime",
            "drivers.driverid",
            "drivers.forename",
            "results.driverid"
        ],
        "values": [
            {
                "table": "drivers",
                "column": "surname",
                "value": "Hamilton",
                "condition": "="
            },
            {
                "table": "drivers",
                "column": "forename",
                "value": "Lewis",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "average fastest lap time = avg(fastestLapTime); The time is recorded on 'MM:SS.mmm'",
        "values_list": [
            "drivers.surname.hamilton",
            "drivers.forename.lewis"
        ]
    },
    {
        "question": "What is the rate of drivers completing all the laps in the 2008 Australian Grand Prix?",
        "SQL": "SELECT CAST(SUM(IIF(T1.time IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.resultId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008",
        "tables": [
            "results",
            "races"
        ],
        "columns": [
            "races.raceid",
            "races.year",
            "results.time",
            "results.resultid",
            "races.name",
            "results.raceid"
        ],
        "values": [
            {
                "table": "races",
                "column": "name",
                "value": "Australian Grand Prix",
                "condition": "="
            },
            {
                "table": "races",
                "column": "year",
                "value": "2008",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "completing all the laps refers to time is not null; rate = divide(COUNT(raceID where time is not null), COUNT(raceID))",
        "values_list": [
            "races.name.australian grand prix",
            "races.year.2008"
        ]
    },
    {
        "question": "How many circuits are there in Adelaide, Australia?",
        "SQL": "SELECT COUNT(circuitId) FROM circuits WHERE location = 'Adelaide' AND country = 'Australia'",
        "tables": [
            "circuits"
        ],
        "columns": [
            "circuits.country",
            "circuits.circuitid",
            "circuits.location"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "location",
                "value": "Adelaide",
                "condition": "="
            },
            {
                "table": "circuits",
                "column": "country",
                "value": "Australia",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "Australia is the country; Melbourne is the location of circuit;",
        "values_list": [
            "circuits.location.adelaide",
            "circuits.country.australia"
        ]
    },
    {
        "question": "How many British drivers were born after 1980?",
        "SQL": "SELECT COUNT(driverId) FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) > '1980'",
        "tables": [
            "drivers"
        ],
        "columns": [
            "drivers.driverid",
            "drivers.dob",
            "drivers.nationality"
        ],
        "values": [
            {
                "table": "drivers",
                "column": "nationality",
                "value": "British",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "born after 1980 refers to year (dob) >1980;",
        "values_list": [
            "drivers.nationality.british"
        ]
    },
    {
        "question": "What are the maximum points of British constructors?",
        "SQL": "SELECT MAX(T1.points) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T2.nationality = 'British'",
        "tables": [
            "constructors",
            "constructorstandings"
        ],
        "columns": [
            "constructorstandings.constructorid",
            "constructorstandings.points",
            "constructors.nationality",
            "constructors.constructorid"
        ],
        "values": [
            {
                "table": "constructors",
                "column": "nationality",
                "value": "British",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "maximum points = MAX(points); British is a nationality",
        "values_list": [
            "constructors.nationality.british"
        ]
    },
    {
        "question": "How many Japanese constructors have 0 points in 2 races?",
        "SQL": "SELECT COUNT(T1.raceId) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T2.nationality = 'Japanese' GROUP BY T1.constructorId HAVING COUNT(raceId) = 2",
        "tables": [
            "constructors",
            "constructorstandings"
        ],
        "columns": [
            "constructorstandings.constructorid",
            "constructorstandings.points",
            "constructors.constructorid",
            "constructors.nationality",
            "constructorstandings.raceid"
        ],
        "values": [
            {
                "table": "constructorstandings",
                "column": "points",
                "value": "0",
                "condition": "="
            },
            {
                "table": "constructors",
                "column": "nationality",
                "value": "Japanese",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "2 races refers to COUNT(raceID) = 2; Japanese refers to constructors.nationality = 'Japanese';",
        "values_list": [
            "constructorstandings.points.0",
            "constructors.nationality.japanese"
        ]
    },
    {
        "question": "How many French constructors have a lap number of over 50?",
        "SQL": "SELECT COUNT(DISTINCT T2.constructorId) FROM results AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.laps > 50 AND T2.nationality = 'French'",
        "tables": [
            "results",
            "constructors"
        ],
        "columns": [
            "results.laps",
            "results.constructorid",
            "constructors.nationality",
            "constructors.constructorid"
        ],
        "values": [
            {
                "table": "results",
                "column": "laps",
                "value": "50",
                "condition": ">"
            },
            {
                "table": "constructors",
                "column": "nationality",
                "value": "French",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "lap numbers of over 50 refers to laps > 50;",
        "values_list": [
            "results.laps.50",
            "constructors.nationality.french"
        ]
    },
    {
        "question": "Please calculate the race completion percentage of Japanese drivers from 2007 to 2009.",
        "SQL": "SELECT CAST(SUM(IIF(T1.time IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.raceId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T3.nationality = 'Japanese' AND T2.year BETWEEN 2007 AND 2009",
        "tables": [
            "results",
            "races",
            "drivers"
        ],
        "columns": [
            "races.raceid",
            "races.year",
            "results.time",
            "drivers.driverid",
            "results.raceid",
            "drivers.nationality",
            "results.driverid"
        ],
        "values": [
            {
                "table": "drivers",
                "column": "nationality",
                "value": "Japanese",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "from 2007 to 2009 refers to year between 2007 and 2009; race completion refers to time is not null; percentage = Divide(COUNT(DriverID where time is not null and year between 2007 and 2009),Count (DriverID where year between 2007 and 2009))*100; ",
        "values_list": [
            "drivers.nationality.japanese"
        ]
    },
    {
        "question": "How many Italian drivers haven't finished the race?",
        "SQL": "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'Italian' AND T1.time IS NULL",
        "tables": [
            "results",
            "drivers"
        ],
        "columns": [
            "results.driverid",
            "results.time",
            "drivers.driverid",
            "drivers.nationality"
        ],
        "values": [
            {
                "table": "drivers",
                "column": "nationality",
                "value": "Italian",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "haven't finished the race refers to time is null;",
        "values_list": [
            "drivers.nationality.italian"
        ]
    },
    {
        "question": "What is the average of fastest lap speed in the 2009 Spanish Grand Prix race?",
        "SQL": "SELECT AVG(T1.fastestLapSpeed) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'",
        "tables": [
            "results",
            "races"
        ],
        "columns": [
            "races.raceid",
            "races.year",
            "results.fastestlapspeed",
            "races.name",
            "results.raceid"
        ],
        "values": [
            {
                "table": "races",
                "column": "year",
                "value": "2009",
                "condition": "="
            },
            {
                "table": "races",
                "column": "name",
                "value": "Spanish Grand Prix",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "Spanish Grand Prix is the name of race refers to name = 'Spanish Grand Prix'; average fastest lap speed refers to avg(fastestLapSpeed);",
        "values_list": [
            "races.year.2009",
            "races.name.spanish grand prix"
        ]
    },
    {
        "question": "How many French drivers who obtain the laptime less than 02:00.00?",
        "SQL": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN lapTimes AS T2 on T1.driverId = T2.driverId WHERE T1.nationality = 'French' AND (CAST(SUBSTR(T2.time, 1, 2) AS INTEGER) * 60 + CAST(SUBSTR(T2.time, 4, 2) AS INTEGER) + CAST(SUBSTR(T2.time, 7, 2) AS REAL) / 1000) < 120",
        "tables": [
            "laptimes",
            "drivers"
        ],
        "columns": [
            "drivers.driverid",
            "laptimes.driverid",
            "laptimes.time",
            "drivers.nationality"
        ],
        "values": [
            {
                "table": "drivers",
                "column": "nationality",
                "value": "French",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "lap time less than 02:00.00 refers to seconds < 120;",
        "values_list": [
            "drivers.nationality.french"
        ]
    },
    {
        "question": "What is reference name of Robert Kubica?",
        "SQL": "SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica'",
        "tables": [
            "drivers"
        ],
        "columns": [
            "drivers.driverref",
            "drivers.surname",
            "drivers.forename"
        ],
        "values": [
            {
                "table": "drivers",
                "column": "forename",
                "value": "Robert",
                "condition": "="
            },
            {
                "table": "drivers",
                "column": "surname",
                "value": "Kubica",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "reference name refers to driverRef;",
        "values_list": [
            "drivers.forename.robert",
            "drivers.surname.kubica"
        ]
    },
    {
        "question": "How many British drivers who were born in 1980?",
        "SQL": "SELECT COUNT(driverId) FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) = '1980'",
        "tables": [
            "drivers"
        ],
        "columns": [
            "drivers.driverid",
            "drivers.dob",
            "drivers.nationality"
        ],
        "values": [
            {
                "table": "drivers",
                "column": "nationality",
                "value": "British",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "born in 1980 refers to year(dob) = 1980;",
        "values_list": [
            "drivers.nationality.british"
        ]
    },
    {
        "question": "List out top 3 German drivers who were born from 1980-1990 and have the earliest lap time.",
        "SQL": "SELECT T2.driverId FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1990' ORDER BY T1.time LIMIT 3",
        "tables": [
            "pitstops",
            "drivers"
        ],
        "columns": [
            "pitstops.driverid",
            "pitstops.time",
            "drivers.driverid",
            "drivers.nationality",
            "drivers.dob"
        ],
        "values": [
            {
                "table": "drivers",
                "column": "nationality",
                "value": "German",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "born from 1980-1990 refers to year(dob) between 1980 and 1990; earliest lap time refers to Min(time);",
        "values_list": [
            "drivers.nationality.german"
        ]
    },
    {
        "question": "Please state the reference name of the oldest German driver.",
        "SQL": "SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY JULIANDAY(dob) ASC LIMIT 1",
        "tables": [
            "drivers"
        ],
        "columns": [
            "drivers.driverref",
            "drivers.dob",
            "drivers.nationality"
        ],
        "values": [
            {
                "table": "drivers",
                "column": "nationality",
                "value": "German",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "oldest refers to MIN(year(dob)); reference names appear in drverRef.",
        "values_list": [
            "drivers.nationality.german"
        ]
    },
    {
        "question": "List out top 10 Spanish drivers who were born before 1982 and have the latest lap time.",
        "SQL": "SELECT T2.driverId FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'Spanish' AND STRFTIME('%Y', T2.dob) < '1982' ORDER BY T1.time DESC LIMIT 10",
        "tables": [
            "pitstops",
            "drivers"
        ],
        "columns": [
            "pitstops.driverid",
            "pitstops.time",
            "drivers.driverid",
            "drivers.nationality",
            "drivers.dob"
        ],
        "values": [
            {
                "table": "drivers",
                "column": "nationality",
                "value": "Spanish",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "born before 1982 refers to year(dob) < 1982; latest lap time refers to Max(time);",
        "values_list": [
            "drivers.nationality.spanish"
        ]
    },
    {
        "question": "How many times the circuits were held in Austria? Please give their location and coordinates.",
        "SQL": "SELECT DISTINCT location, lat, lng FROM circuits WHERE country = 'Austria'",
        "tables": [
            "circuits"
        ],
        "columns": [
            "circuits.lat",
            "circuits.lng",
            "circuits.country",
            "circuits.location"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "country",
                "value": "Austria",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "location coordinates refers to (lat,lng); Austria refers to country = 'Austria';",
        "values_list": [
            "circuits.country.austria"
        ]
    },
    {
        "question": "How many American drivers have puncture status.",
        "SQL": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 on T1.driverId = T2.driverId INNER JOIN status AS T3 on T2.statusId = T3.statusId WHERE T3.status = 'Puncture' AND T1.nationality = 'American'",
        "tables": [
            "results",
            "drivers",
            "status"
        ],
        "columns": [
            "status.statusid",
            "results.statusid",
            "status.status",
            "drivers.driverid",
            "drivers.nationality",
            "results.driverid"
        ],
        "values": [
            {
                "table": "status",
                "column": "status",
                "value": "Puncture",
                "condition": "="
            },
            {
                "table": "drivers",
                "column": "nationality",
                "value": "American",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "puncture status refers to status = Puncture;",
        "values_list": [
            "status.status.puncture",
            "drivers.nationality.american"
        ]
    },
    {
        "question": "Which of the Italian constructor got the highest point to date? Give its introduction website?",
        "SQL": "SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 on T1.constructorId = T2.constructorId WHERE T1.nationality = 'Italian' ORDER BY T2.points DESC LIMIT 1",
        "tables": [
            "constructors",
            "constructorstandings"
        ],
        "columns": [
            "constructorstandings.constructorid",
            "constructors.nationality",
            "constructorstandings.points",
            "constructors.constructorid",
            "constructors.url"
        ],
        "values": [
            {
                "table": "constructors",
                "column": "nationality",
                "value": "Italian",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "introduction website refers to url; Italian is a nationality",
        "values_list": [
            "constructors.nationality.italian"
        ]
    },
    {
        "question": "Among the drivers who participated in the French Grand Prix, who has the slowest time in the 3rd lap.",
        "SQL": "SELECT T1.driverId FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'French Grand Prix' AND T1.lap = 3 ORDER BY T1.time DESC LIMIT 1",
        "tables": [
            "laptimes",
            "races"
        ],
        "columns": [
            "races.raceid",
            "laptimes.time",
            "laptimes.raceid",
            "laptimes.driverid",
            "races.name",
            "laptimes.lap"
        ],
        "values": [
            {
                "table": "races",
                "column": "name",
                "value": "French Grand Prix",
                "condition": "="
            },
            {
                "table": "laptimes",
                "column": "lap",
                "value": "3",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "slowest time refers to Max(time);",
        "values_list": [
            "races.name.french grand prix",
            "laptimes.lap.3"
        ]
    },
    {
        "question": "List down top 3 German drivers who has the shortest average pit stop duration and were born between 1980-1985.",
        "SQL": "SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1985' GROUP BY T2.forename, T2.surname ORDER BY AVG(T1.duration) LIMIT 3",
        "tables": [
            "pitstops",
            "drivers"
        ],
        "columns": [
            "drivers.surname",
            "pitstops.driverid",
            "pitstops.duration",
            "drivers.driverid",
            "drivers.forename",
            "drivers.nationality",
            "drivers.dob"
        ],
        "values": [
            {
                "table": "drivers",
                "column": "nationality",
                "value": "German",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "Full name of the driver refers to drivers.forename and drivers.surname; born between 1980-1985 refers to 1980< year(dob)>1985; Average pitstop duration refers to Divide(SUM(duration),COUNT(duration)); shortest average refers to Min(avg(duration));",
        "values_list": [
            "drivers.nationality.german"
        ]
    },
    {
        "question": "What is the full name and date of birth of Austrian drivers born between 1981 and 1991?",
        "SQL": "SELECT forename, surname, dob FROM drivers WHERE nationality = 'Austrian' AND STRFTIME('%Y', dob) BETWEEN '1981' AND '1991'",
        "tables": [
            "drivers"
        ],
        "columns": [
            "drivers.surname",
            "drivers.dob",
            "drivers.forename",
            "drivers.nationality"
        ],
        "values": [
            {
                "table": "drivers",
                "column": "nationality",
                "value": "Austrian",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "Full name refers to forname, surname; Date of birth refers to dob; year(dob) BETWEEN '1981' AND '1991'; Austrian is a nationality",
        "values_list": [
            "drivers.nationality.austrian"
        ]
    },
    {
        "question": "Find the full name, Wiki Pedia page link, and date of birth of German drivers born between 1971 and 1985. List it in descending order of date of birth.",
        "SQL": "SELECT forename, surname, url, dob FROM drivers WHERE nationality = 'German' AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC",
        "tables": [
            "drivers"
        ],
        "columns": [
            "drivers.surname",
            "drivers.forename",
            "drivers.nationality",
            "drivers.url",
            "drivers.dob"
        ],
        "values": [
            {
                "table": "drivers",
                "column": "nationality",
                "value": "German",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "FFull name refers to forname+surname; Nationality refers to German; Date of birth refers to dob; year(dob) BETWEEN '1971' AND '1985'",
        "values_list": [
            "drivers.nationality.german"
        ]
    },
    {
        "question": "In which location does the Hungaroring circuit located? Also, find the country and coordinates of this circuit?",
        "SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Hungaroring'",
        "tables": [
            "circuits"
        ],
        "columns": [
            "circuits.lat",
            "circuits.lng",
            "circuits.country",
            "circuits.name"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "name",
                "value": "Hungaroring",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "coordinates expressed in latitude and longitude refers to (lat, lng)",
        "values_list": [
            "circuits.name.hungaroring"
        ]
    },
    {
        "question": "Which constructor scored most points from Monaco Grand Prix between 1980 and 2010? List the score, name and nationality of this team.",
        "SQL": "SELECT SUM(T1.points), T2.name, T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T3.raceid = T1.raceid WHERE T3.name = 'Monaco Grand Prix' AND T3.year BETWEEN 1980 AND 2010 GROUP BY T2.name ORDER BY SUM(T1.points) DESC LIMIT 1",
        "tables": [
            "constructors",
            "constructorresults",
            "races"
        ],
        "columns": [
            "constructorresults.constructorid",
            "races.raceid",
            "races.year",
            "constructors.name",
            "constructorresults.raceid",
            "races.name",
            "constructors.constructorid",
            "constructorresults.points",
            "constructors.nationality"
        ],
        "values": [
            {
                "table": "races",
                "column": "name",
                "value": "Monaco Grand Prix",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "Monaco Grand Priz refers to the race; race in year between 1980 and 2010",
        "values_list": [
            "races.name.monaco grand prix"
        ]
    },
    {
        "question": "What is the average score of Lewis Hamilton among all the Turkish Grand Prix?",
        "SQL": "SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T3.name = 'Turkish Grand Prix'",
        "tables": [
            "races",
            "driverstandings",
            "drivers"
        ],
        "columns": [
            "drivers.surname",
            "races.raceid",
            "driverstandings.raceid",
            "driverstandings.points",
            "driverstandings.driverid",
            "drivers.driverid",
            "races.name",
            "drivers.forename"
        ],
        "values": [
            {
                "table": "races",
                "column": "name",
                "value": "Turkish Grand Prix",
                "condition": "="
            },
            {
                "table": "drivers",
                "column": "forename",
                "value": "Lewis",
                "condition": "="
            },
            {
                "table": "drivers",
                "column": "surname",
                "value": "Hamilton",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "Average score = AVG(points)",
        "values_list": [
            "races.name.turkish grand prix",
            "drivers.forename.lewis",
            "drivers.surname.hamilton"
        ]
    },
    {
        "question": "What is full name of the racer who ranked 1st in the 3rd qualifying race held in the Marina Bay Street Circuit in 2008?",
        "SQL": "SELECT T2.forename, T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceid = T3.raceid WHERE q3 IS NOT NULL AND T3.year = 2008 AND T3.circuitId IN ( SELECT circuitId FROM circuits WHERE name = 'Marina Bay Street Circuit' ) ORDER BY CAST(SUBSTR(q3, 1, INSTR(q3, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(q3, INSTR(q3, ':') + 1, INSTR(q3, '.') - INSTR(q3, ':') - 1) AS REAL) + CAST(SUBSTR(q3, INSTR(q3, '.') + 1) AS REAL) / 1000 ASC LIMIT 1",
        "tables": [
            "races",
            "qualifying",
            "circuits",
            "drivers"
        ],
        "columns": [
            "drivers.surname",
            "races.circuitid",
            "races.raceid",
            "qualifying.raceid",
            "races.year",
            "qualifying.driverid",
            "drivers.driverid",
            "circuits.name",
            "drivers.forename"
        ],
        "values": [
            {
                "table": "races",
                "column": "year",
                "value": "2008",
                "condition": "="
            },
            {
                "table": "",
                "column": "name",
                "value": "Marina Bay Street Circuit",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "Ranked 1st in the 3rd qualifying race refer to MIN(q3); 2008 is the year of race; full name of racer = forename, surname",
        "values_list": [
            "races.year.2008",
            ".name.marina bay street circuit"
        ]
    },
    {
        "question": "What was the longest time that Lewis Hamilton had spent at a pit stop?",
        "SQL": "SELECT T1.duration FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.duration DESC LIMIT 1",
        "tables": [
            "pitstops",
            "drivers"
        ],
        "columns": [
            "drivers.surname",
            "pitstops.driverid",
            "pitstops.duration",
            "drivers.driverid",
            "drivers.forename"
        ],
        "values": [
            {
                "table": "drivers",
                "column": "forename",
                "value": "Lewis",
                "condition": "="
            },
            {
                "table": "drivers",
                "column": "surname",
                "value": "Hamilton",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "longest time refes to MAX(duration);",
        "values_list": [
            "drivers.forename.lewis",
            "drivers.surname.hamilton"
        ]
    },
    {
        "question": "During which lap did Lewis Hamilton take a pit stop during the 2011 Australian Grand Prix?",
        "SQL": "SELECT T1.lap FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T3.year = 2011 AND T3.name = 'Australian Grand Prix'",
        "tables": [
            "races",
            "pitstops",
            "drivers"
        ],
        "columns": [
            "drivers.surname",
            "pitstops.lap",
            "pitstops.driverid",
            "races.raceid",
            "races.year",
            "drivers.driverid",
            "races.name",
            "drivers.forename",
            "pitstops.raceid"
        ],
        "values": [
            {
                "table": "races",
                "column": "name",
                "value": "Australian Grand Prix",
                "condition": "="
            },
            {
                "table": "races",
                "column": "year",
                "value": "2011",
                "condition": "="
            },
            {
                "table": "drivers",
                "column": "forename",
                "value": "Lewis",
                "condition": "="
            },
            {
                "table": "drivers",
                "column": "surname",
                "value": "Hamilton",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "races.name.australian grand prix",
            "races.year.2011",
            "drivers.forename.lewis",
            "drivers.surname.hamilton"
        ]
    },
    {
        "question": "Please list the time each driver spent at the pit stop during the 2011 Australian Grand Prix.",
        "SQL": "SELECT T1.duration FROM pitStops AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2011 AND T2.name = 'Australian Grand Prix'",
        "tables": [
            "pitstops",
            "races"
        ],
        "columns": [
            "races.raceid",
            "pitstops.duration",
            "races.year",
            "races.name",
            "pitstops.raceid"
        ],
        "values": [
            {
                "table": "races",
                "column": "year",
                "value": "2011",
                "condition": "="
            },
            {
                "table": "races",
                "column": "name",
                "value": "Australian Grand Prix",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "time spent at pit stop refers to duration",
        "values_list": [
            "races.year.2011",
            "races.name.australian grand prix"
        ]
    },
    {
        "question": "What is the lap record set by Lewis Hamilton in a Formula_1 race?",
        "SQL": "SELECT T1.time FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'",
        "tables": [
            "laptimes",
            "drivers"
        ],
        "columns": [
            "drivers.surname",
            "laptimes.time",
            "laptimes.driverid",
            "drivers.driverid",
            "drivers.forename"
        ],
        "values": [
            {
                "table": "drivers",
                "column": "forename",
                "value": "Lewis",
                "condition": "="
            },
            {
                "table": "drivers",
                "column": "surname",
                "value": "Hamilton",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "lap recod means the fastest time recorded which refers to time",
        "values_list": [
            "drivers.forename.lewis",
            "drivers.surname.hamilton"
        ]
    },
    {
        "question": "What was the position of the circuits during Lewis Hamilton's fastest lap in a Formula_1 race?",
        "SQL": "SELECT T1.position FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.time ASC LIMIT 1",
        "tables": [
            "laptimes",
            "drivers"
        ],
        "columns": [
            "drivers.surname",
            "laptimes.position",
            "laptimes.time",
            "laptimes.driverid",
            "drivers.driverid",
            "drivers.forename"
        ],
        "values": [
            {
                "table": "drivers",
                "column": "forename",
                "value": "Lewis",
                "condition": "="
            },
            {
                "table": "drivers",
                "column": "surname",
                "value": "Hamilton",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "fastest lap refers to MIN(time)",
        "values_list": [
            "drivers.forename.lewis",
            "drivers.surname.hamilton"
        ]
    },
    {
        "question": "What is the lap record for the Austrian Grand Prix Circuit?",
        "SQL": "WITH fastest_lap_times AS ( SELECT T1.raceId, T1.fastestLapTime FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL) SELECT MIN(fastest_lap_times.fastestLapTime) as lap_record FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix'",
        "tables": [
            "results",
            "circuits",
            "races"
        ],
        "columns": [
            "races.circuitid",
            "races.raceid",
            "results.fastestlaptime",
            "races.name",
            "results.raceid",
            "circuits.circuitid"
        ],
        "values": [
            {
                "table": "races",
                "column": "name",
                "value": "Austrian Grand Prix",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "lap record means the fastest time recorded which refers to time",
        "values_list": [
            "races.name.austrian grand prix"
        ]
    },
    {
        "question": "Please list the lap records for the circuits in Italy.",
        "SQL": "WITH fastest_lap_times AS (SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T1.FastestLapTime as lap_record FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN (SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Italy' ) AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds LIMIT 1",
        "tables": [
            "results",
            "circuits",
            "races"
        ],
        "columns": [
            "races.circuitid",
            "races.raceid",
            "results.fastestlaptime",
            "circuits.country",
            "results.raceid",
            "circuits.circuitid"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "country",
                "value": "Italy",
                "condition": "="
            },
            {
                "table": "circuits",
                "column": "country",
                "value": "Italy",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "lap record means the fastest time recorded which refers to time",
        "values_list": [
            "circuits.country.italy",
            "circuits.country.italy"
        ]
    },
    {
        "question": "In which Formula_1 race was the lap record for the Austrian Grand Prix Circuit set?",
        "SQL": "WITH fastest_lap_times AS ( SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T2.name FROM races AS T2 INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN results AS T1 on T2.raceId = T1.raceId INNER JOIN ( SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix') AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds WHERE T2.name = 'Austrian Grand Prix'",
        "tables": [
            "results",
            "circuits",
            "races"
        ],
        "columns": [
            "races.circuitid",
            "races.raceid",
            "results.fastestlaptime",
            "races.name",
            "results.raceid",
            "circuits.circuitid"
        ],
        "values": [
            {
                "table": "races",
                "column": "name",
                "value": "Austrian Grand Prix",
                "condition": "="
            },
            {
                "table": "races",
                "column": "name",
                "value": "Austrian Grand Prix",
                "condition": "="
            },
            {
                "table": "races",
                "column": "name",
                "value": "Austrian Grand Prix",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "lap record means the fastest time recorded which refers to time",
        "values_list": [
            "races.name.austrian grand prix",
            "races.name.austrian grand prix",
            "races.name.austrian grand prix"
        ]
    },
    {
        "question": "In the race a driver set the lap record for the Austrian Grand Prix Circuit, how long did he spent at the pit stop at that same race?",
        "SQL": "WITH fastest_lap_times AS ( SELECT T1.raceId, T1.driverId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL), lap_record_race AS ( SELECT T1.raceId, T1.driverId FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN ( SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix') AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds WHERE T2.name = 'Austrian Grand Prix') SELECT T4.duration FROM lap_record_race INNER JOIN pitStops AS T4 on lap_record_race.raceId = T4.raceId AND lap_record_race.driverId = T4.driverId",
        "tables": [
            "results",
            "circuits",
            "pitstops",
            "races"
        ],
        "columns": [
            "races.circuitid",
            "races.raceid",
            "pitstops.driverid",
            "pitstops.duration",
            "results.fastestlaptime",
            "races.name",
            "results.raceid",
            "circuits.circuitid",
            "pitstops.min_time_in_seconds",
            "pitstops.raceid",
            "results.driverid"
        ],
        "values": [
            {
                "table": "races",
                "column": "name",
                "value": "Austrian Grand Prix",
                "condition": "="
            },
            {
                "table": "races",
                "column": "name",
                "value": "Austrian Grand Prix",
                "condition": "="
            },
            {
                "table": "races",
                "column": "name",
                "value": "Austrian Grand Prix",
                "condition": "="
            },
            {
                "table": "races",
                "column": "name",
                "value": "Austrian Grand Prix",
                "condition": "="
            },
            {
                "table": "races",
                "column": "name",
                "value": "Austrian Grand Prix",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "lap record means the fastest time recorded which refers to time, how long spent at pitstop refers to duration",
        "values_list": [
            "races.name.austrian grand prix",
            "races.name.austrian grand prix",
            "races.name.austrian grand prix",
            "races.name.austrian grand prix",
            "races.name.austrian grand prix"
        ]
    },
    {
        "question": "What was the average time in milliseconds Lewis Hamilton spent at a pit stop during Formula_1 races?",
        "SQL": "SELECT AVG(milliseconds) FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'",
        "tables": [
            "pitstops",
            "drivers"
        ],
        "columns": [
            "drivers.forename",
            "drivers.driverid",
            "drivers.surname",
            "pitstops.driverid"
        ],
        "values": [
            {
                "table": "drivers",
                "column": "forename",
                "value": "Lewis",
                "condition": "="
            },
            {
                "table": "drivers",
                "column": "surname",
                "value": "Hamilton",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "average time in milliseconds spent at pit stop refers to AVG(milliseconds)",
        "values_list": [
            "drivers.forename.lewis",
            "drivers.surname.hamilton"
        ]
    },
    {
        "question": "What is the average lap time in milliseconds of all the lap records set on the various circuits in Italy?",
        "SQL": "SELECT CAST(SUM(T1.milliseconds) AS REAL) / COUNT(T1.lap) FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Italy'",
        "tables": [
            "laptimes",
            "circuits",
            "races"
        ],
        "columns": [
            "races.circuitid",
            "races.raceid",
            "laptimes.raceid",
            "circuits.country",
            "laptimes.milliseconds",
            "circuits.circuitid",
            "laptimes.lap"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "country",
                "value": "Italy",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "average = AVG(milliseconds)",
        "values_list": [
            "circuits.country.italy"
        ]
    },
    {
        "question": "Calculate the percentage of players who prefer left foot, who were born between 1987 and 1992.",
        "SQL": "SELECT CAST(COUNT(CASE WHEN t2.preferred_foot = 'left' THEN t1.id ELSE NULL END) AS REAL) * 100 / COUNT(t1.id) percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) BETWEEN '1987' AND '1992'",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player_attributes.player_api_id",
            "player.birthday",
            "player.id",
            "player_attributes.preferred_foot",
            "player.player_api_id"
        ],
        "values": [
            {
                "table": "player_attributes",
                "column": "preferred_foot",
                "value": "left",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "players who prefer left foot refers to preferred_foot = 'left'; percentage of players who prefer left foot = DIVIDE(MULTIPLY((SUM(preferred_foot = 'left'), 100)), COUNT(player_fifa_api_id)); born between 1987 and 1992 refers to YEAR(birthday) BETWEEN '1987' AND '1992';",
        "values_list": [
            "player_attributes.preferred_foot.left"
        ]
    },
    {
        "question": "Find the average number of long-shot done by Ahmed Samir Farag.",
        "SQL": "SELECT CAST(SUM(t2.long_shots) AS REAL) / COUNT(t2.`date`) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ahmed Samir Farag'",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player.player_name",
            "player_attributes.player_api_id",
            "player_attributes.long_shots",
            "player_attributes.date",
            "player.player_api_id"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Ahmed Samir Farag",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "average number of long shot = DIVIDE(SUM(long_shots), COUNT(player_fifa_api_id));",
        "values_list": [
            "player.player_name.ahmed samir farag"
        ]
    },
    {
        "question": "For the teams with normal build-up play dribbling class in 2014, List the names of the teams with less than average chance creation passing, in descending order of chance creation passing.",
        "SQL": "SELECT t3.team_long_name FROM Team AS t3 INNER JOIN Team_Attributes AS t4 ON t3.team_api_id = t4.team_api_id WHERE t4.buildUpPlayDribblingClass = 'Normal' AND t4.chanceCreationPassing < ( SELECT CAST(SUM(t2.chanceCreationPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlayDribblingClass = 'Normal' AND SUBSTR(t2.`date`, 1, 4) = '2014') ORDER BY t4.chanceCreationPassing DESC",
        "tables": [
            "team_attributes",
            "team"
        ],
        "columns": [
            "team.team_api_id",
            "team_attributes.date",
            "team_attributes.team_api_id",
            "team_attributes.chancecreationpassing",
            "team_attributes.buildupplaydribblingclass",
            "team.id",
            "team.team_long_name"
        ],
        "values": [
            {
                "table": "team_attributes",
                "column": "buildupplaydribblingclass",
                "value": "Normal",
                "condition": "="
            },
            {
                "table": "team_attributes",
                "column": "buildupplaydribblingclass",
                "value": "Normal",
                "condition": "="
            },
            {
                "table": "team_attributes",
                "column": "buildupplaydribblingclass",
                "value": "Normal",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "normal build-up play dribbling class refers to buildUpPlayDribblingClass = 'Normal'; in 2014 refers to date > = '2014-01-01 00:00:00' AND date < = '2014-01-31 00:00:00'; names of the teams refers to team_long_name; less than average chance creation passing = DIVIDE(SUM(chanceCreationPassing), COUNT(id)) > chanceCreationPassing;",
        "values_list": [
            "team_attributes.buildupplaydribblingclass.normal",
            "team_attributes.buildupplaydribblingclass.normal",
            "team_attributes.buildupplaydribblingclass.normal"
        ]
    },
    {
        "question": "What is the short name of the football team Queens Park Rangers?",
        "SQL": "SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers'",
        "tables": [
            "team"
        ],
        "columns": [
            "team.team_short_name",
            "team.team_long_name"
        ],
        "values": [
            {
                "table": "team",
                "column": "team_long_name",
                "value": "Queens Park Rangers",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "short name of the football team refers to team_short_name; Queens Park Rangers refers to team_long_name = 'Queens Park Rangers';",
        "values_list": [
            "team.team_long_name.queens park rangers"
        ]
    },
    {
        "question": "What is the attacking work rate of the football playerr Franco Zennaro?",
        "SQL": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Franco Zennaro'",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player.player_name",
            "player_attributes.player_api_id",
            "player_attributes.attacking_work_rate",
            "player.player_api_id"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Franco Zennaro",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "player.player_name.franco zennaro"
        ]
    },
    {
        "question": "What is the ADO Den Haag team freedom of movement in the 1st two thirds of the pitch?",
        "SQL": "SELECT DISTINCT t2.buildUpPlayPositioningClass FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.team_long_name = 'ADO Den Haag'",
        "tables": [
            "team_attributes",
            "team"
        ],
        "columns": [
            "team_attributes.team_fifa_api_id",
            "team.team_fifa_api_id",
            "team_attributes.buildupplaypositioningclass",
            "team.team_long_name"
        ],
        "values": [
            {
                "table": "team",
                "column": "team_long_name",
                "value": "ADO Den Haag",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "ADO Den Haag refers to team_long_name = 'ADO Den Haag'; freedom of movement in the 1st two thirds of the pitch refers to buildUpPlayPositioningClass;",
        "values_list": [
            "team.team_long_name.ado den haag"
        ]
    },
    {
        "question": "What is the football player Francois Affolter header's finishing rate on 18/09/2014?",
        "SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Francois Affolter' AND SUBSTR(t2.`date`, 1, 10) = '2014-09-18'",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player.player_name",
            "player_attributes.player_api_id",
            "player_attributes.heading_accuracy",
            "player_attributes.date",
            "player.player_api_id"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Francois Affolter",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "header's finishing rate refers to heading_accuracy; on 18/09/2014 refers to date = '2014-09-18 00:00:00';",
        "values_list": [
            "player.player_name.francois affolter"
        ]
    },
    {
        "question": "What is the overall rating of the football player Gabriel Tamas in year 2011?",
        "SQL": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Gabriel Tamas' AND strftime('%Y', t2.date) = '2011'",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player.player_name",
            "player_attributes.player_api_id",
            "player_attributes.overall_rating",
            "player_attributes.date",
            "player.player_api_id"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Gabriel Tamas",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "in year 2011 refers to strftime('%Y', date) = '2011';",
        "values_list": [
            "player.player_name.gabriel tamas"
        ]
    },
    {
        "question": "How many matches in the 2015/2016 season were held in Scotland Premier League\n?",
        "SQL": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2015/2016' AND t1.name = 'Scotland Premier League'",
        "tables": [
            "league",
            "match"
        ],
        "columns": [
            "league.name",
            "league.id",
            "match.id",
            "match.season",
            "match.league_id"
        ],
        "values": [
            {
                "table": "match",
                "column": "season",
                "value": "2015/2016",
                "condition": "="
            },
            {
                "table": "league",
                "column": "name",
                "value": "Scotland Premier League",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "Scotland Premier League refers to League.name = 'Scotland Premier League';",
        "values_list": [
            "match.season.2015/2016",
            "league.name.scotland premier league"
        ]
    },
    {
        "question": "Among all the players whose weight is under 130, how many of them preferred foot in attacking is left?",
        "SQL": "SELECT COUNT(DISTINCT t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.weight < 130 AND t2.preferred_foot = 'left'",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player_attributes.player_api_id",
            "player.id",
            "player_attributes.preferred_foot",
            "player.player_api_id",
            "player.weight"
        ],
        "values": [
            {
                "table": "player",
                "column": "weight",
                "value": "130",
                "condition": "<"
            },
            {
                "table": "player_attributes",
                "column": "preferred_foot",
                "value": "left",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "weight < 130; preferred foot in attacking refers to preferred_foot; preferred_foot = 'left';",
        "values_list": [
            "player.weight.130",
            "player_attributes.preferred_foot.left"
        ]
    },
    {
        "question": "List the football teams that has a chance creation passing class of Risky. Inidcate its short name only.",
        "SQL": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.chanceCreationPassingClass = 'Risky'",
        "tables": [
            "team_attributes",
            "team"
        ],
        "columns": [
            "team.team_api_id",
            "team.team_short_name",
            "team_attributes.team_api_id",
            "team_attributes.chancecreationpassingclass"
        ],
        "values": [
            {
                "table": "team_attributes",
                "column": "chancecreationpassingclass",
                "value": "Risky",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "chance creation passing class refers to chanceCreationPassingClass; chanceCreationPassingClass = 'Risky'; short name refers to team_short_name;",
        "values_list": [
            "team_attributes.chancecreationpassingclass.risky"
        ]
    },
    {
        "question": "What is the defensive work rate of the football player David Wilson\n?",
        "SQL": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'David Wilson'",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player.player_name",
            "player_attributes.player_api_id",
            "player_attributes.defensive_work_rate",
            "player.player_api_id"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "David Wilson",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "player.player_name.david wilson"
        ]
    },
    {
        "question": "What is the name of the football league in the country of Netherlands?",
        "SQL": "SELECT t2.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Netherlands'",
        "tables": [
            "league",
            "country"
        ],
        "columns": [
            "country.name",
            "country.id",
            "league.country_id",
            "league.name"
        ],
        "values": [
            {
                "table": "country",
                "column": "name",
                "value": "Netherlands",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "name of the football league refers to League.name;",
        "values_list": [
            "country.name.netherlands"
        ]
    },
    {
        "question": "Calculate the average home team goal in the 2010/2011 season in the country of Poland.",
        "SQL": "SELECT CAST(SUM(t2.home_team_goal) AS REAL) / COUNT(t2.id) FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Poland' AND t2.season = '2010/2011'",
        "tables": [
            "match",
            "country"
        ],
        "columns": [
            "country.name",
            "match.home_team_goal",
            "country.id",
            "match.id",
            "match.country_id",
            "match.season"
        ],
        "values": [
            {
                "table": "country",
                "column": "name",
                "value": "Poland",
                "condition": "="
            },
            {
                "table": "match",
                "column": "season",
                "value": "2010/2011",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "average home team goal = AVG(home_team_goal)= SUM(home_team_goal) / COUNT(DISTINCT Match.id) WHERE name = 'Poland' and season = '2010/2011';",
        "values_list": [
            "country.name.poland",
            "match.season.2010/2011"
        ]
    },
    {
        "question": "What is Aaron Doran's potential score?",
        "SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran'",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player.player_name",
            "player_attributes.player_api_id",
            "player_attributes.potential",
            "player.player_api_id"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Aaron Doran",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "potential score refers to potential;",
        "values_list": [
            "player.player_name.aaron doran"
        ]
    },
    {
        "question": "List out of players whose preferred foot is left.",
        "SQL": "SELECT DISTINCT t1.id, t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.preferred_foot = 'left'",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player.player_name",
            "player_attributes.player_api_id",
            "player.id",
            "player_attributes.preferred_foot",
            "player.player_api_id"
        ],
        "values": [
            {
                "table": "player_attributes",
                "column": "preferred_foot",
                "value": "left",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "preferred_foot = 'left';",
        "values_list": [
            "player_attributes.preferred_foot.left"
        ]
    },
    {
        "question": "Please list all team names which the speed class is fast.",
        "SQL": "SELECT DISTINCT t1.team_long_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeedClass = 'Fast'",
        "tables": [
            "team_attributes",
            "team"
        ],
        "columns": [
            "team.team_api_id",
            "team.team_long_name",
            "team_attributes.buildupplayspeedclass",
            "team_attributes.team_api_id"
        ],
        "values": [
            {
                "table": "team_attributes",
                "column": "buildupplayspeedclass",
                "value": "Fast",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "team names refers to team_long_name; speed class refers to buildUpPlaySpeedClass; buildUpPlaySpeedClass = 'Fast';",
        "values_list": [
            "team_attributes.buildupplayspeedclass.fast"
        ]
    },
    {
        "question": "What is the passing class of CLB team?",
        "SQL": "SELECT DISTINCT t2.buildUpPlayPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_short_name = 'CLB'",
        "tables": [
            "team_attributes",
            "team"
        ],
        "columns": [
            "team.team_api_id",
            "team.team_short_name",
            "team_attributes.buildupplaypassingclass",
            "team_attributes.team_api_id"
        ],
        "values": [
            {
                "table": "team",
                "column": "team_short_name",
                "value": "CLB",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "passing class refers to buildUpPlayPassingClass; CLB refers to team_short_name = 'CLB';",
        "values_list": [
            "team.team_short_name.clb"
        ]
    },
    {
        "question": "Which country is the league Italy Serie A from?",
        "SQL": "SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'Italy Serie A'",
        "tables": [
            "league",
            "country"
        ],
        "columns": [
            "country.name",
            "league.country_id",
            "league.name",
            "country.id"
        ],
        "values": [
            {
                "table": "league",
                "column": "name",
                "value": "Italy Serie A",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "Italy Serie A from refers to League.name = 'Italy Serie A';",
        "values_list": [
            "league.name.italy serie a"
        ]
    },
    {
        "question": "What is the average overall rating of the football player Aaron Doran?",
        "SQL": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran'",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player.player_name",
            "player_attributes.player_api_id",
            "player_attributes.overall_rating",
            "player_attributes.id",
            "player.player_api_id"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Aaron Doran",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "average overall rating = AVG(overall_rating);",
        "values_list": [
            "player.player_name.aaron doran"
        ]
    },
    {
        "question": "How many matches were held in the league Germany 1. Bundesliga\nfrom August to October 2008?",
        "SQL": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Germany 1. Bundesliga' AND SUBSTR(t2.`date`, 1, 7) BETWEEN '2008-08' AND '2008-10'",
        "tables": [
            "league",
            "match"
        ],
        "columns": [
            "match.date",
            "league.name",
            "league.id",
            "match.id",
            "match.league_id"
        ],
        "values": [
            {
                "table": "league",
                "column": "name",
                "value": "Germany 1. Bundesliga",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "Germany 1. Bundesliga refers to League.name = 'Germany 1. Bundesliga'; from August to October 2008 refers to strftime('%Y-%m', date) BETWEEN '2008-08' AND '2008-10';",
        "values_list": [
            "league.name.germany 1. bundesliga"
        ]
    },
    {
        "question": "What is the difference of the average ball control score between Abdou Diallo and Aaron Appindangoye\n?",
        "SQL": "SELECT CAST(SUM(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.id ELSE NULL END) - CAST(SUM(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.id ELSE NULL END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player.player_name",
            "player_attributes.player_api_id",
            "player_attributes.ball_control",
            "player_attributes.id",
            "player.player_api_id"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Abdou Diallo",
                "condition": "="
            },
            {
                "table": "player",
                "column": "player_name",
                "value": "Aaron Appindangoye",
                "condition": "="
            },
            {
                "table": "player",
                "column": "player_name",
                "value": "Abdou Diallo",
                "condition": "="
            },
            {
                "table": "player",
                "column": "player_name",
                "value": "Aaron Appindangoye",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "difference of the average ball control = SUBTRACT(AVG(ball_control WHERE player_name = 'Abdou Diallo'), AVG(ball_control WHERE player_name = 'Aaron Appindangoye')); AVG(ball_control WHERE player_name = 'XX XX') = SUM(CASE WHEN player_name = 'XX XX' THEN ball_control ELSE 0 END) / COUNT(CASE WHEN player_name = 'XX XX' THEN id ELSE NULL END)",
        "values_list": [
            "player.player_name.abdou diallo",
            "player.player_name.aaron appindangoye",
            "player.player_name.abdou diallo",
            "player.player_name.aaron appindangoye"
        ]
    },
    {
        "question": "What's the long name for the team GEN?",
        "SQL": "SELECT team_long_name FROM Team WHERE team_short_name = 'GEN'",
        "tables": [
            "team"
        ],
        "columns": [
            "team.team_short_name",
            "team.team_long_name"
        ],
        "values": [
            {
                "table": "team",
                "column": "team_short_name",
                "value": "GEN",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "long name for the team refers to team_long_name; team_short_name = 'GEN';",
        "values_list": [
            "team.team_short_name.gen"
        ]
    },
    {
        "question": "Which player is older, Aaron Lennon or Abdelaziz Barrada?",
        "SQL": "SELECT player_name FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday ASC LIMIT 1",
        "tables": [
            "player"
        ],
        "columns": [
            "player.player_name",
            "player.birthday"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Aaron Lennon"
            },
            {
                "table": "player",
                "column": "player_name",
                "value": "Abdelaziz Barrada"
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "The larger the birthday value, the younger the person is, and vice versa;",
        "values_list": [
            "player.player_name.aaron lennon",
            "player.player_name.abdelaziz barrada"
        ]
    },
    {
        "question": "Which country is the Belgium Jupiler League from?",
        "SQL": "SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'Belgium Jupiler League'",
        "tables": [
            "league",
            "country"
        ],
        "columns": [
            "country.name",
            "league.country_id",
            "league.name",
            "country.id"
        ],
        "values": [
            {
                "table": "league",
                "column": "name",
                "value": "Belgium Jupiler League",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "Belgium Jupiler League refers to League.name = 'Belgium Jupiler League';",
        "values_list": [
            "league.name.belgium jupiler league"
        ]
    },
    {
        "question": "Please list the leagues from Germany.",
        "SQL": "SELECT t2.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Germany'",
        "tables": [
            "league",
            "country"
        ],
        "columns": [
            "country.name",
            "country.id",
            "league.country_id",
            "league.name"
        ],
        "values": [
            {
                "table": "country",
                "column": "name",
                "value": "Germany",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "Germany refers to Country.name = 'Germany';",
        "values_list": [
            "country.name.germany"
        ]
    },
    {
        "question": "Which of these players performs the best in crossing actions, Alexis, Ariel Borysiuk or Arouna Kone?",
        "SQL": "SELECT t1.player_name, t2.crossing FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY t2.crossing DESC LIMIT 1",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player.player_name",
            "player_attributes.player_api_id",
            "player.player_api_id",
            "player_attributes.crossing"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Alexis"
            },
            {
                "table": "player",
                "column": "player_name",
                "value": "Ariel Borysiuk"
            },
            {
                "table": "player",
                "column": "player_name",
                "value": "Arouna Kone"
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "player who perform best in crossing actions refers to MAX(crossing);",
        "values_list": [
            "player.player_name.alexis",
            "player.player_name.ariel borysiuk",
            "player.player_name.arouna kone"
        ]
    },
    {
        "question": "What's the heading accuracy of Ariel Borysiuk?",
        "SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ariel Borysiuk'",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player_attributes.heading_accuracy",
            "player_attributes.player_api_id",
            "player.player_api_id",
            "player.player_name"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Ariel Borysiuk",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "player.player_name.ariel borysiuk"
        ]
    },
    {
        "question": "How many matches in the 2008/2009 season were held in Belgium?",
        "SQL": "SELECT COUNT(t2.id) FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Belgium' AND t2.season = '2008/2009'",
        "tables": [
            "match",
            "country"
        ],
        "columns": [
            "country.name",
            "country.id",
            "match.id",
            "match.country_id",
            "match.season"
        ],
        "values": [
            {
                "table": "country",
                "column": "name",
                "value": "Belgium",
                "condition": "="
            },
            {
                "table": "match",
                "column": "season",
                "value": "2008/2009",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "Belgium refers to Country.name = 'Belgium';",
        "values_list": [
            "country.name.belgium",
            "match.season.2008/2009"
        ]
    },
    {
        "question": "How many matches were held in the Belgium Jupiler League in April, 2009?",
        "SQL": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Belgium Jupiler League' AND SUBSTR(t2.`date`, 1, 7) = '2009-04'",
        "tables": [
            "league",
            "match"
        ],
        "columns": [
            "match.date",
            "league.name",
            "league.id",
            "match.id",
            "match.league_id"
        ],
        "values": [
            {
                "table": "league",
                "column": "name",
                "value": "Belgium Jupiler League",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "Belgium Jupiler League refers to League.name = 'Belgium Jupiler League'; in April, 2009 refers to SUBSTR(`date`, 1, 7);",
        "values_list": [
            "league.name.belgium jupiler league"
        ]
    },
    {
        "question": "How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel?",
        "SQL": "SELECT (SUM(CASE WHEN t1.player_name = 'Ariel Borysiuk' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player.player_name",
            "player_attributes.player_api_id",
            "player.player_api_id",
            "player_attributes.overall_rating"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Paulin Puel",
                "condition": "="
            },
            {
                "table": "player",
                "column": "player_name",
                "value": "Paulin Puel",
                "condition": "="
            },
            {
                "table": "player",
                "column": "player_name",
                "value": "Ariel Borysiuk",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "how much higher in percentage = MULTIPLY(DIVIDE(SUBTRACT(overall_rating WHERE player_name = 'Ariel Borysiuk', overall_rating WHERE player_name = 'Paulin Puel'), overall_rating WHERE player_name = 'Paulin Puel'), 100);",
        "values_list": [
            "player.player_name.paulin puel",
            "player.player_name.paulin puel",
            "player.player_name.ariel borysiuk"
        ]
    },
    {
        "question": "How much is the average build up play speed of the Heart of Midlothian team?",
        "SQL": "SELECT CAST(SUM(t2.buildUpPlaySpeed) AS REAL) / COUNT(t2.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Heart of Midlothian'",
        "tables": [
            "team_attributes",
            "team"
        ],
        "columns": [
            "team.team_api_id",
            "team_attributes.team_api_id",
            "team_attributes.id",
            "team.team_long_name",
            "team_attributes.buildupplayspeed"
        ],
        "values": [
            {
                "table": "team",
                "column": "team_long_name",
                "value": "Heart of Midlothian",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "Heart of Midlothian refers to team_long_name = 'Heart of Midlothian'; average build up play speed refers to\u00a0 AVG(buildUpPlaySpeed)",
        "values_list": [
            "team.team_long_name.heart of midlothian"
        ]
    },
    {
        "question": "Calculate the average overall rating of Pietro Marino.",
        "SQL": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Pietro Marino'",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player.player_name",
            "player_attributes.player_api_id",
            "player_attributes.overall_rating",
            "player_attributes.id",
            "player.player_api_id"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Pietro Marino",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "Pietro Marino refers to player_name = 'Pietro Marino'; average overall rating AVG(T1.overall_rating)",
        "values_list": [
            "player.player_name.pietro marino"
        ]
    },
    {
        "question": "What is Aaron Lennox's total crossing score?",
        "SQL": "SELECT SUM(t2.crossing) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Lennox'",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player.player_name",
            "player_attributes.player_api_id",
            "player.player_api_id",
            "player_attributes.crossing"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Aaron Lennox",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "Aaron Lennox's refers to T2.player_name = 'Aaron Lennox'; total crossing score refers to SUM(crossing)",
        "values_list": [
            "player.player_name.aaron lennox"
        ]
    },
    {
        "question": "What is Ajax's highest chance creation passing score and what is it classified as?",
        "SQL": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Ajax' ORDER BY t2.chanceCreationPassing DESC LIMIT 1",
        "tables": [
            "team_attributes",
            "team"
        ],
        "columns": [
            "team.team_api_id",
            "team_attributes.chancecreationpassing",
            "team_attributes.team_api_id",
            "team_attributes.chancecreationpassingclass",
            "team.team_long_name"
        ],
        "values": [
            {
                "table": "team",
                "column": "team_long_name",
                "value": "Ajax",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "Ajax's refers to team_long_name = 'Ajax'; chance creation passing score refers to MAX(chanceCreationPassing); classified refer to chanceCreationPassingClass",
        "values_list": [
            "team.team_long_name.ajax"
        ]
    },
    {
        "question": "Which foot is preferred by Abdou Diallo?",
        "SQL": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abdou Diallo'",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player.player_name",
            "player_attributes.player_api_id",
            "player.player_api_id",
            "player_attributes.preferred_foot"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Abdou Diallo",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "Abdou Diallo refers to player_name = 'Abdou Diallo'; foot is preferred refers to preferred_foot",
        "values_list": [
            "player.player_name.abdou diallo"
        ]
    },
    {
        "question": "What is the highest overall rating received by Dorlan Pabon?",
        "SQL": "SELECT MAX(t2.overall_rating) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Dorlan Pabon'",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player.player_name",
            "player_attributes.overall_rating",
            "player.player_api_id",
            "player_attributes.player_api_id"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Dorlan Pabon",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "Dorlan Pabon refers to T2.player_name = 'Dorlan Pabon'; highest overall rating refers to MAX(overall_rating)",
        "values_list": [
            "player.player_name.dorlan pabon"
        ]
    },
    {
        "question": "What is the average number of goals made by Parma as the away team while playing in Italy?",
        "SQL": "SELECT CAST(SUM(T1.away_team_goal) AS REAL) / COUNT(T1.id) FROM \"Match\" AS T1 INNER JOIN TEAM AS T2 ON T1.away_team_api_id = T2.team_api_id INNER JOIN Country AS T3 ON T1.country_id = T3.id WHERE T2.team_long_name = 'Parma' AND T3.name = 'Italy'",
        "tables": [
            "match",
            "country",
            "team"
        ],
        "columns": [
            "team.team_api_id",
            "country.name",
            "country.id",
            "match.id",
            "team.team_long_name",
            "match.country_id",
            "match.away_team_api_id",
            "match.away_team_goal"
        ],
        "values": [
            {
                "table": "team",
                "column": "team_long_name",
                "value": "Parma",
                "condition": "="
            },
            {
                "table": "country",
                "column": "name",
                "value": "Italy",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "Parma refers to team_long_name = 'Parma'; average number of goals refers to AVG(away_team_goal)",
        "values_list": [
            "team.team_long_name.parma",
            "country.name.italy"
        ]
    },
    {
        "question": "What was the overall rating for Aaron Mooy on 2016/2/4?",
        "SQL": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2016-02-04' AND t1.player_name = 'Aaron Mooy'",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player.player_name",
            "player_attributes.player_api_id",
            "player_attributes.overall_rating",
            "player_attributes.date",
            "player.player_api_id"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Aaron Mooy",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "Aaron Mooy refers to player_name = 'Aaron Mooy'; on 2016/2/4 refers to date LIKE '2016-02-04%';",
        "values_list": [
            "player.player_name.aaron mooy"
        ]
    },
    {
        "question": "What was the potiential for Francesco Parravicini on 2010/8/30?",
        "SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2010-08-30' AND t1.player_name = 'Francesco Parravicini'",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player.player_name",
            "player_attributes.player_api_id",
            "player_attributes.potential",
            "player_attributes.date",
            "player.player_api_id"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Francesco Parravicini",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "Francesco Parravicini refers to player_name = 'Francesco Parravicini'; on 2010/8/30 refers to date = '2010-08-30 00:00:00'",
        "values_list": [
            "player.player_name.francesco parravicini"
        ]
    },
    {
        "question": "Tell the defensive work rate for Kevin Berigaud on 2013/2/22.",
        "SQL": "SELECT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2013-02-22' AND t1.player_name = 'Kevin Berigaud'",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player.player_name",
            "player.player_fifa_api_id",
            "player_attributes.defensive_work_rate",
            "player_attributes.date",
            "player_attributes.player_fifa_api_id"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Kevin Berigaud",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "Kevin Berigaud refers to player_name = 'Kevin Berigaud'; on 2013/2/22 refers to date = '2013-02-22 00:00:00'",
        "values_list": [
            "player.player_name.kevin berigaud"
        ]
    },
    {
        "question": "When was the first time did Kevin Constant have his highest crossing score? Give the date.",
        "SQL": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Kevin Constant' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player.player_name",
            "player.player_fifa_api_id",
            "player_attributes.crossing",
            "player_attributes.date",
            "player_attributes.player_fifa_api_id"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Kevin Constant",
                "condition": "="
            },
            {
                "table": "player",
                "column": "player_name",
                "value": "Kevin Constant",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)",
        "values_list": [
            "player.player_name.kevin constant",
            "player.player_name.kevin constant"
        ]
    },
    {
        "question": "What was the build up play speed class for \"Willem II\" on 2011/2/22?",
        "SQL": "SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Willem II' AND SUBSTR(t2.`date`, 1, 10) = '2011-02-22'",
        "tables": [
            "team_attributes",
            "team"
        ],
        "columns": [
            "team.team_api_id",
            "team_attributes.date",
            "team_attributes.team_api_id",
            "team_attributes.buildupplayspeedclass",
            "team.team_long_name"
        ],
        "values": [
            {
                "table": "team",
                "column": "team_long_name",
                "value": "Willem II",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "\"Willem II\" refers to team_long_name = 'Willem II'; on 2011/2/22 refers to date = '2012-02-22'",
        "values_list": [
            "team.team_long_name.willem ii"
        ]
    },
    {
        "question": "How was the build up play dribbling class for \"LEI\" on 2015/9/10?",
        "SQL": "SELECT t2.buildUpPlayDribblingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_short_name = 'LEI' AND SUBSTR(t2.`date`, 1, 10) = '2015-09-10'",
        "tables": [
            "team_attributes",
            "team"
        ],
        "columns": [
            "team.team_api_id",
            "team_attributes.date",
            "team_attributes.team_api_id",
            "team_attributes.buildupplaydribblingclass",
            "team.team_short_name"
        ],
        "values": [
            {
                "table": "team",
                "column": "team_short_name",
                "value": "LEI",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "\"LEI\" refers to team_short_name = 'LEI'; on 2015/9/10 refers to\u00a0 date = '2015-09-10 00:00:00'",
        "values_list": [
            "team.team_short_name.lei"
        ]
    },
    {
        "question": "State the chance creation passing class for \"PEC Zwolle\" on 2013/9/20.",
        "SQL": "SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'PEC Zwolle' AND SUBSTR(t2.`date`, 1, 10) = '2013-09-20'",
        "tables": [
            "team_attributes",
            "team"
        ],
        "columns": [
            "team.team_api_id",
            "team_attributes.date",
            "team_attributes.team_api_id",
            "team_attributes.chancecreationpassingclass",
            "team.team_long_name"
        ],
        "values": [
            {
                "table": "team",
                "column": "team_long_name",
                "value": "PEC Zwolle",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "\"PEC Zwolle\" refers to team_long_name = 'PEC Zwolle'; on 2013/9/20 refers to date = '2013-09-20 00:00:00'",
        "values_list": [
            "team.team_long_name.pec zwolle"
        ]
    },
    {
        "question": "What was the chance creation crossing class for \"Hull City\" on 2010/2/22?",
        "SQL": "SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hull City' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'",
        "tables": [
            "team_attributes",
            "team"
        ],
        "columns": [
            "team.team_api_id",
            "team_attributes.date",
            "team_attributes.team_api_id",
            "team.team_long_name",
            "team_attributes.chancecreationcrossingclass"
        ],
        "values": [
            {
                "table": "team",
                "column": "team_long_name",
                "value": "Hull City",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "\"Hull City\" refers to team_long_name = 'Hull City'; on 2010/2/22 refers to date = '2010-02-22 00:00:00'",
        "values_list": [
            "team.team_long_name.hull city"
        ]
    },
    {
        "question": "What was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21?",
        "SQL": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Marko Arnautovic' AND SUBSTR(t2.`date`, 1, 10) BETWEEN '2007-02-22' AND '2016-04-21'",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player.player_name",
            "player.player_fifa_api_id",
            "player_attributes.overall_rating",
            "player_attributes.id",
            "player_attributes.date",
            "player_attributes.player_fifa_api_id"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Marko Arnautovic",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "average overall rating refers to avg(overall_rating); Marko Arnautovic refers to player_name = 'Marko Arnautovic'; from 2007/2/22 to 2016/4/21 refers to the first 10 characters of date BETWEEN '2007-02-22' and '2016-04-21'",
        "values_list": [
            "player.player_name.marko arnautovic"
        ]
    },
    {
        "question": "What percentage is Landon Donovan's overall rating higher than Jordan Bowery on 2013/7/12?",
        "SQL": "SELECT (SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Jordan Bowery' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) LvsJ_percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2013-07-12'",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player.player_name",
            "player.player_fifa_api_id",
            "player_attributes.overall_rating",
            "player_attributes.date",
            "player_attributes.player_fifa_api_id"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Landon Donovan",
                "condition": "="
            },
            {
                "table": "player",
                "column": "player_name",
                "value": "Jordan Bowery",
                "condition": "="
            },
            {
                "table": "player",
                "column": "player_name",
                "value": "Landon Donovan",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "Landon Donovan's refers to player_name = 'Landon Donovan'; Jordan Bowery refers to player_name = 'Jordan Bowery'; percentage refers to DIVIDE(SUBTRACT(player_name = 'Landon Donovan' overall_rating; player_name = 'Jordan Bowery' overall_rating), player_name = 'Landon Donovan' overall_rating)*100",
        "values_list": [
            "player.player_name.landon donovan",
            "player.player_name.jordan bowery",
            "player.player_name.landon donovan"
        ]
    },
    {
        "question": "How many home team goal have been scored by Aaron Lennon?",
        "SQL": "SELECT SUM(t2.home_team_goal) FROM Player AS t1 INNER JOIN match AS t2 ON t1.player_api_id = t2.away_player_9 WHERE t1.player_name = 'Aaron Lennon'",
        "tables": [
            "match",
            "player"
        ],
        "columns": [
            "player.player_name",
            "match.home_team_goal",
            "player.player_api_id",
            "match.away_player_9"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Aaron Lennon",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "Aaron Lennon refers to player_name = 'Aaron Lennon'",
        "values_list": [
            "player.player_name.aaron lennon"
        ]
    },
    {
        "question": "Sum up the away team goal scored by both Daan Smith and Filipe Ferreira.",
        "SQL": "SELECT SUM(t2.away_team_goal) FROM Player AS t1 INNER JOIN match AS t2 ON t1.player_api_id = t2.away_player_5 WHERE t1.player_name IN ('Daan Smith', 'Filipe Ferreira')",
        "tables": [
            "match",
            "player"
        ],
        "columns": [
            "match.away_player_5",
            "match.away_team_goal",
            "player.player_api_id",
            "player.player_name"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Daan Smith"
            },
            {
                "table": "player",
                "column": "player_name",
                "value": "Filipe Ferreira"
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "Daan Smith refers to player_name = 'Daan Smith'; Filipe Ferreira refers to player_name = 'Filipe Ferreira'",
        "values_list": [
            "player.player_name.daan smith",
            "player.player_name.filipe ferreira"
        ]
    },
    {
        "question": "State the name of players who came from Belgium.",
        "SQL": "SELECT t3.player_name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id WHERE t1.name = 'Belgium'",
        "tables": [
            "match",
            "player",
            "country"
        ],
        "columns": [
            "player.player_name",
            "match.home_player_1",
            "country.name",
            "country.id",
            "match.country_id",
            "player.player_api_id"
        ],
        "values": [
            {
                "table": "country",
                "column": "name",
                "value": "Belgium",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "name of players refers to player_name; Belgium is name of country",
        "values_list": [
            "country.name.belgium"
        ]
    },
    {
        "question": "List down the long name for slow speed class team.",
        "SQL": "SELECT DISTINCT t1.team_long_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeedClass = 'Slow'",
        "tables": [
            "team_attributes",
            "team"
        ],
        "columns": [
            "team.team_api_id",
            "team.team_long_name",
            "team_attributes.buildupplayspeedclass",
            "team_attributes.team_api_id"
        ],
        "values": [
            {
                "table": "team_attributes",
                "column": "buildupplayspeedclass",
                "value": "Slow",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "slow speed class refers to buildUpPlaySpeedClass = 'Slow'; long name refers to team_long_name",
        "values_list": [
            "team_attributes.buildupplayspeedclass.slow"
        ]
    },
    {
        "question": "What are the short name of team who played safe while creating chance of passing?",
        "SQL": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.chanceCreationPassingClass = 'Safe'",
        "tables": [
            "team_attributes",
            "team"
        ],
        "columns": [
            "team.team_api_id",
            "team.team_short_name",
            "team_attributes.team_api_id",
            "team_attributes.chancecreationpassingclass"
        ],
        "values": [
            {
                "table": "team_attributes",
                "column": "chancecreationpassingclass",
                "value": "Safe",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "played safe while creating chance of passing refers to chanceCreationPassingClass = 'Safe'; short name of team refers to team_short_name",
        "values_list": [
            "team_attributes.chancecreationpassingclass.safe"
        ]
    },
    {
        "question": "What is the average heights of Italy players?",
        "SQL": "SELECT CAST(SUM(T1.height) AS REAL) / COUNT(T1.id) FROM Player AS T1 INNER JOIN Match AS T2 ON T1.id = T2.id INNER JOIN Country AS T3 ON T2.country_id = T3.ID WHERE T3.NAME = 'Italy'",
        "tables": [
            "match",
            "player",
            "country"
        ],
        "columns": [
            "country.name",
            "country.id",
            "match.id",
            "match.country_id",
            "player.id",
            "player.height"
        ],
        "values": [
            {
                "table": "country",
                "column": "name",
                "value": "Italy",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "average heights refers to Avg(height); Italy is name of country",
        "values_list": [
            "country.name.italy"
        ]
    },
    {
        "question": "Please provide top five football players' IDs who are among the lowest potential players and prefer to use the right foot when attacking.",
        "SQL": "SELECT id FROM Player_Attributes WHERE preferred_foot = 'right' ORDER BY potential DESC LIMIT 5",
        "tables": [
            "player_attributes"
        ],
        "columns": [
            "player_attributes.potential",
            "player_attributes.id",
            "player_attributes.preferred_foot"
        ],
        "values": [
            {
                "table": "player_attributes",
                "column": "preferred_foot",
                "value": "right",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "lowest potential players refers to MIN(potential); prefer to use the right foot when attacking refers to preferred_foot = 'right'",
        "values_list": [
            "player_attributes.preferred_foot.right"
        ]
    },
    {
        "question": "How many players had the highest potential score for crossing that preferred to use their left foots while attacking?",
        "SQL": "SELECT COUNT(t1.id) FROM Player_Attributes AS t1 WHERE t1.preferred_foot = 'left' AND t1.crossing = ( SELECT MAX(crossing) FROM Player_Attributes)",
        "tables": [
            "player_attributes"
        ],
        "columns": [
            "player_attributes.id",
            "player_attributes.preferred_foot",
            "player_attributes.crossing"
        ],
        "values": [
            {
                "table": "player_attributes",
                "column": "preferred_foot",
                "value": "left",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "highest potential score for crossing refers to MAX(crossing); preferred to use their left foots while attacking refers to preferred_foot = 'left'",
        "values_list": [
            "player_attributes.preferred_foot.left"
        ]
    },
    {
        "question": "In what country did the Poland Ekstraklasa take place?",
        "SQL": "SELECT name FROM Country WHERE id IN ( SELECT country_id FROM League WHERE name = 'Poland Ekstraklasa' )",
        "tables": [
            "league",
            "country"
        ],
        "columns": [],
        "values": [
            {
                "table": "",
                "column": "name",
                "value": "Poland Ekstraklasa",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            ".name.poland ekstraklasa"
        ]
    },
    {
        "question": "What are Alexis Blin's sprint speed, agility, and acceleration scores?",
        "SQL": "SELECT sprint_speed, agility, acceleration FROM Player_Attributes WHERE player_api_id IN ( SELECT player_api_id FROM Player WHERE player_name = 'Alexis Blin' )",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [],
        "values": [
            {
                "table": "",
                "column": "player_name",
                "value": "Alexis Blin",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "Alexis Blin's refers to player_name = 'Alexis Blin'",
        "values_list": [
            ".player_name.alexis blin"
        ]
    },
    {
        "question": "Does the KSV Cercle Brugge team have a slow, balanced or fast speed class?",
        "SQL": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'KSV Cercle Brugge'",
        "tables": [
            "team_attributes",
            "team"
        ],
        "columns": [
            "team.team_api_id",
            "team.team_long_name",
            "team_attributes.buildupplayspeedclass",
            "team_attributes.team_api_id"
        ],
        "values": [
            {
                "table": "team",
                "column": "team_long_name",
                "value": "KSV Cercle Brugge",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "KSV Cercle Brugge refers to team_long_name = 'KSV Cercle Brugge'; speed class refers to buildUpPlaySpeedClass",
        "values_list": [
            "team.team_long_name.ksv cercle brugge"
        ]
    },
    {
        "question": "What was the highest score of the home team in the Netherlands Eredivisie league?",
        "SQL": "SELECT MAX(t2.home_team_goal) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Netherlands Eredivisie'",
        "tables": [
            "league",
            "match"
        ],
        "columns": [
            "league.id",
            "match.home_team_goal",
            "league.name",
            "match.league_id"
        ],
        "values": [
            {
                "table": "league",
                "column": "name",
                "value": "Netherlands Eredivisie",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "highest score of the home team refers to MAX(home_team_goal)",
        "values_list": [
            "league.name.netherlands eredivisie"
        ]
    },
    {
        "question": "What is the percentage of female patient were born after 1930?",
        "SQL": "SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', Birthday) > '1930' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE SEX = 'F'",
        "tables": [
            "patient"
        ],
        "columns": [
            "patient.birthday",
            "patient.sex"
        ],
        "values": [
            {
                "table": "patient",
                "column": "sex",
                "value": "F",
                "condition": "="
            }
        ],
        "db_id": "thrombosis_prediction",
        "source": "bird_dev",
        "evidence": "female refers to Sex = 'F'; patient who were born after 1930 refers to year(Birthday) > '1930'; calculation = DIVIDE(COUNT(ID) where year(Birthday) > '1930' and SEX = 'F'), (COUNT(ID) where SEX = 'F')",
        "values_list": [
            "patient.sex.f"
        ]
    },
    {
        "question": "How many of the patients with the most serious thrombosis cases examined in 1997 are women?",
        "SQL": "SELECT  COUNT(*) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND STRFTIME('%Y', T2.`Examination Date`) = '1997' AND T2.Thrombosis = 1",
        "tables": [
            "examination",
            "patient"
        ],
        "columns": [
            "patient.sex",
            "examination.id",
            "patient.id",
            "examination.thrombosis",
            "examination.examination date"
        ],
        "values": [
            {
                "table": "examination",
                "column": "thrombosis",
                "value": "1",
                "condition": "="
            },
            {
                "table": "patient",
                "column": "sex",
                "value": "F",
                "condition": "="
            }
        ],
        "db_id": "thrombosis_prediction",
        "source": "bird_dev",
        "evidence": "the most serious thrombosis refers to Thrombosis = '1' (the most severe one); women refers to sex = 'F'",
        "values_list": [
            "examination.thrombosis.1",
            "patient.sex.f"
        ]
    },
    {
        "question": "For the year that concluded on December 31, 1998, how many male patients on average were tested in the lab each month?",
        "SQL": "SELECT CAST(COUNT(T1.ID) AS REAL) / 12 FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T2.Date) = '1998' AND T1.SEX = 'M'",
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "laboratory.date",
            "patient.id",
            "patient.sex",
            "laboratory.id"
        ],
        "values": [
            {
                "table": "patient",
                "column": "sex",
                "value": "M",
                "condition": "="
            }
        ],
        "db_id": "thrombosis_prediction",
        "source": "bird_dev",
        "evidence": "the year that concluded on December 31, 1998 refers to Date BETWEEN '1998-01-01' AND '1998-12-31'; male refers to SEX = 'M'; calculation = DIVIDE(COUNT(ID), 12)",
        "values_list": [
            "patient.sex.m"
        ]
    },
    {
        "question": "The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?",
        "SQL": "SELECT T1.Date, STRFTIME('%Y', T2.`First Date`) - STRFTIME('%Y', T2.Birthday),T2.Birthday FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'SJS' AND T2.Birthday IS NOT NULL ORDER BY T2.Birthday ASC LIMIT 1",
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "laboratory.date",
            "patient.diagnosis",
            "laboratory.id",
            "patient.id",
            "patient.first date",
            "patient.birthday"
        ],
        "values": [
            {
                "table": "patient",
                "column": "diagnosis",
                "value": "SJS",
                "condition": "="
            }
        ],
        "db_id": "thrombosis_prediction",
        "source": "bird_dev",
        "evidence": "The larger the birthday value, the younger the person is, and vice versa; 'SJS' refers to diagnosis; (SUBTRACT(year(`First Date`)), year(Birthday)); age of the patients when they initially arrived at the hospital refers to year(Birthday)",
        "values_list": [
            "patient.diagnosis.sjs"
        ]
    },
    {
        "question": "What was the gender of the first AORTITIS diagnosed patient?",
        "SQL": "SELECT SEX FROM Patient WHERE Diagnosis = 'AORTITIS' AND `First Date` IS NOT NULL ORDER BY `First Date` ASC LIMIT 1",
        "tables": [
            "patient"
        ],
        "columns": [
            "patient.first date",
            "patient.diagnosis",
            "patient.sex"
        ],
        "values": [
            {
                "table": "patient",
                "column": "diagnosis",
                "value": "AORTITIS",
                "condition": "="
            }
        ],
        "db_id": "thrombosis_prediction",
        "source": "bird_dev",
        "evidence": "gender means SEX; 'AORTITIS' refers to Diagnosis;",
        "values_list": [
            "patient.diagnosis.aortitis"
        ]
    },
    {
        "question": "Lists all patients by ID who were diagnosed with Behcet's and had their exams between 01/01/197 and 12/31/1997.",
        "SQL": "SELECT ID FROM Examination WHERE `Examination Date` BETWEEN '1997-01-01' AND '1997-12-31' AND Diagnosis = 'Behcet'",
        "tables": [
            "examination"
        ],
        "columns": [
            "examination.id",
            "examination.diagnosis",
            "examination.examination date"
        ],
        "values": [
            {
                "table": "examination",
                "column": "diagnosis",
                "value": "Behcet",
                "condition": "="
            }
        ],
        "db_id": "thrombosis_prediction",
        "source": "bird_dev",
        "evidence": "'Behcet' refers to diagnosis; exam between 01/01/1997 and 12/31/1997 refers to YEAR(Description) > = '1997-1-1' AND YEAR(Description) < '1998-1-1'",
        "values_list": [
            "examination.diagnosis.behcet"
        ]
    },
    {
        "question": "What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average?",
        "SQL": "SELECT COUNT(*) FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S' AND `aCL IgM` > (SELECT AVG(`aCL IgM`) * 1.2 FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S')",
        "tables": [
            "examination"
        ],
        "columns": [
            "examination.ana pattern",
            "examination.acl igm",
            "examination.thrombosis"
        ],
        "values": [
            {
                "table": "examination",
                "column": "thrombosis",
                "value": "2",
                "condition": "="
            },
            {
                "table": "examination",
                "column": "ana pattern",
                "value": "S",
                "condition": "="
            },
            {
                "table": "",
                "column": "thrombosis",
                "value": "2",
                "condition": "="
            },
            {
                "table": "",
                "column": "ana pattern",
                "value": "S",
                "condition": "="
            },
            {
                "table": "",
                "column": "thrombosis",
                "value": "2",
                "condition": "="
            },
            {
                "table": "",
                "column": "ana pattern",
                "value": "S",
                "condition": "="
            }
        ],
        "db_id": "thrombosis_prediction",
        "source": "bird_dev",
        "evidence": "thrombosis level 2 refers to Thrombosis = 2; ANA pattern of only S refers to ANA = 'S'; average anti-Cardiolip in antibody (IgM) refers to AVG(`aCL IgM`); calculation = MULTIPLY(AVG + AVG, 0.2)",
        "values_list": [
            "examination.thrombosis.2",
            "examination.ana pattern.s",
            ".thrombosis.2",
            ".ana pattern.s",
            ".thrombosis.2",
            ".ana pattern.s"
        ]
    },
    {
        "question": "What percentage of male patients who first presented to the hospital in 1981 were diagnosed with BEHCET?",
        "SQL": "SELECT CAST(SUM(CASE WHEN Diagnosis = 'BEHCET' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Patient WHERE STRFTIME('%Y', `First Date`) = '1981' AND SEX = 'M'",
        "tables": [
            "patient"
        ],
        "columns": [
            "patient.first date",
            "patient.diagnosis",
            "patient.id",
            "patient.sex"
        ],
        "values": [
            {
                "table": "patient",
                "column": "sex",
                "value": "M",
                "condition": "="
            },
            {
                "table": "patient",
                "column": "diagnosis",
                "value": "BEHCET",
                "condition": "="
            }
        ],
        "db_id": "thrombosis_prediction",
        "source": "bird_dev",
        "evidence": "male refers to SEX = 'M'; first presented to the hospital in 1981 refers to YEAR(`FIRST DATE`) = '1981'; BEHCET refers to diagnosis; calculation = DIVIDE(SUM(DIAGNOSIS = 'BEHCET') where YEAR(`FIRST DATE`) = '1981', MULTIPLY(COUNT(YEAR(`FIRST DATE`) = '1981')), 100)",
        "values_list": [
            "patient.sex.m",
            "patient.diagnosis.behcet"
        ]
    },
    {
        "question": "Excluding all P only ANA Pattern patients, how many of the remainder are women born between 1980 and 1989?",
        "SQL": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.`ANA Pattern` != 'P' AND STRFTIME('%Y', T1.Birthday) BETWEEN '1980' AND '1989' AND T1.SEX = 'F'",
        "tables": [
            "examination",
            "patient"
        ],
        "columns": [
            "patient.sex",
            "examination.id",
            "patient.id",
            "examination.ana pattern",
            "patient.birthday"
        ],
        "values": [
            {
                "table": "patient",
                "column": "sex",
                "value": "F",
                "condition": "="
            },
            {
                "table": "examination",
                "column": "ana pattern",
                "value": "P",
                "condition": "!="
            }
        ],
        "db_id": "thrombosis_prediction",
        "source": "bird_dev",
        "evidence": "Excluding all P only ANA Pattern refers to `ANA Pattern`! = 'P'; women refers to SEX = 'F'; born between 1980 and 1989 refers to BIRTHDAY",
        "values_list": [
            "patient.sex.f",
            "examination.ana pattern.p"
        ]
    },
    {
        "question": "What is the average blood albumin level for female patients with a PLT greater than 400 who have been diagnosed with SLE?",
        "SQL": "SELECT AVG(T2.ALB) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT > 400 AND T1.Diagnosis = 'SLE' AND T1.SEX = 'F'",
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.diagnosis",
            "patient.sex",
            "laboratory.id",
            "patient.id",
            "laboratory.plt",
            "laboratory.alb"
        ],
        "values": [
            {
                "table": "patient",
                "column": "sex",
                "value": "F",
                "condition": "="
            },
            {
                "table": "laboratory",
                "column": "plt",
                "value": "400",
                "condition": ">"
            },
            {
                "table": "patient",
                "column": "diagnosis",
                "value": "SLE",
                "condition": "="
            }
        ],
        "db_id": "thrombosis_prediction",
        "source": "bird_dev",
        "evidence": "average blood albumin level refers to AVG(ALB); female refers to SEX = 'F'; PLT greater than 400 refers to PLT > 400; diagnosed with SLE refers to Diagnosis= 'SLE'",
        "values_list": [
            "patient.sex.f",
            "laboratory.plt.400",
            "patient.diagnosis.sle"
        ]
    },
    {
        "question": "What is the most common sign of patients with SLE disease?",
        "SQL": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1",
        "tables": [
            "examination"
        ],
        "columns": [
            "examination.symptoms",
            "examination.diagnosis"
        ],
        "values": [
            {
                "table": "examination",
                "column": "diagnosis",
                "value": "SLE",
                "condition": "="
            }
        ],
        "db_id": "thrombosis_prediction",
        "source": "bird_dev",
        "evidence": "the most common sign refers to MAX(symptoms); 'SLE' refers to diagnosis",
        "values_list": [
            "examination.diagnosis.sle"
        ]
    },
    {
        "question": "How many female patients were given an APS diagnosis?",
        "SQL": "SELECT COUNT(ID) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS'",
        "tables": [
            "patient"
        ],
        "columns": [
            "patient.diagnosis",
            "patient.id",
            "patient.sex"
        ],
        "values": [
            {
                "table": "patient",
                "column": "sex",
                "value": "F",
                "condition": "="
            },
            {
                "table": "patient",
                "column": "diagnosis",
                "value": "APS",
                "condition": "="
            }
        ],
        "db_id": "thrombosis_prediction",
        "source": "bird_dev",
        "evidence": "female refers to SEX = 'F'; APS diagnosis refers to Diagnosis='APS'",
        "values_list": [
            "patient.sex.f",
            "patient.diagnosis.aps"
        ]
    },
    {
        "question": "What proportion of patients who had signs of thrombocytopenia had SLE diagnosed?",
        "SQL": "SELECT CAST(SUM(CASE WHEN Diagnosis = 'SLE' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Examination WHERE Symptoms = 'thrombocytopenia'",
        "tables": [
            "examination"
        ],
        "columns": [
            "examination.id",
            "examination.symptoms",
            "examination.diagnosis"
        ],
        "values": [
            {
                "table": "examination",
                "column": "symptoms",
                "value": "thrombocytopenia",
                "condition": "="
            },
            {
                "table": "examination",
                "column": "diagnosis",
                "value": "SLE",
                "condition": "="
            }
        ],
        "db_id": "thrombosis_prediction",
        "source": "bird_dev",
        "evidence": "thrombocytopenia' refers to symptoms; 'SLE' refers to diagnosis; calculation =  DIVIDE(SUM(DIAGNOSIS LIKE '%ITP%'), SUM(DIAGNOSIS LIKE '%SLE%')) MULTIPLY 100",
        "values_list": [
            "examination.symptoms.thrombocytopenia",
            "examination.diagnosis.sle"
        ]
    },
    {
        "question": "What percentage of patients who were born in 1980 and were diagnosed with RA are women?",
        "SQL": "SELECT CAST(SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Patient WHERE Diagnosis = 'RA' AND STRFTIME('%Y', Birthday) = '1980'",
        "tables": [
            "patient"
        ],
        "columns": [
            "patient.diagnosis",
            "patient.birthday",
            "patient.id",
            "patient.sex"
        ],
        "values": [
            {
                "table": "patient",
                "column": "diagnosis",
                "value": "RA",
                "condition": "="
            },
            {
                "table": "patient",
                "column": "sex",
                "value": "F",
                "condition": "="
            }
        ],
        "db_id": "thrombosis_prediction",
        "source": "bird_dev",
        "evidence": "born in 1980 refers to YEAR(BIRTHDAY) = '1980'; 'RA' refers to Diagnosis='RA' ; women refers to SEX = 'F'; calculation = DIVIDE(SUM(SEX = 'F'), COUNT(SEX)) * 100",
        "values_list": [
            "patient.diagnosis.ra",
            "patient.sex.f"
        ]
    },
    {
        "question": "How many patients who were female got white blood cells that were below 3.5?",
        "SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.WBC < 3.5 AND T1.SEX = 'F'",
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.id",
            "patient.sex",
            "laboratory.id",
            "laboratory.wbc"
        ],
        "values": [
            {
                "table": "laboratory",
                "column": "wbc",
                "value": "3.5",
                "condition": "<"
            },
            {
                "table": "patient",
                "column": "sex",
                "value": "F",
                "condition": "="
            }
        ],
        "db_id": "thrombosis_prediction",
        "source": "bird_dev",
        "evidence": "female refers to SEX = 'F'; white blood cells that were below 3.5 refers to WBC < 3.5",
        "values_list": [
            "laboratory.wbc.3.5",
            "patient.sex.f"
        ]
    },
    {
        "question": "How many patients diagnosed with SLE have a normal white blood cell level?",
        "SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.WBC BETWEEN 3.5 AND 9",
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.diagnosis",
            "patient.id",
            "laboratory.id",
            "laboratory.wbc"
        ],
        "values": [
            {
                "table": "patient",
                "column": "diagnosis",
                "value": "SLE",
                "condition": "="
            }
        ],
        "db_id": "thrombosis_prediction",
        "source": "bird_dev",
        "evidence": "diagnosed with SLE refers to Diagnosis = 'SLE'; normal white blood cell level refers to WBC between 3.5 and 9.0;",
        "values_list": [
            "patient.diagnosis.sle"
        ]
    },
    {
        "question": "Please list a patient's platelet level if it is within the normal range and if he or she is diagnosed with MCTD.",
        "SQL": "SELECT T2.PLT FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'MCTD' AND T2.PLT BETWEEN 100 AND 400",
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.diagnosis",
            "patient.id",
            "laboratory.plt",
            "laboratory.id"
        ],
        "values": [
            {
                "table": "patient",
                "column": "diagnosis",
                "value": "MCTD",
                "condition": "="
            }
        ],
        "db_id": "thrombosis_prediction",
        "source": "bird_dev",
        "evidence": "PLT > 100 and PLT < 400 means platelet level is within the normal range; PLT < 100 and PLT > 400 means platelet level is not within the normal range; diagnosed with MCTD refers to Diagnosis = 'MCTD';",
        "values_list": [
            "patient.diagnosis.mctd"
        ]
    },
    {
        "question": "What's Angela Sanders's major?",
        "SQL": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Angela' AND T1.last_name = 'Sanders'",
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.link_to_major",
            "member.first_name",
            "major.major_id",
            "major.major_name",
            "member.last_name"
        ],
        "values": [
            {
                "table": "member",
                "column": "first_name",
                "value": "Angela",
                "condition": "="
            },
            {
                "table": "member",
                "column": "last_name",
                "value": "Sanders",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "Angela Sanders is the full name; full name refers to first_name, last_name; major refers to major_name.",
        "values_list": [
            "member.first_name.angela",
            "member.last_name.sanders"
        ]
    },
    {
        "question": "How many students in the Student_Club are from the College of Engineering?",
        "SQL": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.college = 'College of Engineering'",
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "major.college",
            "major.major_id",
            "member.member_id",
            "member.link_to_major"
        ],
        "values": [
            {
                "table": "major",
                "column": "college",
                "value": "College of Engineering",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "major.college.college of engineering"
        ]
    },
    {
        "question": "Please list the full names of the students in the Student_Club that come from the Art and Design Department.",
        "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Art and Design Department'",
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.link_to_major",
            "member.first_name",
            "major.department",
            "major.major_id",
            "member.last_name"
        ],
        "values": [
            {
                "table": "major",
                "column": "department",
                "value": "Art and Design Department",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "full name refers to first_name, last_name;",
        "values_list": [
            "major.department.art and design department"
        ]
    },
    {
        "question": "Which college is the vice president of the Student_Club from?",
        "SQL": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position LIKE 'vice president'",
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.link_to_major",
            "major.major_id",
            "member.position",
            "major.college"
        ],
        "values": [
            {
                "table": "member",
                "column": "position",
                "value": "vice president",
                "condition": "LIKE"
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "Vice President is a position of the Student Club",
        "values_list": [
            "member.position.vice president"
        ]
    },
    {
        "question": "Please list the event names of all the events attended by Maya Mclean.",
        "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Maya' AND T3.last_name = 'Mclean'",
        "tables": [
            "member",
            "event",
            "attendance"
        ],
        "columns": [
            "attendance.link_to_event",
            "event.event_name",
            "member.member_id",
            "member.first_name",
            "attendance.link_to_member",
            "event.event_id",
            "member.last_name"
        ],
        "values": [
            {
                "table": "member",
                "column": "first_name",
                "value": "Maya",
                "condition": "="
            },
            {
                "table": "member",
                "column": "last_name",
                "value": "Mclean",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "member.first_name.maya",
            "member.last_name.mclean"
        ]
    },
    {
        "question": "How many events of the Student_Club did Sacha Harrison attend in 2019?",
        "SQL": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Sacha' AND T3.last_name = 'Harrison' AND SUBSTR(T1.event_date, 1, 4) = '2019'",
        "tables": [
            "member",
            "event",
            "attendance"
        ],
        "columns": [
            "attendance.link_to_event",
            "member.member_id",
            "member.first_name",
            "event.event_date",
            "attendance.link_to_member",
            "event.event_id",
            "member.last_name"
        ],
        "values": [
            {
                "table": "member",
                "column": "first_name",
                "value": "Sacha",
                "condition": "="
            },
            {
                "table": "member",
                "column": "last_name",
                "value": "Harrison",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "events attended in 2019 refers to YEAR(event_date) = 2019",
        "values_list": [
            "member.first_name.sacha",
            "member.last_name.harrison"
        ]
    },
    {
        "question": "Among the events attended by more than 10 members of the Student_Club, how many of them are meetings?",
        "SQL": "SELECT T1.event_name FROM event AS T1  INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id  HAVING COUNT(T2.link_to_event) > 10 EXCEPT SELECT T1.event_name  FROM event AS T1  WHERE T1.type = 'Meeting'",
        "tables": [
            "event",
            "attendance"
        ],
        "columns": [
            "event.event_id",
            "attendance.link_to_event",
            "event.event_name",
            "event.type"
        ],
        "values": [
            {
                "table": "event",
                "column": "type",
                "value": "Meeting",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "meetings events refers to type = 'Meeting'; attended by more than 10 members refers to COUNT(event_id) > 10",
        "values_list": [
            "event.type.meeting"
        ]
    },
    {
        "question": "List all the names of events that had an attendance of over 20 students but were not fundraisers.",
        "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id HAVING COUNT(T2.link_to_event) > 20 EXCEPT SELECT T1.event_name FROM event AS T1  WHERE T1.type = 'Fundraiser'",
        "tables": [
            "event",
            "attendance"
        ],
        "columns": [
            "event.event_id",
            "attendance.link_to_event",
            "event.event_name",
            "event.type"
        ],
        "values": [
            {
                "table": "event",
                "column": "type",
                "value": "Fundraiser",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "name of events refers to event_name; attendance of over 20 students COUNT(event_id) > 20.",
        "values_list": [
            "event.type.fundraiser"
        ]
    },
    {
        "question": "What is the average attendance of meetings in 2020?",
        "SQL": "SELECT CAST(COUNT(T2.link_to_event) AS REAL) / COUNT(DISTINCT T2.link_to_event) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE SUBSTR(T1.event_date, 1, 4) = '2020' AND T1.type = 'Meeting'",
        "tables": [
            "event",
            "attendance"
        ],
        "columns": [
            "event.event_id",
            "event.type",
            "attendance.link_to_event",
            "event.event_date"
        ],
        "values": [
            {
                "table": "event",
                "column": "type",
                "value": "Meeting",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "meetings in 2020 refers to type = 'Meeting' where YEAR(event_date) = 2020; average = DIVIDE(COUNT(event_id), COUNT(DISTINCT event_name))",
        "values_list": [
            "event.type.meeting"
        ]
    },
    {
        "question": "How many members of the Student_Club have majored Environmental Engineering?\n",
        "SQL": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Environmental Engineering'",
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "major.major_id",
            "major.major_name",
            "member.member_id",
            "member.link_to_major"
        ],
        "values": [
            {
                "table": "major",
                "column": "major_name",
                "value": "Environmental Engineering",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "'Environmental Engineering' is the major name",
        "values_list": [
            "major.major_name.environmental engineering"
        ]
    },
    {
        "question": "List the full name of all the members of the Student_Club who attended the \"Laugh Out Loud\" event.",
        "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Laugh Out Loud'",
        "tables": [
            "member",
            "event",
            "attendance"
        ],
        "columns": [
            "attendance.link_to_event",
            "event.event_name",
            "member.member_id",
            "member.first_name",
            "attendance.link_to_member",
            "event.event_id",
            "member.last_name"
        ],
        "values": [
            {
                "table": "event",
                "column": "event_name",
                "value": "Laugh Out Loud",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "full name of members refers to first_name, last_name; 'Laugh Out Loud' is an event name;",
        "values_list": [
            "event.event_name.laugh out loud"
        ]
    },
    {
        "question": "List the last name of all the students who majored Law and Constitutional Studies. \n",
        "SQL": "SELECT T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Law and Constitutional Studies'",
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "major.major_id",
            "major.major_name",
            "member.last_name",
            "member.link_to_major"
        ],
        "values": [
            {
                "table": "major",
                "column": "major_name",
                "value": "Law and Constitutional Studies",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "'Law and Constitutional Studies' is the major name",
        "values_list": [
            "major.major_name.law and constitutional studies"
        ]
    },
    {
        "question": "What county did Sherri Ramsey grew up?",
        "SQL": "SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sherri' AND T1.last_name = 'Ramsey'",
        "tables": [
            "member",
            "zip_code"
        ],
        "columns": [
            "zip_code.zip_code",
            "member.first_name",
            "zip_code.county",
            "member.zip",
            "member.last_name"
        ],
        "values": [
            {
                "table": "member",
                "column": "first_name",
                "value": "Sherri",
                "condition": "="
            },
            {
                "table": "member",
                "column": "last_name",
                "value": "Ramsey",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "member.first_name.sherri",
            "member.last_name.ramsey"
        ]
    },
    {
        "question": "What college offers the major that Tyler Hewitt took?",
        "SQL": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Tyler' AND T1.last_name = 'Hewitt'",
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.link_to_major",
            "major.college",
            "member.first_name",
            "major.major_id",
            "member.last_name"
        ],
        "values": [
            {
                "table": "member",
                "column": "first_name",
                "value": "Tyler",
                "condition": "="
            },
            {
                "table": "member",
                "column": "last_name",
                "value": "Hewitt",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "member.first_name.tyler",
            "member.last_name.hewitt"
        ]
    },
    {
        "question": "What is the amount of the funds that the Vice President received?",
        "SQL": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
        "tables": [
            "member",
            "income"
        ],
        "columns": [
            "income.link_to_member",
            "member.member_id",
            "member.position",
            "income.amount"
        ],
        "values": [
            {
                "table": "member",
                "column": "position",
                "value": "Vice President",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "'Vice President' is a position of Student Club; funds received refers to amount.",
        "values_list": [
            "member.position.vice president"
        ]
    },
    {
        "question": "How much did the Student_Club members spend on food in September Meeting?",
        "SQL": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Food' AND SUBSTR(T1.event_date, 6, 2) = '09'",
        "tables": [
            "budget",
            "event"
        ],
        "columns": [
            "event.event_name",
            "budget.category",
            "budget.link_to_event",
            "event.event_date",
            "event.event_id",
            "budget.spent"
        ],
        "values": [
            {
                "table": "event",
                "column": "event_name",
                "value": "September Meeting",
                "condition": "="
            },
            {
                "table": "budget",
                "column": "category",
                "value": "Food",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "amount spent refers to spent; spend on food in September Meeting refers to category = 'Food' where event_name = 'September Meeting'",
        "values_list": [
            "event.event_name.september meeting",
            "budget.category.food"
        ]
    },
    {
        "question": "What city and state did the President of the Student_Club grow up?",
        "SQL": "SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'President'",
        "tables": [
            "member",
            "zip_code"
        ],
        "columns": [
            "zip_code.zip_code",
            "zip_code.state",
            "zip_code.city",
            "member.position",
            "member.zip"
        ],
        "values": [
            {
                "table": "member",
                "column": "position",
                "value": "President",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "'President' is a position of Student Club;",
        "values_list": [
            "member.position.president"
        ]
    },
    {
        "question": "List the full name of the Student_Club members that grew up in Illinois state.",
        "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Illinois'",
        "tables": [
            "member",
            "zip_code"
        ],
        "columns": [
            "zip_code.zip_code",
            "zip_code.state",
            "member.first_name",
            "member.zip",
            "member.last_name"
        ],
        "values": [
            {
                "table": "zip_code",
                "column": "state",
                "value": "Illinois",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "full name of member refers to first_name, last_name",
        "values_list": [
            "zip_code.state.illinois"
        ]
    },
    {
        "question": "How much did the Student_Club members spend on advertisement in September Meeting?",
        "SQL": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Advertisement' AND SUBSTR(T1.event_date, 6, 2) = '09'",
        "tables": [
            "budget",
            "event"
        ],
        "columns": [
            "event.event_name",
            "budget.category",
            "budget.link_to_event",
            "event.event_date",
            "event.event_id",
            "budget.spent"
        ],
        "values": [
            {
                "table": "event",
                "column": "event_name",
                "value": "September Meeting",
                "condition": "="
            },
            {
                "table": "budget",
                "column": "category",
                "value": "Advertisement",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "amount spent refers to spent; spend on food in September Meeting refers to category = 'Advertisement' where event_name = 'September Meeting'",
        "values_list": [
            "event.event_name.september meeting",
            "budget.category.advertisement"
        ]
    },
    {
        "question": "What department offers the major that Pierce and Guidi took?",
        "SQL": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.last_name = 'Pierce' OR T1.last_name = 'Guidi'",
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "major.department",
            "major.major_id",
            "member.last_name",
            "member.link_to_major"
        ],
        "values": [
            {
                "table": "member",
                "column": "last_name",
                "value": "Pierce",
                "condition": "="
            },
            {
                "table": "member",
                "column": "last_name",
                "value": "Guidi",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "member.last_name.pierce",
            "member.last_name.guidi"
        ]
    },
    {
        "question": "What is the total budgeted amount for all category in \"October Speaker\" event?",
        "SQL": "SELECT SUM(T2.amount) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'October Speaker'",
        "tables": [
            "budget",
            "event"
        ],
        "columns": [
            "event.event_id",
            "budget.link_to_event",
            "budget.amount",
            "event.event_name"
        ],
        "values": [
            {
                "table": "event",
                "column": "event_name",
                "value": "October Speaker",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "total budgeted amount refers to SUM(amount) where event_name = 'October Speaker'",
        "values_list": [
            "event.event_name.october speaker"
        ]
    },
    {
        "question": "Calculate the total average cost that Elijah Allen spent in the events on September and October.",
        "SQL": "SELECT AVG(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.last_name = 'Allen' AND T1.first_name = 'Elijah' AND (SUBSTR(T2.expense_date, 6, 2) = '09' OR SUBSTR(T2.expense_date, 6, 2) = '10')",
        "tables": [
            "member",
            "expense"
        ],
        "columns": [
            "expense.link_to_member",
            "expense.cost",
            "member.member_id",
            "member.first_name",
            "member.last_name",
            "expense.expense_date"
        ],
        "values": [
            {
                "table": "member",
                "column": "last_name",
                "value": "Allen",
                "condition": "="
            },
            {
                "table": "member",
                "column": "first_name",
                "value": "Elijah",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "Elijah Allen is the full name; full name refers to first_name, last_name; The 5th and 6th string of the expense_date in the expense table can refer to month; events in September and October refers to month(expense_date) = 9 OR month(expense_date) = 10",
        "values_list": [
            "member.last_name.allen",
            "member.first_name.elijah"
        ]
    },
    {
        "question": "Give the location for \"Spring Budget Review\".",
        "SQL": "SELECT location FROM event WHERE event_name = 'Spring Budget Review'",
        "tables": [
            "event"
        ],
        "columns": [
            "event.location",
            "event.event_name"
        ],
        "values": [
            {
                "table": "event",
                "column": "event_name",
                "value": "Spring Budget Review",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "'Spring Budget Review' is an event name;",
        "values_list": [
            "event.event_name.spring budget review"
        ]
    },
    {
        "question": "With the biggest budget for the \"Food\", what was the remaining of it?",
        "SQL": "SELECT remaining FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Food' )",
        "tables": [
            "budget"
        ],
        "columns": [
            "budget.amount",
            "budget.category"
        ],
        "values": [
            {
                "table": "budget",
                "column": "category",
                "value": "Food",
                "condition": "="
            },
            {
                "table": "",
                "column": "category",
                "value": "Food",
                "condition": "="
            },
            {
                "table": "",
                "column": "category",
                "value": "Food",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "remaining of budget refers to remaining, biggest budget for 'Food' refers to MAX(budget.amount) where category = 'Food'",
        "values_list": [
            "budget.category.food",
            ".category.food",
            ".category.food"
        ]
    },
    {
        "question": "How many majors are there in \"College of Humanities and Social Sciences\"?",
        "SQL": "SELECT COUNT(major_name) FROM major WHERE college = 'College of Humanities and Social Sciences'",
        "tables": [
            "major"
        ],
        "columns": [
            "major.major_name",
            "major.college"
        ],
        "values": [
            {
                "table": "major",
                "column": "college",
                "value": "College of Humanities and Social Sciences",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "major.college.college of humanities and social sciences"
        ]
    },
    {
        "question": "Tell the phone number of \"Carlo Jacobs\".",
        "SQL": "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs'",
        "tables": [
            "member"
        ],
        "columns": [
            "member.phone",
            "member.first_name",
            "member.last_name"
        ],
        "values": [
            {
                "table": "member",
                "column": "first_name",
                "value": "Carlo",
                "condition": "="
            },
            {
                "table": "member",
                "column": "last_name",
                "value": "Jacobs",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "Carlo Jacobs is the full name; full name refers to first_name, last_name;",
        "values_list": [
            "member.first_name.carlo",
            "member.last_name.jacobs"
        ]
    },
    {
        "question": "Provide the total number of the budget amount for \"September Speaker\" event.",
        "SQL": "SELECT SUM(T1.amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'September Speaker'",
        "tables": [
            "budget",
            "event"
        ],
        "columns": [
            "event.event_id",
            "budget.link_to_event",
            "budget.amount",
            "event.event_name"
        ],
        "values": [
            {
                "table": "event",
                "column": "event_name",
                "value": "September Speaker",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "'September Speaker' is an event name; total number of budget amount refers to SUM(amount)",
        "values_list": [
            "event.event_name.september speaker"
        ]
    },
    {
        "question": "What was Brent Thomason's major?",
        "SQL": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Brent' AND T1.last_name = 'Thomason'",
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.link_to_major",
            "member.first_name",
            "major.major_id",
            "major.major_name",
            "member.last_name"
        ],
        "values": [
            {
                "table": "member",
                "column": "first_name",
                "value": "Brent",
                "condition": "="
            },
            {
                "table": "member",
                "column": "last_name",
                "value": "Thomason",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "Brent Thomason is the full name; full name refers to first_name, last_name; major refers to major_name",
        "values_list": [
            "member.first_name.brent",
            "member.last_name.thomason"
        ]
    },
    {
        "question": "For all the club members from \"Business\" major, how many of them wear medium size t-shirt?",
        "SQL": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business' AND T1.t_shirt_size = 'Medium'",
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.t_shirt_size",
            "member.member_id",
            "member.link_to_major",
            "major.major_id",
            "major.major_name"
        ],
        "values": [
            {
                "table": "major",
                "column": "major_name",
                "value": "Business",
                "condition": "="
            },
            {
                "table": "member",
                "column": "t_shirt_size",
                "value": "Medium",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "'Business' is a major name; wear medium size t-shirt refers to t_shirt_size = 'Medium'",
        "values_list": [
            "major.major_name.business",
            "member.t_shirt_size.medium"
        ]
    },
    {
        "question": "What's Christof Nielson's zip code type?",
        "SQL": "SELECT T2.type FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Christof' AND T1.last_name = 'Nielson'",
        "tables": [
            "member",
            "zip_code"
        ],
        "columns": [
            "zip_code.zip_code",
            "member.first_name",
            "zip_code.type",
            "member.zip",
            "member.last_name"
        ],
        "values": [
            {
                "table": "member",
                "column": "first_name",
                "value": "Christof",
                "condition": "="
            },
            {
                "table": "member",
                "column": "last_name",
                "value": "Nielson",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "member.first_name.christof",
            "member.last_name.nielson"
        ]
    },
    {
        "question": "State the major name for the Vice President of the club.",
        "SQL": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'",
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.position",
            "major.major_id",
            "major.major_name",
            "member.link_to_major"
        ],
        "values": [
            {
                "table": "member",
                "column": "position",
                "value": "Vice President",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "'Vice President' is a position of Student Club",
        "values_list": [
            "member.position.vice president"
        ]
    },
    {
        "question": "Where is the hometown state for \"Sacha Harrison\"?",
        "SQL": "SELECT T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'",
        "tables": [
            "member",
            "zip_code"
        ],
        "columns": [
            "zip_code.zip_code",
            "zip_code.state",
            "member.first_name",
            "member.zip",
            "member.last_name"
        ],
        "values": [
            {
                "table": "member",
                "column": "first_name",
                "value": "Sacha",
                "condition": "="
            },
            {
                "table": "member",
                "column": "last_name",
                "value": "Harrison",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "hometown state refers to state;",
        "values_list": [
            "member.first_name.sacha",
            "member.last_name.harrison"
        ]
    },
    {
        "question": "Which department was the President of the club in?",
        "SQL": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'",
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "major.department",
            "major.major_id",
            "member.position",
            "member.link_to_major"
        ],
        "values": [
            {
                "table": "member",
                "column": "position",
                "value": "President",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "'President' is a position of Student Club",
        "values_list": [
            "member.position.president"
        ]
    },
    {
        "question": "State the date Connor Hilton paid his/her dues.",
        "SQL": "SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Connor' AND T1.last_name = 'Hilton' AND T2.source = 'Dues'",
        "tables": [
            "member",
            "income"
        ],
        "columns": [
            "member.member_id",
            "member.first_name",
            "income.date_received",
            "income.link_to_member",
            "income.source",
            "member.last_name"
        ],
        "values": [
            {
                "table": "income",
                "column": "source",
                "value": "Dues",
                "condition": "="
            },
            {
                "table": "member",
                "column": "first_name",
                "value": "Connor",
                "condition": "="
            },
            {
                "table": "member",
                "column": "last_name",
                "value": "Hilton",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "Connor Hilton is the full name; full name refers to first_name, last_name; date the dues was paid refers to date_received where source = 'Dues';",
        "values_list": [
            "income.source.dues",
            "member.first_name.connor",
            "member.last_name.hilton"
        ]
    },
    {
        "question": "Who was the first one paid his/her dues? Tell the full name.",
        "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.source = 'Dues' ORDER BY T2.date_received LIMIT 1",
        "tables": [
            "member",
            "income"
        ],
        "columns": [
            "member.member_id",
            "member.first_name",
            "income.date_received",
            "income.link_to_member",
            "income.source",
            "member.last_name"
        ],
        "values": [
            {
                "table": "income",
                "column": "source",
                "value": "Dues",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "full name refers to first_name, last_name; first paid dues refers to MIN(received_date) where source = 'Dues'",
        "values_list": [
            "income.source.dues"
        ]
    },
    {
        "question": "How many times was the budget in Advertisement for \"Yearly Kickoff\" meeting more than \"October Meeting\"?",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.event_name = 'Yearly Kickoff' THEN T1.amount ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.event_name = 'October Meeting' THEN T1.amount ELSE 0 END) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' AND T2.type = 'Meeting'",
        "tables": [
            "budget",
            "event"
        ],
        "columns": [
            "budget.amount",
            "event.event_name",
            "budget.category",
            "event.type",
            "budget.link_to_event",
            "event.event_id"
        ],
        "values": [
            {
                "table": "budget",
                "column": "category",
                "value": "Advertisement",
                "condition": "="
            },
            {
                "table": "event",
                "column": "type",
                "value": "Meeting",
                "condition": "="
            },
            {
                "table": "event",
                "column": "event_name",
                "value": "October Meeting",
                "condition": "="
            },
            {
                "table": "event",
                "column": "event_name",
                "value": "Yearly Kickoff",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "budget in Advertisement refer to category = 'Advertisement' in the budget table; DIVIDE(SUM(amount when event_name = 'Yearly Kickoff'), SUM(amount when event_name = 'October Meeting'))",
        "values_list": [
            "budget.category.advertisement",
            "event.type.meeting",
            "event.event_name.october meeting",
            "event.event_name.yearly kickoff"
        ]
    },
    {
        "question": "What percentage was the budget for Parking to the total budget for the \"November Speaker\"?",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.category = 'Parking' THEN T1.amount ELSE 0 END) AS REAL) * 100 / SUM(T1.amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Speaker'",
        "tables": [
            "budget",
            "event"
        ],
        "columns": [
            "budget.amount",
            "event.event_name",
            "budget.category",
            "budget.link_to_event",
            "event.event_id"
        ],
        "values": [
            {
                "table": "event",
                "column": "event_name",
                "value": "November Speaker",
                "condition": "="
            },
            {
                "table": "budget",
                "column": "category",
                "value": "Parking",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "DIVDE(SUM( amount where category = 'Parking' and event_name = 'November Speaker'), COUNT(event_name = 'November Speaker)) * 100",
        "values_list": [
            "event.event_name.november speaker",
            "budget.category.parking"
        ]
    },
    {
        "question": "What is the total cost of the pizzas for all the events?",
        "SQL": "SELECT SUM(cost) FROM expense WHERE expense_description = 'Pizza'",
        "tables": [
            "expense"
        ],
        "columns": [
            "expense.cost",
            "expense.expense_description"
        ],
        "values": [
            {
                "table": "expense",
                "column": "expense_description",
                "value": "Pizza",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "total cost of the pizzas refers to SUM(cost) where expense_description = 'Pizza'",
        "values_list": [
            "expense.expense_description.pizza"
        ]
    },
    {
        "question": "How many cities are there in Orange County, Virginia?",
        "SQL": "SELECT COUNT(city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia'",
        "tables": [
            "zip_code"
        ],
        "columns": [
            "zip_code.state",
            "zip_code.city",
            "zip_code.county"
        ],
        "values": [
            {
                "table": "zip_code",
                "column": "county",
                "value": "Orange County",
                "condition": "="
            },
            {
                "table": "zip_code",
                "column": "state",
                "value": "Virginia",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "Orange County is the county name, Virginia is the state name",
        "values_list": [
            "zip_code.county.orange county",
            "zip_code.state.virginia"
        ]
    },
    {
        "question": "List all of the College of Humanities and Social Sciences' departments.",
        "SQL": "SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences'",
        "tables": [
            "major"
        ],
        "columns": [
            "major.department",
            "major.college"
        ],
        "values": [
            {
                "table": "major",
                "column": "college",
                "value": "College of Humanities and Social Sciences",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "major.college.college of humanities and social sciences"
        ]
    },
    {
        "question": "Where is Amy Firth's hometown?",
        "SQL": "SELECT T2.city, T2.county, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Amy' AND T1.last_name = 'Firth'",
        "tables": [
            "member",
            "zip_code"
        ],
        "columns": [
            "zip_code.zip_code",
            "zip_code.state",
            "member.first_name",
            "zip_code.city",
            "zip_code.county",
            "member.zip",
            "member.last_name"
        ],
        "values": [
            {
                "table": "member",
                "column": "first_name",
                "value": "Amy",
                "condition": "="
            },
            {
                "table": "member",
                "column": "last_name",
                "value": "Firth",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "hometown refers to city, county, state",
        "values_list": [
            "member.first_name.amy",
            "member.last_name.firth"
        ]
    },
    {
        "question": "List all the members who attended the event \"October Meeting\".",
        "SQL": "SELECT DISTINCT T3.member_id FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'October Meeting'",
        "tables": [
            "member",
            "event",
            "attendance"
        ],
        "columns": [
            "attendance.link_to_event",
            "event.event_name",
            "member.member_id",
            "attendance.link_to_member",
            "event.event_id"
        ],
        "values": [
            {
                "table": "event",
                "column": "event_name",
                "value": "October Meeting",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "'October Meeting' is an event name;",
        "values_list": [
            "event.event_name.october meeting"
        ]
    },
    {
        "question": "List all the expenses incurred by the vice president.",
        "SQL": "SELECT T2.expense_id, T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
        "tables": [
            "member",
            "expense"
        ],
        "columns": [
            "expense.link_to_member",
            "member.member_id",
            "member.position",
            "expense.expense_id",
            "expense.expense_description"
        ],
        "values": [
            {
                "table": "member",
                "column": "position",
                "value": "Vice President",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "expense refers to expense_description; 'Vice President' is a position of the Student Club",
        "values_list": [
            "member.position.vice president"
        ]
    },
    {
        "question": "When did the member, Casey Mason, received the income?",
        "SQL": "SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Casey' AND T1.last_name = 'Mason'",
        "tables": [
            "member",
            "income"
        ],
        "columns": [
            "member.member_id",
            "member.first_name",
            "income.date_received",
            "income.link_to_member",
            "member.last_name"
        ],
        "values": [
            {
                "table": "member",
                "column": "first_name",
                "value": "Casey",
                "condition": "="
            },
            {
                "table": "member",
                "column": "last_name",
                "value": "Mason",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "when the income was received refers to date_received",
        "values_list": [
            "member.first_name.casey",
            "member.last_name.mason"
        ]
    },
    {
        "question": "How many of the members' hometowns are from Maryland state?",
        "SQL": "SELECT COUNT(T2.member_id) FROM zip_code AS T1 INNER JOIN member AS T2 ON T1.zip_code = T2.zip WHERE T1.state = 'Maryland'",
        "tables": [
            "zip_code",
            "member"
        ],
        "columns": [
            "zip_code.zip_code",
            "member.zip",
            "zip_code.state",
            "member.member_id"
        ],
        "values": [
            {
                "table": "zip_code",
                "column": "state",
                "value": "Maryland",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "zip_code.state.maryland"
        ]
    },
    {
        "question": "List all the members of the \"School of Applied Sciences, Technology and Education\" department.",
        "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'School of Applied Sciences, Technology and Education'",
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.link_to_major",
            "member.first_name",
            "major.department",
            "major.major_id",
            "member.last_name"
        ],
        "values": [
            {
                "table": "major",
                "column": "department",
                "value": "School of Applied Sciences, Technology and Education",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "list all members means to list all the full name; full name refers to first_name, last_name;",
        "values_list": [
            "major.department.school of applied sciences, technology and education"
        ]
    },
    {
        "question": "Among all the closed events, which event has the highest spend-to-budget ratio?",
        "SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.status = 'Closed' ORDER BY T1.spent / T1.amount DESC LIMIT 1",
        "tables": [
            "budget",
            "event"
        ],
        "columns": [
            "event.event_name",
            "budget.amount",
            "budget.link_to_event",
            "event.status",
            "event.event_id",
            "budget.spent"
        ],
        "values": [
            {
                "table": "event",
                "column": "status",
                "value": "Closed",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "closed events refers to event_name where status = 'Closed'; highest spend-to budget ratio refers to MAX(DIVIDE(spent, amount))",
        "values_list": [
            "event.status.closed"
        ]
    },
    {
        "question": "How many student have the position of president?",
        "SQL": "SELECT COUNT(member_id) FROM member WHERE position = 'President'",
        "tables": [
            "member"
        ],
        "columns": [
            "member.position",
            "member.member_id"
        ],
        "values": [
            {
                "table": "member",
                "column": "position",
                "value": "President",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "'President' is a position of Student Club",
        "values_list": [
            "member.position.president"
        ]
    },
    {
        "question": "How many meeting events were held in 2020?",
        "SQL": "SELECT COUNT(event_id) FROM event WHERE type = 'Meeting' AND SUBSTR(event_date, 1, 4) = '2020'",
        "tables": [
            "event"
        ],
        "columns": [
            "event.event_id",
            "event.type",
            "event.event_date"
        ],
        "values": [
            {
                "table": "event",
                "column": "type",
                "value": "Meeting",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "meeting events refers to type = 'Meeting'; held in 2020 refers to YEAR(event_date) = 2020",
        "values_list": [
            "event.type.meeting"
        ]
    },
    {
        "question": "What is the total amount of money spent for food?",
        "SQL": "SELECT SUM(spent) FROM budget WHERE category = 'Food'",
        "tables": [
            "budget"
        ],
        "columns": [
            "budget.spent",
            "budget.category"
        ],
        "values": [
            {
                "table": "budget",
                "column": "category",
                "value": "Food",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "total amount of money spent refers to SUM(spent); spent for food refers to category = 'Food'",
        "values_list": [
            "budget.category.food"
        ]
    },
    {
        "question": "Among the students majored in interior design, who have attended the Community Theater event?",
        "SQL": "SELECT T2.first_name, T2.last_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T4.event_name = 'Community Theater' AND T1.major_name = 'Interior Design'",
        "tables": [
            "member",
            "event",
            "major",
            "attendance"
        ],
        "columns": [
            "attendance.link_to_event",
            "event.event_name",
            "member.member_id",
            "member.link_to_major",
            "member.first_name",
            "attendance.link_to_member",
            "major.major_id",
            "major.major_name",
            "event.event_id",
            "member.last_name"
        ],
        "values": [
            {
                "table": "event",
                "column": "event_name",
                "value": "Community Theater",
                "condition": "="
            },
            {
                "table": "major",
                "column": "major_name",
                "value": "Interior Design",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "majored in music refers to major_name = 'Interior Design'; 'Community Theater' is the event name;",
        "values_list": [
            "event.event_name.community theater",
            "major.major_name.interior design"
        ]
    },
    {
        "question": "State the name of students from Georgetown, South Carolina.",
        "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.city = 'Georgetown' AND T2.state = 'South Carolina'",
        "tables": [
            "member",
            "zip_code"
        ],
        "columns": [
            "zip_code.zip_code",
            "zip_code.state",
            "member.first_name",
            "zip_code.city",
            "member.zip",
            "member.last_name"
        ],
        "values": [
            {
                "table": "zip_code",
                "column": "city",
                "value": "Georgetown",
                "condition": "="
            },
            {
                "table": "zip_code",
                "column": "state",
                "value": "South Carolina",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "name of students means the full name; full name refers to first_name, last_name; Georgetown is a city; South Carolina is a state",
        "values_list": [
            "zip_code.city.georgetown",
            "zip_code.state.south carolina"
        ]
    },
    {
        "question": "How many income generated by Grant Gilmour?",
        "SQL": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Grant' AND T1.last_name = 'Gilmour'",
        "tables": [
            "member",
            "income"
        ],
        "columns": [
            "member.member_id",
            "member.first_name",
            "income.amount",
            "income.link_to_member",
            "member.last_name"
        ],
        "values": [
            {
                "table": "member",
                "column": "first_name",
                "value": "Grant",
                "condition": "="
            },
            {
                "table": "member",
                "column": "last_name",
                "value": "Gilmour",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "income generated refers to income.amount",
        "values_list": [
            "member.first_name.grant",
            "member.last_name.gilmour"
        ]
    },
    {
        "question": "What is the total expense for the Yearly Kickoff?",
        "SQL": "SELECT SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'Yearly Kickoff'",
        "tables": [
            "budget",
            "event",
            "expense"
        ],
        "columns": [
            "event.event_name",
            "expense.cost",
            "budget.budget_id",
            "budget.link_to_event",
            "expense.link_to_budget",
            "event.event_id"
        ],
        "values": [
            {
                "table": "event",
                "column": "event_name",
                "value": "Yearly Kickoff",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "'Yearly Kickoff' is an event name; total expense refers to SUM(cost)",
        "values_list": [
            "event.event_name.yearly kickoff"
        ]
    },
    {
        "question": "Which student has been entrusted to manage the budget for the Yearly Kickoff?",
        "SQL": "SELECT T4.first_name, T4.last_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget INNER JOIN member AS T4 ON T3.link_to_member = T4.member_id WHERE T1.event_name = 'Yearly Kickoff'",
        "tables": [
            "budget",
            "event",
            "member",
            "expense"
        ],
        "columns": [
            "expense.link_to_member",
            "event.event_name",
            "member.member_id",
            "member.first_name",
            "budget.link_to_event",
            "budget.budget_id",
            "expense.link_to_budget",
            "event.event_id",
            "member.last_name"
        ],
        "values": [
            {
                "table": "event",
                "column": "event_name",
                "value": "Yearly Kickoff",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "name of students means the full name; full name refers to first_name, last_name;'Yearly Kickoff' is an event name;",
        "values_list": [
            "event.event_name.yearly kickoff"
        ]
    },
    {
        "question": "Based on the total cost for all event, what is the percentage of cost for Yearly Kickoff event?",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.event_name = 'Yearly Kickoff' THEN T3.cost ELSE 0 END) AS REAL) * 100 / SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget",
        "tables": [
            "budget",
            "event",
            "expense"
        ],
        "columns": [
            "event.event_name",
            "expense.cost",
            "budget.budget_id",
            "budget.link_to_event",
            "expense.link_to_budget",
            "event.event_id"
        ],
        "values": [
            {
                "table": "event",
                "column": "event_name",
                "value": "Yearly Kickoff",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "percentage = DIVIDE(SUM(cost where event_name = 'Yearly Kickoff'), SUM(cost)) * 100",
        "values_list": [
            "event.event_name.yearly kickoff"
        ]
    },
    {
        "question": "What is the ratio between students majored in finance and physics?",
        "SQL": "SELECT SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END) / SUM(CASE WHEN major_name = 'Physics' THEN 1 ELSE 0 END) AS ratio FROM major",
        "tables": [
            "major"
        ],
        "columns": [
            "major.major_name"
        ],
        "values": [
            {
                "table": "major",
                "column": "major_name",
                "value": "Finance",
                "condition": "="
            },
            {
                "table": "major",
                "column": "major_name",
                "value": "Physics",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "DIVDE(SUM(major_name = 'Finance'), SUM(major_name = 'Physics'))",
        "values_list": [
            "major.major_name.finance",
            "major.major_name.physics"
        ]
    },
    {
        "question": "Provide the full name and email address of the Student_Club's Secretary.",
        "SQL": "SELECT first_name, last_name, email FROM member WHERE position = 'Secretary'",
        "tables": [
            "member"
        ],
        "columns": [
            "member.email",
            "member.first_name",
            "member.position",
            "member.last_name"
        ],
        "values": [
            {
                "table": "member",
                "column": "position",
                "value": "Secretary",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "full name refers to first_name, last_name; 'Secretary' is a position of Student Club",
        "values_list": [
            "member.position.secretary"
        ]
    },
    {
        "question": "How many members of the Student_Club have major in 'Physics Teaching'?",
        "SQL": "SELECT COUNT(T2.member_id) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Physics Teaching'",
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "major.major_id",
            "major.major_name",
            "member.member_id",
            "member.link_to_major"
        ],
        "values": [
            {
                "table": "major",
                "column": "major_name",
                "value": "Physics Teaching",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "'Physics Teaching' is the major_name;",
        "values_list": [
            "major.major_name.physics teaching"
        ]
    },
    {
        "question": "How many members did attend the event 'Community Theater' in 2019?",
        "SQL": "SELECT COUNT(T2.link_to_member) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Community Theater' AND SUBSTR(T1.event_date, 1, 4) = '2019'",
        "tables": [
            "event",
            "attendance"
        ],
        "columns": [
            "attendance.link_to_event",
            "event.event_name",
            "event.event_date",
            "attendance.link_to_member",
            "event.event_id"
        ],
        "values": [
            {
                "table": "event",
                "column": "event_name",
                "value": "Community Theater",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "event 'Community Theater' in 2019 refers to event_name = 'Community Theater' where YEAR(event_date) = 2019",
        "values_list": [
            "event.event_name.community theater"
        ]
    },
    {
        "question": "Provide the number of events attended by Luisa Guidi. What is her major?",
        "SQL": "SELECT COUNT(T3.link_to_event), T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE T2.first_name = 'Luisa' AND T2.last_name = 'Guidi'",
        "tables": [
            "member",
            "major",
            "attendance"
        ],
        "columns": [
            "attendance.link_to_event",
            "member.member_id",
            "member.link_to_major",
            "member.first_name",
            "attendance.link_to_member",
            "major.major_id",
            "major.major_name",
            "member.last_name"
        ],
        "values": [
            {
                "table": "member",
                "column": "first_name",
                "value": "Luisa",
                "condition": "="
            },
            {
                "table": "member",
                "column": "last_name",
                "value": "Guidi",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "major refers to major_name;",
        "values_list": [
            "member.first_name.luisa",
            "member.last_name.guidi"
        ]
    },
    {
        "question": "Name the event with the highest amount spent on advertisement.",
        "SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1",
        "tables": [
            "budget",
            "event"
        ],
        "columns": [
            "event.event_name",
            "budget.category",
            "budget.link_to_event",
            "event.event_id",
            "budget.spent"
        ],
        "values": [
            {
                "table": "budget",
                "column": "category",
                "value": "Advertisement",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "Name of event refers to event_name; highest amount spent on advertisement refers to MAX(spent) where category = 'Advertisement'",
        "values_list": [
            "budget.category.advertisement"
        ]
    },
    {
        "question": "Among all events hold by the Student_Club in 2019, find the percentage share of events related to 'Community Service'",
        "SQL": "SELECT CAST(SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(type) FROM event WHERE SUBSTR(event_date, 1, 4) = '2019'",
        "tables": [
            "event"
        ],
        "columns": [
            "event.type",
            "event.event_date"
        ],
        "values": [
            {
                "table": "event",
                "column": "type",
                "value": "Community Service",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "DIVIDE(SUM(type = 'Community Service'), COUNT(event_id)) * 100 where event_date BETWEEN' 2019-01-01' and '2019-12-31'",
        "values_list": [
            "event.type.community service"
        ]
    },
    {
        "question": "Indicate the cost of posters for 'September Speaker' event.",
        "SQL": "SELECT T3.cost FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'September Speaker' AND T3.expense_description = 'Posters'",
        "tables": [
            "budget",
            "event",
            "expense"
        ],
        "columns": [
            "event.event_name",
            "expense.cost",
            "budget.budget_id",
            "budget.link_to_event",
            "expense.link_to_budget",
            "event.event_id",
            "expense.expense_description"
        ],
        "values": [
            {
                "table": "event",
                "column": "event_name",
                "value": "September Speaker",
                "condition": "="
            },
            {
                "table": "expense",
                "column": "expense_description",
                "value": "Posters",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "'Posters' is the expense description; 'September Speaker' is an event name",
        "values_list": [
            "event.event_name.september speaker",
            "expense.expense_description.posters"
        ]
    },
    {
        "question": "Identify the type of expenses and their total value approved for 'October Meeting' event.",
        "SQL": "SELECT T1.type, SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting'",
        "tables": [
            "budget",
            "event",
            "expense"
        ],
        "columns": [
            "event.event_name",
            "expense.cost",
            "event.type",
            "budget.link_to_event",
            "budget.budget_id",
            "expense.link_to_budget",
            "event.event_id"
        ],
        "values": [
            {
                "table": "event",
                "column": "event_name",
                "value": "October Meeting",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "total value refers to SUM(cost); 'October Meeting' is an event name;",
        "values_list": [
            "event.event_name.october meeting"
        ]
    },
    {
        "question": "Calculate the amount budgeted for 'April Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted.",
        "SQL": "SELECT T2.category, SUM(T2.amount) FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'April Speaker' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC",
        "tables": [
            "budget",
            "event"
        ],
        "columns": [
            "budget.amount",
            "event.event_name",
            "budget.category",
            "budget.link_to_event",
            "event.event_id"
        ],
        "values": [
            {
                "table": "event",
                "column": "event_name",
                "value": "April Speaker",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "'April Speaker' is an event name; amount budgeted refers to SUM(amount); budget categories refers to category",
        "values_list": [
            "event.event_name.april speaker"
        ]
    },
    {
        "question": "Among the budgets for Food, which one has the highest budgeted amount?",
        "SQL": "SELECT budget_id FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget )",
        "tables": [
            "budget"
        ],
        "columns": [
            "budget.amount"
        ],
        "values": [
            {
                "table": "",
                "column": "category",
                "value": "Food",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "MAX(amount) where category = 'Food'",
        "values_list": [
            ".category.food"
        ]
    },
    {
        "question": "Calculate the total cost spent for Parking in the list.",
        "SQL": "SELECT SUM(cost) FROM expense WHERE expense_description = 'Parking'",
        "tables": [
            "expense"
        ],
        "columns": [
            "expense.cost",
            "expense.expense_description"
        ],
        "values": [
            {
                "table": "expense",
                "column": "expense_description",
                "value": "Parking",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "total cost spent for Parking refers to SUM(cost) where expense_description = 'Parking'",
        "values_list": [
            "expense.expense_description.parking"
        ]
    },
    {
        "question": "List out the full name and total cost that member id \"rec4BLdZHS2Blfp4v\" incurred?",
        "SQL": "SELECT T1.first_name, T1.last_name, SUM(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.member_id = 'rec4BLdZHS2Blfp4v'",
        "tables": [
            "member",
            "expense"
        ],
        "columns": [
            "expense.link_to_member",
            "expense.cost",
            "member.member_id",
            "member.first_name",
            "member.last_name"
        ],
        "values": [
            {
                "table": "member",
                "column": "member_id",
                "value": "rec4BLdZHS2Blfp4v",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "full name refers to first_name, last name",
        "values_list": [
            "member.member_id.rec4bldzhs2blfp4v"
        ]
    },
    {
        "question": "State what kind of expenses that Sacha Harrison incurred?",
        "SQL": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'",
        "tables": [
            "member",
            "expense"
        ],
        "columns": [
            "expense.link_to_member",
            "member.member_id",
            "member.first_name",
            "expense.expense_description",
            "member.last_name"
        ],
        "values": [
            {
                "table": "member",
                "column": "first_name",
                "value": "Sacha",
                "condition": "="
            },
            {
                "table": "member",
                "column": "last_name",
                "value": "Harrison",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "kind of expenses refers to expense_description; Sacha Harrison is the full name; full name refers to first_name, last_name;",
        "values_list": [
            "member.first_name.sacha",
            "member.last_name.harrison"
        ]
    },
    {
        "question": "What kind of expenses incurred by members who have X-Large in size of tee shirt?",
        "SQL": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.t_shirt_size = 'X-Large'",
        "tables": [
            "member",
            "expense"
        ],
        "columns": [
            "expense.link_to_member",
            "member.t_shirt_size",
            "expense.expense_description",
            "member.member_id"
        ],
        "values": [
            {
                "table": "member",
                "column": "t_shirt_size",
                "value": "X-Large",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "kind of expenses refers to expense_description; t_shirt_size = 'X-Large'",
        "values_list": [
            "member.t_shirt_size.x-large"
        ]
    },
    {
        "question": "State the name of major that Phillip Cullen has joined.",
        "SQL": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.first_name = 'Phillip' AND T2.last_name = 'Cullen'",
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.link_to_major",
            "member.first_name",
            "major.major_id",
            "major.major_name",
            "member.last_name"
        ],
        "values": [
            {
                "table": "member",
                "column": "first_name",
                "value": "Phillip",
                "condition": "="
            },
            {
                "table": "member",
                "column": "last_name",
                "value": "Cullen",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "name of major refers to major_name",
        "values_list": [
            "member.first_name.phillip",
            "member.last_name.cullen"
        ]
    },
    {
        "question": "List out the position of members who joined major of Business.",
        "SQL": "SELECT T2.position FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Business'",
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "major.major_id",
            "major.major_name",
            "member.position",
            "member.link_to_major"
        ],
        "values": [
            {
                "table": "major",
                "column": "major_name",
                "value": "Business",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "'Business' is the major name",
        "values_list": [
            "major.major_name.business"
        ]
    },
    {
        "question": "How many members of Business have the Medium size of tee shirt?",
        "SQL": "SELECT COUNT(T2.member_id) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Business' AND T2.t_shirt_size = 'Medium'",
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.t_shirt_size",
            "member.member_id",
            "member.link_to_major",
            "major.major_id",
            "major.major_name"
        ],
        "values": [
            {
                "table": "major",
                "column": "major_name",
                "value": "Business",
                "condition": "="
            },
            {
                "table": "member",
                "column": "t_shirt_size",
                "value": "Medium",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "members of Economics refers to major_name = 'Business'; t_shirt_size = 'Medium'",
        "values_list": [
            "major.major_name.business",
            "member.t_shirt_size.medium"
        ]
    },
    {
        "question": "Mention the category of events which were held at MU 215.",
        "SQL": "SELECT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215'",
        "tables": [
            "budget",
            "event"
        ],
        "columns": [
            "event.event_id",
            "event.location",
            "budget.link_to_event",
            "budget.category"
        ],
        "values": [
            {
                "table": "event",
                "column": "location",
                "value": "MU 215",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "held at MU 215 refers to location = 'MU 215'",
        "values_list": [
            "event.location.mu 215"
        ]
    },
    {
        "question": "What is the category of event which was taken place in 2020-03-24T12:00:00?",
        "SQL": "SELECT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_date = '2020-03-24T12:00:00'",
        "tables": [
            "budget",
            "event"
        ],
        "columns": [
            "event.event_id",
            "budget.link_to_event",
            "budget.category",
            "event.event_date"
        ],
        "values": [
            {
                "table": "event",
                "column": "event_date",
                "value": "2020-03-24T12:00:00",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "taken place in 2020-03-24T12:00:00 refers to event_date = '2020-03-24T12:00:00'",
        "values_list": [
            "event.event_date.2020-03-24t12:00:00"
        ]
    },
    {
        "question": "State the name of major that Vice President has joined.",
        "SQL": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Vice President'",
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.position",
            "major.major_id",
            "major.major_name",
            "member.link_to_major"
        ],
        "values": [
            {
                "table": "member",
                "column": "position",
                "value": "Vice President",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "name of major refers to major_name; 'Vice President' is position of Student Club",
        "values_list": [
            "member.position.vice president"
        ]
    },
    {
        "question": "Calculate the percentage of members who are major Business in the list?",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.major_name = 'Business' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Member'",
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.member_id",
            "member.link_to_major",
            "major.major_id",
            "member.position",
            "major.major_name"
        ],
        "values": [
            {
                "table": "member",
                "column": "position",
                "value": "Member",
                "condition": "="
            },
            {
                "table": "major",
                "column": "major_name",
                "value": "Business",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "DIVIDE(SUM(position = 'Member' and major_name = 'Business'), COUNT(member_id)) * 100",
        "values_list": [
            "member.position.member",
            "major.major_name.business"
        ]
    },
    {
        "question": "State the category of events were held at MU 215.",
        "SQL": "SELECT DISTINCT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215'",
        "tables": [
            "budget",
            "event"
        ],
        "columns": [
            "event.event_id",
            "event.location",
            "budget.link_to_event",
            "budget.category"
        ],
        "values": [
            {
                "table": "event",
                "column": "location",
                "value": "MU 215",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "'MU 215' is the location of event; ",
        "values_list": [
            "event.location.mu 215"
        ]
    },
    {
        "question": "In the College of Agriculture and Applied Sciences, how many majors are under the department of School of Applied Sciences, Technology and Education?",
        "SQL": "SELECT COUNT(major_id) FROM major WHERE department = 'School of Applied Sciences, Technology and Education' AND college = 'College of Agriculture and Applied Sciences'",
        "tables": [
            "major"
        ],
        "columns": [
            "major.department",
            "major.major_id",
            "major.college"
        ],
        "values": [
            {
                "table": "major",
                "column": "department",
                "value": "School of Applied Sciences, Technology and Education",
                "condition": "="
            },
            {
                "table": "major",
                "column": "college",
                "value": "College of Agriculture and Applied Sciences",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "major.department.school of applied sciences, technology and education",
            "major.college.college of agriculture and applied sciences"
        ]
    },
    {
        "question": "List the last name of members with a major in environmental engineering and include its department and college name.",
        "SQL": "SELECT T2.last_name, T1.department, T1.college FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Member' AND T1.major_name = 'Environmental Engineering'",
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.link_to_major",
            "major.college",
            "major.department",
            "major.major_id",
            "member.position",
            "major.major_name",
            "member.last_name"
        ],
        "values": [
            {
                "table": "member",
                "column": "position",
                "value": "Member",
                "condition": "="
            },
            {
                "table": "major",
                "column": "major_name",
                "value": "Environmental Engineering",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "'Environmental Engineering' is the major_name;",
        "values_list": [
            "member.position.member",
            "major.major_name.environmental engineering"
        ]
    },
    {
        "question": "What are the budget category of the events located at MU 215 and a guest speaker type with a 0 budget spent?",
        "SQL": "SELECT DISTINCT T2.category, T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215' AND T2.spent = 0 AND T1.type = 'Guest Speaker'",
        "tables": [
            "budget",
            "event"
        ],
        "columns": [
            "budget.category",
            "event.type",
            "budget.link_to_event",
            "budget.spent",
            "event.event_id",
            "event.location"
        ],
        "values": [
            {
                "table": "event",
                "column": "type",
                "value": "Guest Speaker",
                "condition": "="
            },
            {
                "table": "event",
                "column": "location",
                "value": "MU 215",
                "condition": "="
            },
            {
                "table": "budget",
                "column": "spent",
                "value": "0",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "budget category refers to category; events located at refers to location; type = 'Guest Speaker'; 0 budget spent refers to spent = 0; ",
        "values_list": [
            "event.type.guest speaker",
            "event.location.mu 215",
            "budget.spent.0"
        ]
    },
    {
        "question": "List the city and state of members enrolled under electrical and computer engineering department.",
        "SQL": "SELECT city, state FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major INNER JOIN zip_code AS T3 ON T3.zip_code = T1.zip WHERE department = 'Electrical and Computer Engineering Department' AND position = 'Member'",
        "tables": [
            "member",
            "major",
            "zip_code"
        ],
        "columns": [
            "member.zip",
            "zip_code.zip_code",
            "major.major_id",
            "member.link_to_major"
        ],
        "values": [
            {
                "table": "",
                "column": "department",
                "value": "Electrical and Computer Engineering Department",
                "condition": "="
            },
            {
                "table": "",
                "column": "position",
                "value": "Member",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "'Electrical and Computer Engineering Department' is the department; members enrolled refers to position = 'Member'",
        "values_list": [
            ".department.electrical and computer engineering department",
            ".position.member"
        ]
    },
    {
        "question": "What is the name of the social event that was attended by the vice president of the Student_Club located at 900 E. Washington St.?",
        "SQL": "SELECT T2.event_name FROM attendance AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T3.position = 'Vice President' AND T2.location = '900 E. Washington St.' AND T2.type = 'Social'",
        "tables": [
            "member",
            "event",
            "attendance"
        ],
        "columns": [
            "attendance.link_to_event",
            "event.event_name",
            "member.member_id",
            "event.type",
            "attendance.link_to_member",
            "member.position",
            "event.event_id",
            "event.location"
        ],
        "values": [
            {
                "table": "event",
                "column": "type",
                "value": "Social",
                "condition": "="
            },
            {
                "table": "member",
                "column": "position",
                "value": "Vice President",
                "condition": "="
            },
            {
                "table": "event",
                "column": "location",
                "value": "900 E. Washington St.",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "name of social event refers to event_name where type = 'Social'; 'Vice President' is position; located at refers to location",
        "values_list": [
            "event.type.social",
            "member.position.vice president",
            "event.location.900 e. washington st."
        ]
    },
    {
        "question": "Among the members with t-shirt size of medium, what is the percentage of the amount 50 received by the Student_Club?",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.amount = 50 THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(T2.income_id) FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Member' AND T1.t_shirt_size = 'Medium'",
        "tables": [
            "member",
            "income"
        ],
        "columns": [
            "member.t_shirt_size",
            "member.member_id",
            "income.income_id",
            "member.position",
            "income.amount",
            "income.link_to_member"
        ],
        "values": [
            {
                "table": "member",
                "column": "position",
                "value": "Member",
                "condition": "="
            },
            {
                "table": "member",
                "column": "t_shirt_size",
                "value": "Medium",
                "condition": "="
            },
            {
                "table": "income",
                "column": "amount",
                "value": "50",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "t_shirt_size = 'Medium' where position = 'Member'; percentage = DIVIDE(COUNT(amount = 50), COUNT(member_id)) * 100",
        "values_list": [
            "member.position.member",
            "member.t_shirt_size.medium",
            "income.amount.50"
        ]
    },
    {
        "question": "List the names of closed event as \"game\" that was closed from 3/15/2019 to 3/20/2020.",
        "SQL": "SELECT DISTINCT event_name FROM event WHERE type = 'Game' AND date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-03-15' AND '2020-03-20' AND status = 'Closed'",
        "tables": [
            "event"
        ],
        "columns": [
            "event.type",
            "event.event_name",
            "event.event_date",
            "event.status"
        ],
        "values": [
            {
                "table": "event",
                "column": "status",
                "value": "Closed",
                "condition": "="
            },
            {
                "table": "event",
                "column": "type",
                "value": "Game",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "name of events refers event_name; game event that was closed refers to type = 'Game' where status = 'Closed'; event_date BETWEEN '2019-03-15' and '2020-03-20'; ",
        "values_list": [
            "event.status.closed",
            "event.type.game"
        ]
    },
    {
        "question": "Please indicate the college of the person whose first name is Katy with the link to the major \"rec1N0upiVLy5esTO\".",
        "SQL": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.link_to_major = 'rec1N0upiVLy5esTO' AND T1.first_name = 'Katy'",
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.first_name",
            "member.link_to_major",
            "major.major_id",
            "major.college"
        ],
        "values": [
            {
                "table": "member",
                "column": "link_to_major",
                "value": "rec1N0upiVLy5esTO",
                "condition": "="
            },
            {
                "table": "member",
                "column": "first_name",
                "value": "Katy",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "member.link_to_major.rec1n0upivly5esto",
            "member.first_name.katy"
        ]
    },
    {
        "question": "Please list the phone numbers of the members who majored in business at the College of Agriculture and Applied Sciences.",
        "SQL": "SELECT T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Business' AND T2.college = 'College of Agriculture and Applied Sciences'",
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.phone",
            "major.college",
            "member.link_to_major",
            "major.major_id",
            "major.major_name"
        ],
        "values": [
            {
                "table": "major",
                "column": "major_name",
                "value": "Business",
                "condition": "="
            },
            {
                "table": "major",
                "column": "college",
                "value": "College of Agriculture and Applied Sciences",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "'College of Agriculture and Applied Sciences' is the college; majored in business refers to major_name = 'Business'; phone numbers refers to phone",
        "values_list": [
            "major.major_name.business",
            "major.college.college of agriculture and applied sciences"
        ]
    },
    {
        "question": "Calculate the percentage of zip codes that are PO boxes.",
        "SQL": "SELECT CAST(SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(zip_code) FROM zip_code",
        "tables": [
            "zip_code"
        ],
        "columns": [
            "zip_code.zip_code",
            "zip_code.type"
        ],
        "values": [
            {
                "table": "zip_code",
                "column": "type",
                "value": "PO Box",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "DIVIDE(SUM(type = 'PO Box'), COUNT(zip_code)) * 100",
        "values_list": [
            "zip_code.type.po box"
        ]
    },
    {
        "question": "What is the average amount paid by students in a position other than a member?",
        "SQL": "SELECT AVG(T1.cost) FROM expense AS T1 INNER JOIN member as T2 ON T1.link_to_member = T2.member_id WHERE T2.position != 'Member'",
        "tables": [
            "member",
            "expense"
        ],
        "columns": [
            "expense.link_to_member",
            "expense.cost",
            "member.position",
            "member.member_id"
        ],
        "values": [
            {
                "table": "member",
                "column": "position",
                "value": "Member",
                "condition": "!="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "position other than a member refers to position ! = 'Member'; average amount paid = DIVIDE( SUM(cost), COUNT(event_id))",
        "values_list": [
            "member.position.member"
        ]
    },
    {
        "question": "List the name of events with less than average parking cost.",
        "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Parking' AND T3.cost < (SELECT AVG(cost) FROM expense)",
        "tables": [
            "budget",
            "event",
            "expense"
        ],
        "columns": [
            "event.event_name",
            "expense.cost",
            "budget.category",
            "budget.link_to_event",
            "budget.budget_id",
            "expense.link_to_budget",
            "event.event_id"
        ],
        "values": [
            {
                "table": "budget",
                "column": "category",
                "value": "Parking",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "name of events refers to event_name; less than average parking cost refers to cost < DIVIDE(SUM(cost), COUNT(event_id)) where category = 'Parking'",
        "values_list": [
            "budget.category.parking"
        ]
    },
    {
        "question": "What is the percentage of the cost for the meeting events?",
        "SQL": "SELECT SUM(CASE WHEN T1.type = 'Meeting' THEN T3.cost ELSE 0 END) * 100 / SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget",
        "tables": [
            "budget",
            "event",
            "expense"
        ],
        "columns": [
            "expense.cost",
            "event.type",
            "budget.budget_id",
            "budget.link_to_event",
            "expense.link_to_budget",
            "event.event_id"
        ],
        "values": [
            {
                "table": "event",
                "column": "type",
                "value": "Meeting",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "meeting events refers to type = 'Meeting'; percentage = DIVIDE( SUM(cost), COUNT(event_id)) * 100",
        "values_list": [
            "event.type.meeting"
        ]
    },
    {
        "question": "Calculate the difference in the percentage of members in New Jersey and Vermont.",
        "SQL": "SELECT CAST((SUM(CASE WHEN T2.state = 'New Jersey' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.state = 'Vermont' THEN 1 ELSE 0 END)) AS REAL) * 100 / COUNT(T1.member_id) AS diff FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip",
        "tables": [
            "member",
            "zip_code"
        ],
        "columns": [
            "zip_code.zip_code",
            "member.zip",
            "zip_code.state",
            "member.member_id"
        ],
        "values": [
            {
                "table": "zip_code",
                "column": "state",
                "value": "New Jersey",
                "condition": "="
            },
            {
                "table": "zip_code",
                "column": "state",
                "value": "Vermont",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "SUBTRACT( DIVIDE( SUM(state = 'New Jersey'), COUNT(position = 'Member')), DIVIDE( SUM(state = 'Vermont'), COUNT(position = 'Member')) )",
        "values_list": [
            "zip_code.state.new jersey",
            "zip_code.state.vermont"
        ]
    },
    {
        "question": "What is the major of Garrett Gerke and which department does it belong to?",
        "SQL": "SELECT T2.major_name, T2.department FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.first_name = 'Garrett' AND T1.last_name = 'Gerke'",
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.link_to_major",
            "member.first_name",
            "major.department",
            "major.major_id",
            "major.major_name",
            "member.last_name"
        ],
        "values": [
            {
                "table": "member",
                "column": "first_name",
                "value": "Garrett",
                "condition": "="
            },
            {
                "table": "member",
                "column": "last_name",
                "value": "Gerke",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "major refers to major name;",
        "values_list": [
            "member.first_name.garrett",
            "member.last_name.gerke"
        ]
    },
    {
        "question": "List the last names of students under the Elementary Education major and include their phone numbers.",
        "SQL": "SELECT T1.last_name, T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Elementary Education'",
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.phone",
            "member.link_to_major",
            "major.major_id",
            "major.major_name",
            "member.last_name"
        ],
        "values": [
            {
                "table": "major",
                "column": "major_name",
                "value": "Elementary Education",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "'Elementary Education' is the major name; phone numbers refers to phone",
        "values_list": [
            "major.major_name.elementary education"
        ]
    },
    {
        "question": "What category was budgeted for the 'January Speaker' event and how much was the amount budgeted for that category?",
        "SQL": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'January Speaker'",
        "tables": [
            "budget",
            "event"
        ],
        "columns": [
            "budget.amount",
            "event.event_name",
            "budget.category",
            "budget.link_to_event",
            "event.event_id"
        ],
        "values": [
            {
                "table": "event",
                "column": "event_name",
                "value": "January Speaker",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "amount budgeted refers to amount, 'January Speaker' is the event name;",
        "values_list": [
            "event.event_name.january speaker"
        ]
    },
    {
        "question": "List the event names which were budgeted for the food.",
        "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Food'",
        "tables": [
            "budget",
            "event"
        ],
        "columns": [
            "event.event_id",
            "budget.link_to_event",
            "event.event_name",
            "budget.category"
        ],
        "values": [
            {
                "table": "budget",
                "column": "category",
                "value": "Food",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "budgeted for food refers to category = 'Food'",
        "values_list": [
            "budget.category.food"
        ]
    },
    {
        "question": "Which budget category does the expense 'Posters' fall to?",
        "SQL": "SELECT DISTINCT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Posters'",
        "tables": [
            "budget",
            "expense"
        ],
        "columns": [
            "budget.budget_id",
            "expense.link_to_budget",
            "budget.category",
            "expense.expense_description"
        ],
        "values": [
            {
                "table": "expense",
                "column": "expense_description",
                "value": "Posters",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "'Posters' refers to expense description",
        "values_list": [
            "expense.expense_description.posters"
        ]
    },
    {
        "question": "Write the full name of the club member with the position of 'Secretary' and list which college the club member belongs to.",
        "SQL": "SELECT T1.first_name, T1.last_name, college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Secretary'",
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.link_to_major",
            "member.first_name",
            "major.major_id",
            "member.position",
            "member.last_name"
        ],
        "values": [
            {
                "table": "member",
                "column": "position",
                "value": "Secretary",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "full name refers to first_name, last name",
        "values_list": [
            "member.position.secretary"
        ]
    },
    {
        "question": "Calculate the total amount spent on speaker gifts and list the name of the event they were spent on.",
        "SQL": "SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Speaker Gifts' GROUP BY T2.event_name",
        "tables": [
            "budget",
            "event"
        ],
        "columns": [
            "event.event_name",
            "budget.category",
            "budget.link_to_event",
            "event.event_id",
            "budget.spent"
        ],
        "values": [
            {
                "table": "budget",
                "column": "category",
                "value": "Speaker Gifts",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "total amount spent = SUM(spent) where category = 'Speaker Gifts'",
        "values_list": [
            "budget.category.speaker gifts"
        ]
    },
    {
        "question": "Where is the hometown of Garrett Gerke?",
        "SQL": "SELECT T2.city FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip WHERE T1.first_name = 'Garrett' AND T1.last_name = 'Gerke'",
        "tables": [
            "member",
            "zip_code"
        ],
        "columns": [
            "zip_code.zip_code",
            "member.first_name",
            "zip_code.city",
            "member.zip",
            "member.last_name"
        ],
        "values": [
            {
                "table": "member",
                "column": "first_name",
                "value": "Garrett",
                "condition": "="
            },
            {
                "table": "member",
                "column": "last_name",
                "value": "Gerke",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "hometown refers to city",
        "values_list": [
            "member.first_name.garrett",
            "member.last_name.gerke"
        ]
    },
    {
        "question": "Which student has the hometown of Lincolnton, North Carolina with the zip code of 28092? List their full name and position.",
        "SQL": "SELECT T1.first_name, T1.last_name, T1.position FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip WHERE T2.city = 'Lincolnton' AND T2.state = 'North Carolina' AND T2.zip_code = 28092",
        "tables": [
            "member",
            "zip_code"
        ],
        "columns": [
            "zip_code.zip_code",
            "zip_code.state",
            "member.first_name",
            "zip_code.city",
            "member.position",
            "member.zip",
            "member.last_name"
        ],
        "values": [
            {
                "table": "zip_code",
                "column": "zip_code",
                "value": "28092",
                "condition": "="
            },
            {
                "table": "zip_code",
                "column": "city",
                "value": "Lincolnton",
                "condition": "="
            },
            {
                "table": "zip_code",
                "column": "state",
                "value": "North Carolina",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "full name refers to first_name, last_name, hometown of Lincolnton, North Carolina refers to city = 'Lincolnton' AND state = 'North Carolina'",
        "values_list": [
            "zip_code.zip_code.28092",
            "zip_code.city.lincolnton",
            "zip_code.state.north carolina"
        ]
    },
    {
        "question": "How many gas stations in CZE has Premium gas?",
        "SQL": "SELECT COUNT(GasStationID) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium'",
        "tables": [
            "gasstations"
        ],
        "columns": [
            "gasstations.country",
            "gasstations.segment",
            "gasstations.gasstationid"
        ],
        "values": [
            {
                "table": "gasstations",
                "column": "country",
                "value": "CZE",
                "condition": "="
            },
            {
                "table": "gasstations",
                "column": "segment",
                "value": "Premium",
                "condition": "="
            }
        ],
        "db_id": "debit_card_specializing",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "gasstations.country.cze",
            "gasstations.segment.premium"
        ]
    },
    {
        "question": "What is the ratio of customers who pay in EUR against customers who pay in CZK?",
        "SQL": "SELECT CAST(SUM(IIF(Currency = 'EUR', 1, 0)) AS FLOAT) / SUM(IIF(Currency = 'CZK', 1, 0)) AS ratio FROM customers",
        "tables": [
            "customers"
        ],
        "columns": [
            "customers.currency"
        ],
        "values": [
            {
                "table": "customers",
                "column": "currency",
                "value": "CZK",
                "condition": "="
            },
            {
                "table": "customers",
                "column": "currency",
                "value": "EUR",
                "condition": "="
            }
        ],
        "db_id": "debit_card_specializing",
        "source": "bird_dev",
        "evidence": "ratio of customers who pay in EUR against customers who pay in CZK = count(Currency = 'EUR') / count(Currency = 'CZK').",
        "values_list": [
            "customers.currency.czk",
            "customers.currency.eur"
        ]
    },
    {
        "question": "In 2012, who had the least consumption in LAM?",
        "SQL": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND SUBSTR(T2.Date, 1, 4) = '2012' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1",
        "tables": [
            "customers",
            "yearmonth"
        ],
        "columns": [
            "yearmonth.customerid",
            "yearmonth.consumption",
            "customers.segment",
            "yearmonth.date",
            "customers.customerid"
        ],
        "values": [
            {
                "table": "customers",
                "column": "segment",
                "value": "LAM",
                "condition": "="
            }
        ],
        "db_id": "debit_card_specializing",
        "source": "bird_dev",
        "evidence": "Year 2012 can be presented as Between 201201 And 201212; The first 4 strings of the Date values in the yearmonth table can represent year.",
        "values_list": [
            "customers.segment.lam"
        ]
    },
    {
        "question": "What was the average monthly consumption of customers in SME for the year 2013?",
        "SQL": "SELECT AVG(T2.Consumption) / 12 FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME'",
        "tables": [
            "customers",
            "yearmonth"
        ],
        "columns": [
            "yearmonth.customerid",
            "yearmonth.consumption",
            "customers.segment",
            "yearmonth.date",
            "customers.customerid"
        ],
        "values": [
            {
                "table": "customers",
                "column": "segment",
                "value": "SME",
                "condition": "="
            }
        ],
        "db_id": "debit_card_specializing",
        "source": "bird_dev",
        "evidence": "Average Monthly consumption = AVG(Consumption) / 12; Year 2013 can be presented as Between 201301 And 201312; The first 4 strings of the Date values in the yearmonth table can represent year.",
        "values_list": [
            "customers.segment.sme"
        ]
    },
    {
        "question": "Which customers, paying in CZK, consumed the most gas in 2011?",
        "SQL": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Date BETWEEN 201101 AND 201112 GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
        "tables": [
            "customers",
            "yearmonth"
        ],
        "columns": [
            "yearmonth.customerid",
            "yearmonth.consumption",
            "yearmonth.date",
            "customers.currency",
            "customers.customerid"
        ],
        "values": [
            {
                "table": "customers",
                "column": "currency",
                "value": "CZK",
                "condition": "="
            }
        ],
        "db_id": "debit_card_specializing",
        "source": "bird_dev",
        "evidence": "Year 2011 can be presented as Between 201101 And 201112, which means between January and December in 2011",
        "values_list": [
            "customers.currency.czk"
        ]
    },
    {
        "question": "How many customers in KAM had a consumption of less than 30,000 for the year 2012?",
        "SQL": "SELECT COUNT(*) FROM ( SELECT T2.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND SUBSTRING(T2.Date, 1, 4) = '2012' GROUP BY T2.CustomerID HAVING SUM(T2.Consumption) < 30000 ) AS t1",
        "tables": [
            "customers",
            "yearmonth"
        ],
        "columns": [
            "yearmonth.customerid",
            "yearmonth.consumption",
            "customers.segment",
            "yearmonth.date",
            "customers.customerid"
        ],
        "values": [
            {
                "table": "customers",
                "column": "segment",
                "value": "KAM",
                "condition": "="
            },
            {
                "table": "customers",
                "column": "segment",
                "value": "KAM",
                "condition": "="
            }
        ],
        "db_id": "debit_card_specializing",
        "source": "bird_dev",
        "evidence": "Year 2012 can be presented as Between 201201 And 201212, which means between January and December in 2012",
        "values_list": [
            "customers.segment.kam",
            "customers.segment.kam"
        ]
    },
    {
        "question": "What was the difference in gas consumption between CZK-paying customers and EUR-paying customers in 2012?",
        "SQL": "SELECT SUM(IIF(T1.Currency = 'CZK', T2.Consumption, 0)) - SUM(IIF(T1.Currency = 'EUR', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2012'",
        "tables": [
            "customers",
            "yearmonth"
        ],
        "columns": [
            "yearmonth.customerid",
            "yearmonth.consumption",
            "yearmonth.date",
            "customers.currency",
            "customers.customerid"
        ],
        "values": [
            {
                "table": "customers",
                "column": "currency",
                "value": "CZK",
                "condition": "="
            },
            {
                "table": "customers",
                "column": "currency",
                "value": "EUR",
                "condition": "="
            }
        ],
        "db_id": "debit_card_specializing",
        "source": "bird_dev",
        "evidence": "Year 2012 can be presented as Between 201201 And 201212; The first 4 strings of the Date values in the yearmonth table can represent year; Difference in Consumption = CZK customers consumption in 2012 - EUR customers consumption in 2012",
        "values_list": [
            "customers.currency.czk",
            "customers.currency.eur"
        ]
    },
    {
        "question": "Which year recorded the most gas use paid in EUR?",
        "SQL": "SELECT SUBSTRING(T2.Date, 1, 4) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' GROUP BY SUBSTRING(T2.Date, 1, 4) ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
        "tables": [
            "customers",
            "yearmonth"
        ],
        "columns": [
            "yearmonth.customerid",
            "yearmonth.consumption",
            "yearmonth.date",
            "customers.currency",
            "customers.customerid"
        ],
        "values": [
            {
                "table": "customers",
                "column": "currency",
                "value": "EUR",
                "condition": "="
            }
        ],
        "db_id": "debit_card_specializing",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "customers.currency.eur"
        ]
    },
    {
        "question": "Which year recorded the most consumption of gas paid in CZK?",
        "SQL": "SELECT SUBSTR(T2.Date, 1, 4) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' GROUP BY SUBSTR(T2.Date, 1, 4) ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
        "tables": [
            "customers",
            "yearmonth"
        ],
        "columns": [
            "yearmonth.customerid",
            "yearmonth.consumption",
            "yearmonth.date",
            "customers.currency",
            "customers.customerid"
        ],
        "values": [
            {
                "table": "customers",
                "column": "currency",
                "value": "CZK",
                "condition": "="
            }
        ],
        "db_id": "debit_card_specializing",
        "source": "bird_dev",
        "evidence": "The first 4 strings of the Date values in the yearmonth table can represent year.",
        "values_list": [
            "customers.currency.czk"
        ]
    },
    {
        "question": "What was the gas consumption peak month for SME customers in 2013?",
        "SQL": "SELECT SUBSTR(T2.Date, 5, 2) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME' GROUP BY SUBSTR(T2.Date, 5, 2) ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
        "tables": [
            "customers",
            "yearmonth"
        ],
        "columns": [
            "yearmonth.customerid",
            "yearmonth.consumption",
            "customers.segment",
            "yearmonth.date",
            "customers.customerid"
        ],
        "values": [
            {
                "table": "customers",
                "column": "segment",
                "value": "SME",
                "condition": "="
            }
        ],
        "db_id": "debit_card_specializing",
        "source": "bird_dev",
        "evidence": "Year 2013 can be presented as Between 201301 And 201312; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month.",
        "values_list": [
            "customers.segment.sme"
        ]
    },
    {
        "question": "What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME?",
        "SQL": "SELECT CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Consumption = ( SELECT MIN(Consumption) FROM yearmonth ) AND T2.Date BETWEEN 201301 AND 201312",
        "tables": [
            "customers",
            "yearmonth"
        ],
        "columns": [
            "yearmonth.customerid",
            "yearmonth.consumption",
            "yearmonth.date",
            "customers.segment",
            "customers.currency",
            "customers.customerid"
        ],
        "values": [
            {
                "table": "customers",
                "column": "currency",
                "value": "CZK",
                "condition": "="
            },
            {
                "table": "customers",
                "column": "segment",
                "value": "SME",
                "condition": "="
            },
            {
                "table": "customers",
                "column": "segment",
                "value": "LAM",
                "condition": "="
            },
            {
                "table": "customers",
                "column": "segment",
                "value": "LAM",
                "condition": "="
            },
            {
                "table": "customers",
                "column": "segment",
                "value": "KAM",
                "condition": "="
            },
            {
                "table": "customers",
                "column": "segment",
                "value": "KAM",
                "condition": "="
            },
            {
                "table": "customers",
                "column": "segment",
                "value": "SME",
                "condition": "="
            }
        ],
        "db_id": "debit_card_specializing",
        "source": "bird_dev",
        "evidence": "annual average consumption of customer with the lowest consumption in each segment = total consumption per year / the number of customer with lowest consumption in each segment; Difference in annual average = SME's annual average - LAM's annual average; Difference in annual average = LAM's annual average - KAM's annual average; Year 2013 can be presented as Between 201301 And 201312; The first 4 strings of the Date values in the yearmonth table can represent year.",
        "values_list": [
            "customers.currency.czk",
            "customers.segment.sme",
            "customers.segment.lam",
            "customers.segment.lam",
            "customers.segment.kam",
            "customers.segment.kam",
            "customers.segment.sme"
        ]
    },
    {
        "question": "Who among KAM's customers consumed the most? How much did it consume?",
        "SQL": "SELECT T2.CustomerID, SUM(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' GROUP BY T2.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
        "tables": [
            "customers",
            "yearmonth"
        ],
        "columns": [
            "yearmonth.consumption",
            "customers.segment",
            "yearmonth.customerid",
            "customers.customerid"
        ],
        "values": [
            {
                "table": "customers",
                "column": "segment",
                "value": "KAM",
                "condition": "="
            }
        ],
        "db_id": "debit_card_specializing",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "customers.segment.kam"
        ]
    },
    {
        "question": "How many percent of LAM customer consumed more than 46.73?",
        "SQL": "SELECT CAST(SUM(IIF(T2.Consumption > 46.73, 1, 0)) AS FLOAT) * 100 / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM'",
        "tables": [
            "customers",
            "yearmonth"
        ],
        "columns": [
            "yearmonth.consumption",
            "customers.segment",
            "yearmonth.customerid",
            "customers.customerid"
        ],
        "values": [
            {
                "table": "customers",
                "column": "segment",
                "value": "LAM",
                "condition": "="
            },
            {
                "table": "yearmonth",
                "column": "consumption",
                "value": "46.73",
                "condition": ">"
            }
        ],
        "db_id": "debit_card_specializing",
        "source": "bird_dev",
        "evidence": "Percentage of LAM customer consumed more than 46.73 = (Total no. of LAM customers who consumed more than 46.73 / Total no. of LAM customers) * 100.",
        "values_list": [
            "customers.segment.lam",
            "yearmonth.consumption.46.73"
        ]
    },
    {
        "question": "Which country has more \"value for money\" gas stations? Please give a total number of \"value for money\" gas stations in each country.",
        "SQL": "SELECT Country , ( SELECT COUNT(GasStationID) FROM gasstations WHERE Segment = 'Value for money' ) FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country ORDER BY COUNT(GasStationID) DESC LIMIT 1",
        "tables": [
            "gasstations"
        ],
        "columns": [
            "gasstations.segment",
            "gasstations.gasstationid"
        ],
        "values": [
            {
                "table": "gasstations",
                "column": "segment",
                "value": "Value for money",
                "condition": "="
            },
            {
                "table": "",
                "column": "segment",
                "value": "Value for money",
                "condition": "="
            },
            {
                "table": "",
                "column": "segment",
                "value": "Value for money",
                "condition": "="
            }
        ],
        "db_id": "debit_card_specializing",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "gasstations.segment.value for money",
            ".segment.value for money",
            ".segment.value for money"
        ]
    },
    {
        "question": "What percentage of KAM customers pay in euros?",
        "SQL": "SELECT CAST(SUM(Currency = 'EUR') AS FLOAT) * 100 / COUNT(CustomerID) FROM customers WHERE Segment = 'KAM'",
        "tables": [
            "customers"
        ],
        "columns": [
            "customers.currency",
            "customers.segment",
            "customers.customerid"
        ],
        "values": [
            {
                "table": "customers",
                "column": "segment",
                "value": "KAM",
                "condition": "="
            },
            {
                "table": "customers",
                "column": "currency",
                "value": "EUR",
                "condition": "="
            }
        ],
        "db_id": "debit_card_specializing",
        "source": "bird_dev",
        "evidence": "Percentage of KAM uses Euro = (Total of KAM uses Euro / Total of KAM) * 100%.",
        "values_list": [
            "customers.segment.kam",
            "customers.currency.eur"
        ]
    },
    {
        "question": "What is the biggest monthly consumption of the customers who use euro as their currency?",
        "SQL": "SELECT SUM(T2.Consumption) / 12 AS MonthlyConsumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' GROUP BY T1.CustomerID ORDER BY MonthlyConsumption DESC LIMIT 1",
        "tables": [
            "customers",
            "yearmonth"
        ],
        "columns": [
            "yearmonth.consumption",
            "customers.currency",
            "yearmonth.customerid",
            "customers.customerid"
        ],
        "values": [
            {
                "table": "customers",
                "column": "currency",
                "value": "EUR",
                "condition": "="
            }
        ],
        "db_id": "debit_card_specializing",
        "source": "bird_dev",
        "evidence": "Monthly consumption = SUM(consumption) / 12",
        "values_list": [
            "customers.currency.eur"
        ]
    },
    {
        "question": "Please list the chains of the gas stations with transactions in euro.",
        "SQL": "SELECT DISTINCT T3.ChainID FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN gasstations AS T3 ON T1.GasStationID = T3.GasStationID WHERE T2.Currency = 'EUR'",
        "tables": [
            "transactions_1k",
            "customers",
            "gasstations"
        ],
        "columns": [
            "gasstations.gasstationid",
            "transactions_1k.customerid",
            "gasstations.chainid",
            "transactions_1k.gasstationid",
            "customers.currency",
            "customers.customerid"
        ],
        "values": [
            {
                "table": "customers",
                "column": "currency",
                "value": "EUR",
                "condition": "="
            }
        ],
        "db_id": "debit_card_specializing",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "customers.currency.eur"
        ]
    },
    {
        "question": "Please list the product description of the products bought in transactions in euro.",
        "SQL": "SELECT DISTINCT T1.ProductID, T3.Description FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Currency = 'EUR'",
        "tables": [
            "transactions_1k",
            "customers",
            "products"
        ],
        "columns": [
            "products.description",
            "products.productid",
            "transactions_1k.customerid",
            "transactions_1k.productid",
            "customers.currency",
            "customers.customerid"
        ],
        "values": [
            {
                "table": "customers",
                "column": "currency",
                "value": "EUR",
                "condition": "="
            }
        ],
        "db_id": "debit_card_specializing",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "customers.currency.eur"
        ]
    },
    {
        "question": "Please list the product descriptions of the transactions taken place in the gas stations in the Czech Republic.",
        "SQL": "SELECT DISTINCT T3.Description FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Country = 'CZE'",
        "tables": [
            "transactions_1k",
            "products",
            "gasstations"
        ],
        "columns": [
            "transactions_1k.productid",
            "gasstations.gasstationid",
            "products.description",
            "products.productid",
            "transactions_1k.gasstationid",
            "gasstations.country"
        ],
        "values": [
            {
                "table": "gasstations",
                "column": "country",
                "value": "CZE",
                "condition": "="
            }
        ],
        "db_id": "debit_card_specializing",
        "source": "bird_dev",
        "evidence": "Czech Republic can be represented as the Country value in the gasstations table is 'CZE'; ",
        "values_list": [
            "gasstations.country.cze"
        ]
    },
    {
        "question": "How many transactions taken place in the gas station in the Czech Republic are with a price of over 1000?",
        "SQL": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Price > 1000",
        "tables": [
            "transactions_1k",
            "gasstations"
        ],
        "columns": [
            "gasstations.gasstationid",
            "transactions_1k.transactionid",
            "transactions_1k.price",
            "transactions_1k.gasstationid",
            "gasstations.country"
        ],
        "values": [
            {
                "table": "gasstations",
                "column": "country",
                "value": "CZE",
                "condition": "="
            },
            {
                "table": "transactions_1k",
                "column": "price",
                "value": "1000",
                "condition": ">"
            }
        ],
        "db_id": "debit_card_specializing",
        "source": "bird_dev",
        "evidence": "Gas station in the Czech Republic implies that Country = 'CZE'",
        "values_list": [
            "gasstations.country.cze",
            "transactions_1k.price.1000"
        ]
    },
    {
        "question": "Among the transactions made in the gas stations in the Czech Republic, how many of them are taken place after 2012/1/1?",
        "SQL": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND STRFTIME('%Y', T1.Date) >= '2012'",
        "tables": [
            "transactions_1k",
            "gasstations"
        ],
        "columns": [
            "transactions_1k.date",
            "gasstations.gasstationid",
            "transactions_1k.transactionid",
            "transactions_1k.gasstationid",
            "gasstations.country"
        ],
        "values": [
            {
                "table": "gasstations",
                "column": "country",
                "value": "CZE",
                "condition": "="
            }
        ],
        "db_id": "debit_card_specializing",
        "source": "bird_dev",
        "evidence": "Czech Republic can be represented as the Country value in the gasstations table is 'CZE'",
        "values_list": [
            "gasstations.country.cze"
        ]
    },
    {
        "question": "What is the average total price of the transactions taken place in gas stations in the Czech Republic?",
        "SQL": "SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE'",
        "tables": [
            "transactions_1k",
            "gasstations"
        ],
        "columns": [
            "gasstations.gasstationid",
            "gasstations.country",
            "transactions_1k.gasstationid",
            "transactions_1k.price"
        ],
        "values": [
            {
                "table": "gasstations",
                "column": "country",
                "value": "CZE",
                "condition": "="
            }
        ],
        "db_id": "debit_card_specializing",
        "source": "bird_dev",
        "evidence": "Gas station in the Czech Republic implies that Country = 'CZE'",
        "values_list": [
            "gasstations.country.cze"
        ]
    },
    {
        "question": "For the customers who paid in the euro, what is their average total price of the transactions?",
        "SQL": "SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Currency = 'EUR'",
        "tables": [
            "transactions_1k",
            "customers",
            "gasstations"
        ],
        "columns": [
            "gasstations.gasstationid",
            "transactions_1k.price",
            "transactions_1k.customerid",
            "transactions_1k.gasstationid",
            "customers.currency",
            "customers.customerid"
        ],
        "values": [
            {
                "table": "customers",
                "column": "currency",
                "value": "EUR",
                "condition": "="
            }
        ],
        "db_id": "debit_card_specializing",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "customers.currency.eur"
        ]
    },
    {
        "question": "What is the percentage of \"premium\" against the overall segment in Country = \"SVK\"?",
        "SQL": "SELECT CAST(SUM(IIF(Country = 'SVK' AND Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / SUM(IIF(Country = 'SVK', 1, 0)) FROM gasstations",
        "tables": [
            "gasstations"
        ],
        "columns": [
            "gasstations.segment",
            "gasstations.country"
        ],
        "values": [
            {
                "table": "gasstations",
                "column": "country",
                "value": "SVK",
                "condition": "="
            },
            {
                "table": "gasstations",
                "column": "country",
                "value": "SVK",
                "condition": "="
            },
            {
                "table": "gasstations",
                "column": "segment",
                "value": "Premium",
                "condition": "="
            }
        ],
        "db_id": "debit_card_specializing",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "gasstations.country.svk",
            "gasstations.country.svk",
            "gasstations.segment.premium"
        ]
    },
    {
        "question": "What is the average, minimum, and maximum age of all singers from France?",
        "SQL": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "tables": [
            "singer"
        ],
        "columns": [
            "singer.age",
            "singer.country"
        ],
        "values": [
            {
                "table": "singer",
                "column": "country",
                "value": "France",
                "condition": "="
            }
        ],
        "db_id": "concert_singer",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "singer.country.france"
        ]
    },
    {
        "question": "Find the number of dog pets that are raised by female students (with sex F).",
        "SQL": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "tables": [
            "has_pet",
            "pets",
            "student"
        ],
        "columns": [
            "student.sex",
            "has_pet.petid",
            "pets.petid",
            "has_pet.stuid",
            "pets.pettype",
            "student.stuid"
        ],
        "values": [
            {
                "table": "student",
                "column": "sex",
                "value": "F",
                "condition": "="
            },
            {
                "table": "pets",
                "column": "pettype",
                "value": "dog",
                "condition": "="
            }
        ],
        "db_id": "pets_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "student.sex.f",
            "pets.pettype.dog"
        ]
    },
    {
        "question": "How many dog pets are raised by female students?",
        "SQL": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "tables": [
            "has_pet",
            "pets",
            "student"
        ],
        "columns": [
            "student.sex",
            "has_pet.petid",
            "pets.petid",
            "has_pet.stuid",
            "pets.pettype",
            "student.stuid"
        ],
        "values": [
            {
                "table": "student",
                "column": "sex",
                "value": "F",
                "condition": "="
            },
            {
                "table": "pets",
                "column": "pettype",
                "value": "dog",
                "condition": "="
            }
        ],
        "db_id": "pets_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "student.sex.f",
            "pets.pettype.dog"
        ]
    },
    {
        "question": "Find the first name of students who have cat or dog pet.",
        "SQL": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "tables": [
            "has_pet",
            "pets",
            "student"
        ],
        "columns": [
            "pets.petid",
            "has_pet.petid",
            "student.fname",
            "has_pet.stuid",
            "pets.pettype",
            "student.stuid"
        ],
        "values": [
            {
                "table": "pets",
                "column": "pettype",
                "value": "cat",
                "condition": "="
            },
            {
                "table": "pets",
                "column": "pettype",
                "value": "dog",
                "condition": "="
            }
        ],
        "db_id": "pets_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "pets.pettype.cat",
            "pets.pettype.dog"
        ]
    },
    {
        "question": "What are the first names of every student who has a cat or dog as a pet?",
        "SQL": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "tables": [
            "has_pet",
            "pets",
            "student"
        ],
        "columns": [
            "pets.petid",
            "has_pet.petid",
            "student.fname",
            "has_pet.stuid",
            "pets.pettype",
            "student.stuid"
        ],
        "values": [
            {
                "table": "pets",
                "column": "pettype",
                "value": "cat",
                "condition": "="
            },
            {
                "table": "pets",
                "column": "pettype",
                "value": "dog",
                "condition": "="
            }
        ],
        "db_id": "pets_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "pets.pettype.cat",
            "pets.pettype.dog"
        ]
    },
    {
        "question": "Find the first name of students who have both cat and dog pets .",
        "SQL": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'",
        "tables": [
            "has_pet",
            "pets",
            "student"
        ],
        "columns": [
            "pets.petid",
            "has_pet.petid",
            "student.fname",
            "has_pet.stuid",
            "pets.pettype",
            "student.stuid"
        ],
        "values": [
            {
                "table": "pets",
                "column": "pettype",
                "value": "cat",
                "condition": "="
            },
            {
                "table": "pets",
                "column": "pettype",
                "value": "dog",
                "condition": "="
            }
        ],
        "db_id": "pets_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "pets.pettype.cat",
            "pets.pettype.dog"
        ]
    },
    {
        "question": "What are the students' first names who have both cats and dogs as pets?",
        "SQL": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
        "tables": [
            "has_pet",
            "pets",
            "student"
        ],
        "columns": [
            "pets.petid",
            "has_pet.petid",
            "student.fname",
            "has_pet.stuid",
            "pets.pettype",
            "student.stuid"
        ],
        "values": [
            {
                "table": "pets",
                "column": "pettype",
                "value": "cat",
                "condition": "="
            },
            {
                "table": "pets",
                "column": "pettype",
                "value": "dog",
                "condition": "="
            }
        ],
        "db_id": "pets_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "pets.pettype.cat",
            "pets.pettype.dog"
        ]
    },
    {
        "question": "Find the major and age of students who do not have a cat pet.",
        "SQL": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "tables": [
            "has_pet",
            "pets",
            "student"
        ],
        "columns": [
            "pets.petid",
            "has_pet.petid",
            "has_pet.stuid",
            "student.major",
            "pets.pettype",
            "student.age",
            "student.stuid"
        ],
        "values": [
            {
                "table": "pets",
                "column": "pettype",
                "value": "cat",
                "condition": "="
            }
        ],
        "db_id": "pets_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "pets.pettype.cat"
        ]
    },
    {
        "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "SQL": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "tables": [
            "has_pet",
            "pets",
            "student"
        ],
        "columns": [
            "pets.petid",
            "has_pet.petid",
            "has_pet.stuid",
            "student.major",
            "pets.pettype",
            "student.age",
            "student.stuid"
        ],
        "values": [
            {
                "table": "pets",
                "column": "pettype",
                "value": "cat",
                "condition": "="
            }
        ],
        "db_id": "pets_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "pets.pettype.cat"
        ]
    },
    {
        "question": "Find the id of students who do not have a cat pet.",
        "SQL": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
        "tables": [
            "has_pet",
            "pets",
            "student"
        ],
        "columns": [
            "pets.petid",
            "has_pet.petid",
            "has_pet.stuid",
            "pets.pettype",
            "student.stuid"
        ],
        "values": [
            {
                "table": "pets",
                "column": "pettype",
                "value": "cat",
                "condition": "="
            }
        ],
        "db_id": "pets_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "pets.pettype.cat"
        ]
    },
    {
        "question": "What are the ids of the students who do not own cats as pets?",
        "SQL": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
        "tables": [
            "has_pet",
            "pets",
            "student"
        ],
        "columns": [
            "pets.petid",
            "has_pet.petid",
            "has_pet.stuid",
            "pets.pettype",
            "student.stuid"
        ],
        "values": [
            {
                "table": "pets",
                "column": "pettype",
                "value": "cat",
                "condition": "="
            }
        ],
        "db_id": "pets_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "pets.pettype.cat"
        ]
    },
    {
        "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
        "SQL": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "tables": [
            "has_pet",
            "pets",
            "student"
        ],
        "columns": [
            "pets.petid",
            "has_pet.petid",
            "student.fname",
            "has_pet.stuid",
            "pets.pettype",
            "student.age",
            "student.stuid"
        ],
        "values": [
            {
                "table": "pets",
                "column": "pettype",
                "value": "dog",
                "condition": "="
            },
            {
                "table": "pets",
                "column": "pettype",
                "value": "cat",
                "condition": "="
            }
        ],
        "db_id": "pets_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "pets.pettype.dog",
            "pets.pettype.cat"
        ]
    },
    {
        "question": "What is the first name of every student who has a dog but does not have a cat?",
        "SQL": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "tables": [
            "has_pet",
            "pets",
            "student"
        ],
        "columns": [
            "pets.petid",
            "has_pet.petid",
            "student.fname",
            "has_pet.stuid",
            "pets.pettype",
            "student.age",
            "student.stuid"
        ],
        "values": [
            {
                "table": "pets",
                "column": "pettype",
                "value": "dog",
                "condition": "="
            },
            {
                "table": "pets",
                "column": "pettype",
                "value": "cat",
                "condition": "="
            }
        ],
        "db_id": "pets_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "pets.pettype.dog",
            "pets.pettype.cat"
        ]
    },
    {
        "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
        "SQL": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "tables": [
            "has_pet",
            "student"
        ],
        "columns": [
            "student.stuid",
            "has_pet.stuid",
            "student.lname",
            "has_pet.petid"
        ],
        "values": [
            {
                "table": "student",
                "column": "lname",
                "value": "Smith",
                "condition": "="
            }
        ],
        "db_id": "pets_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "student.lname.smith"
        ]
    },
    {
        "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
        "SQL": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "tables": [
            "has_pet",
            "student"
        ],
        "columns": [
            "student.stuid",
            "has_pet.stuid",
            "student.lname",
            "has_pet.petid"
        ],
        "values": [
            {
                "table": "student",
                "column": "lname",
                "value": "Smith",
                "condition": "="
            }
        ],
        "db_id": "pets_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "student.lname.smith"
        ]
    },
    {
        "question": "Find the last name of the student who has a cat that is age 3.",
        "SQL": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "tables": [
            "has_pet",
            "pets",
            "student"
        ],
        "columns": [
            "pets.petid",
            "has_pet.petid",
            "has_pet.stuid",
            "pets.pettype",
            "pets.pet_age",
            "student.lname",
            "student.stuid"
        ],
        "values": [
            {
                "table": "pets",
                "column": "pet_age",
                "value": "3",
                "condition": "="
            },
            {
                "table": "pets",
                "column": "pettype",
                "value": "cat",
                "condition": "="
            }
        ],
        "db_id": "pets_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "pets.pet_age.3",
            "pets.pettype.cat"
        ]
    },
    {
        "question": "What is the last name of the student who has a cat that is 3 years old?",
        "SQL": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "tables": [
            "has_pet",
            "pets",
            "student"
        ],
        "columns": [
            "pets.petid",
            "has_pet.petid",
            "has_pet.stuid",
            "pets.pettype",
            "pets.pet_age",
            "student.lname",
            "student.stuid"
        ],
        "values": [
            {
                "table": "pets",
                "column": "pet_age",
                "value": "3",
                "condition": "="
            },
            {
                "table": "pets",
                "column": "pettype",
                "value": "cat",
                "condition": "="
            }
        ],
        "db_id": "pets_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "pets.pet_age.3",
            "pets.pettype.cat"
        ]
    },
    {
        "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "SQL": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "tables": [
            "car_names",
            "cars_data"
        ],
        "columns": [
            "car_names.makeid",
            "cars_data.id",
            "car_names.make",
            "cars_data.accelerate"
        ],
        "values": [
            {
                "table": "car_names",
                "column": "make",
                "value": "amc hornet sportabout (sw)",
                "condition": "="
            }
        ],
        "db_id": "car_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "car_names.make.amc hornet sportabout (sw)"
        ]
    },
    {
        "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
        "SQL": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "tables": [
            "car_names",
            "cars_data"
        ],
        "columns": [
            "car_names.makeid",
            "cars_data.id",
            "car_names.make",
            "cars_data.accelerate"
        ],
        "values": [
            {
                "table": "car_names",
                "column": "make",
                "value": "amc hornet sportabout (sw)",
                "condition": "="
            }
        ],
        "db_id": "car_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "car_names.make.amc hornet sportabout (sw)"
        ]
    },
    {
        "question": "How many car makers are there in france?",
        "SQL": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
        "tables": [
            "countries",
            "car_makers"
        ],
        "columns": [
            "countries.countryname",
            "countries.countryid",
            "car_makers.country"
        ],
        "values": [
            {
                "table": "countries",
                "column": "countryname",
                "value": "france",
                "condition": "="
            }
        ],
        "db_id": "car_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "countries.countryname.france"
        ]
    },
    {
        "question": "What is the number of makers of care in France?",
        "SQL": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
        "tables": [
            "countries",
            "car_makers"
        ],
        "columns": [
            "countries.countryname",
            "countries.countryid",
            "car_makers.country"
        ],
        "values": [
            {
                "table": "countries",
                "column": "countryname",
                "value": "france",
                "condition": "="
            }
        ],
        "db_id": "car_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "countries.countryname.france"
        ]
    },
    {
        "question": "How many car models are produced in the usa?",
        "SQL": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "tables": [
            "countries",
            "model_list",
            "car_makers"
        ],
        "columns": [
            "model_list.maker",
            "countries.countryname",
            "car_makers.country",
            "car_makers.id",
            "countries.countryid"
        ],
        "values": [
            {
                "table": "countries",
                "column": "countryname",
                "value": "usa",
                "condition": "="
            }
        ],
        "db_id": "car_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "countries.countryname.usa"
        ]
    },
    {
        "question": "Which countries in europe have at least 3 car manufacturers?",
        "SQL": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "tables": [
            "continents",
            "countries",
            "car_makers"
        ],
        "columns": [
            "countries.countryname",
            "countries.continent",
            "continents.contid",
            "continents.continent",
            "car_makers.country",
            "countries.countryid"
        ],
        "values": [
            {
                "table": "continents",
                "column": "continent",
                "value": "europe",
                "condition": "="
            }
        ],
        "db_id": "car_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "continents.continent.europe"
        ]
    },
    {
        "question": "What are the names of all European countries with at least 3 manufacturers?",
        "SQL": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "tables": [
            "continents",
            "countries",
            "car_makers"
        ],
        "columns": [
            "countries.countryname",
            "countries.continent",
            "continents.contid",
            "continents.continent",
            "car_makers.country",
            "countries.countryid"
        ],
        "values": [
            {
                "table": "continents",
                "column": "continent",
                "value": "europe",
                "condition": "="
            }
        ],
        "db_id": "car_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "continents.continent.europe"
        ]
    },
    {
        "question": "What is the average edispl of the cars of model volvo?",
        "SQL": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
        "tables": [
            "car_names",
            "cars_data"
        ],
        "columns": [
            "cars_data.edispl",
            "car_names.model",
            "cars_data.id",
            "car_names.makeid"
        ],
        "values": [
            {
                "table": "car_names",
                "column": "model",
                "value": "volvo",
                "condition": "="
            }
        ],
        "db_id": "car_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "car_names.model.volvo"
        ]
    },
    {
        "question": "What is the average edispl for all volvos?",
        "SQL": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
        "tables": [
            "car_names",
            "cars_data"
        ],
        "columns": [
            "cars_data.edispl",
            "car_names.model",
            "cars_data.id",
            "car_names.makeid"
        ],
        "values": [
            {
                "table": "car_names",
                "column": "model",
                "value": "volvo",
                "condition": "="
            }
        ],
        "db_id": "car_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "car_names.model.volvo"
        ]
    },
    {
        "question": "How many car models were produced by the maker with full name American Motor Company?",
        "SQL": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "tables": [
            "model_list",
            "car_makers"
        ],
        "columns": [
            "car_makers.id",
            "car_makers.fullname",
            "model_list.maker"
        ],
        "values": [
            {
                "table": "car_makers",
                "column": "fullname",
                "value": "American Motor Company",
                "condition": "="
            }
        ],
        "db_id": "car_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "car_makers.fullname.american motor company"
        ]
    },
    {
        "question": "What is the number of car models created by the car maker American Motor Company?",
        "SQL": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "tables": [
            "model_list",
            "car_makers"
        ],
        "columns": [
            "car_makers.id",
            "car_makers.fullname",
            "model_list.maker"
        ],
        "values": [
            {
                "table": "car_makers",
                "column": "fullname",
                "value": "American Motor Company",
                "condition": "="
            }
        ],
        "db_id": "car_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "car_makers.fullname.american motor company"
        ]
    },
    {
        "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "SQL": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "tables": [
            "car_names",
            "model_list",
            "car_makers",
            "cars_data"
        ],
        "columns": [
            "model_list.maker",
            "model_list.model",
            "car_makers.fullname",
            "car_names.model",
            "cars_data.id",
            "car_makers.id",
            "car_names.makeid",
            "cars_data.weight"
        ],
        "values": [
            {
                "table": "car_makers",
                "column": "fullname",
                "value": "General Motors",
                "condition": "="
            },
            {
                "table": "cars_data",
                "column": "weight",
                "value": "3500",
                "condition": ">"
            }
        ],
        "db_id": "car_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "car_makers.fullname.general motors",
            "cars_data.weight.3500"
        ]
    },
    {
        "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "SQL": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "tables": [
            "car_names",
            "model_list",
            "car_makers",
            "cars_data"
        ],
        "columns": [
            "model_list.maker",
            "model_list.model",
            "car_makers.fullname",
            "car_names.model",
            "cars_data.id",
            "car_makers.id",
            "car_names.makeid",
            "cars_data.weight"
        ],
        "values": [
            {
                "table": "car_makers",
                "column": "fullname",
                "value": "General Motors",
                "condition": "="
            },
            {
                "table": "cars_data",
                "column": "weight",
                "value": "3500",
                "condition": ">"
            }
        ],
        "db_id": "car_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "car_makers.fullname.general motors",
            "cars_data.weight.3500"
        ]
    },
    {
        "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "SQL": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "tables": [
            "car_names",
            "cars_data"
        ],
        "columns": [
            "cars_data.accelerate",
            "cars_data.id",
            "cars_data.cylinders",
            "car_names.model",
            "car_names.makeid"
        ],
        "values": [
            {
                "table": "car_names",
                "column": "model",
                "value": "volvo",
                "condition": "="
            }
        ],
        "db_id": "car_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "car_names.model.volvo"
        ]
    },
    {
        "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "SQL": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "tables": [
            "car_names",
            "cars_data"
        ],
        "columns": [
            "cars_data.accelerate",
            "cars_data.id",
            "cars_data.cylinders",
            "car_names.model",
            "car_names.makeid"
        ],
        "values": [
            {
                "table": "car_names",
                "column": "model",
                "value": "volvo",
                "condition": "="
            }
        ],
        "db_id": "car_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "car_names.model.volvo"
        ]
    },
    {
        "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "SQL": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "tables": [
            "car_names",
            "model_list",
            "car_makers",
            "cars_data"
        ],
        "columns": [
            "model_list.maker",
            "model_list.model",
            "car_makers.fullname",
            "cars_data.id",
            "car_names.model",
            "car_makers.id",
            "car_names.makeid",
            "cars_data.weight"
        ],
        "values": [
            {
                "table": "cars_data",
                "column": "weight",
                "value": "3500",
                "condition": "<"
            },
            {
                "table": "car_makers",
                "column": "fullname",
                "value": "Ford Motor Company",
                "condition": "!="
            }
        ],
        "db_id": "car_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "cars_data.weight.3500",
            "car_makers.fullname.ford motor company"
        ]
    },
    {
        "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "SQL": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "tables": [
            "car_names",
            "model_list",
            "car_makers",
            "cars_data"
        ],
        "columns": [
            "model_list.maker",
            "model_list.model",
            "car_makers.fullname",
            "cars_data.id",
            "car_names.model",
            "car_makers.id",
            "car_names.makeid",
            "cars_data.weight"
        ],
        "values": [
            {
                "table": "cars_data",
                "column": "weight",
                "value": "3500",
                "condition": "<"
            },
            {
                "table": "car_makers",
                "column": "fullname",
                "value": "Ford Motor Company",
                "condition": "!="
            }
        ],
        "db_id": "car_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "cars_data.weight.3500",
            "car_makers.fullname.ford motor company"
        ]
    },
    {
        "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
        "SQL": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';",
        "tables": [
            "countries",
            "model_list",
            "car_makers"
        ],
        "columns": [
            "model_list.maker",
            "countries.countryname",
            "model_list.model",
            "car_makers.country",
            "car_makers.id",
            "countries.countryid"
        ],
        "values": [
            {
                "table": "model_list",
                "column": "model",
                "value": "fiat",
                "condition": "="
            }
        ],
        "db_id": "car_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "model_list.model.fiat"
        ]
    },
    {
        "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
        "SQL": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';",
        "tables": [
            "countries",
            "model_list",
            "car_makers"
        ],
        "columns": [
            "model_list.maker",
            "countries.countryname",
            "model_list.model",
            "car_makers.country",
            "car_makers.id",
            "countries.countryid"
        ],
        "values": [
            {
                "table": "model_list",
                "column": "model",
                "value": "fiat",
                "condition": "="
            }
        ],
        "db_id": "car_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "model_list.model.fiat"
        ]
    },
    {
        "question": "How many documents are using the template with type code 'PPT'?",
        "SQL": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "tables": [
            "documents",
            "templates"
        ],
        "columns": [
            "documents.template_id",
            "templates.template_id",
            "templates.template_type_code"
        ],
        "values": [
            {
                "table": "templates",
                "column": "template_type_code",
                "value": "PPT",
                "condition": "="
            }
        ],
        "db_id": "cre_Doc_Template_Mgt",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "templates.template_type_code.ppt"
        ]
    },
    {
        "question": "Count the number of documents that use the PPT template type.",
        "SQL": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "tables": [
            "documents",
            "templates"
        ],
        "columns": [
            "documents.template_id",
            "templates.template_id",
            "templates.template_type_code"
        ],
        "values": [
            {
                "table": "templates",
                "column": "template_type_code",
                "value": "PPT",
                "condition": "="
            }
        ],
        "db_id": "cre_Doc_Template_Mgt",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "templates.template_type_code.ppt"
        ]
    },
    {
        "question": "How many paragraphs for the document with name 'Summer Show'?",
        "SQL": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
        "tables": [
            "documents",
            "paragraphs"
        ],
        "columns": [
            "documents.document_name",
            "documents.document_id",
            "paragraphs.document_id"
        ],
        "values": [
            {
                "table": "documents",
                "column": "document_name",
                "value": "Summer Show",
                "condition": "="
            }
        ],
        "db_id": "cre_Doc_Template_Mgt",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "documents.document_name.summer show"
        ]
    },
    {
        "question": "Count the number of paragraphs in the document named 'Summer Show'.",
        "SQL": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
        "tables": [
            "documents",
            "paragraphs"
        ],
        "columns": [
            "documents.document_name",
            "documents.document_id",
            "paragraphs.document_id"
        ],
        "values": [
            {
                "table": "documents",
                "column": "document_name",
                "value": "Summer Show",
                "condition": "="
            }
        ],
        "db_id": "cre_Doc_Template_Mgt",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "documents.document_name.summer show"
        ]
    },
    {
        "question": "Show paragraph details for paragraph with text 'Korea ' .",
        "SQL": "select other_details from paragraphs where paragraph_text like 'korea'",
        "tables": [
            "paragraphs"
        ],
        "columns": [
            "paragraphs.other_details",
            "paragraphs.paragraph_text"
        ],
        "values": [
            {
                "table": "paragraphs",
                "column": "paragraph_text",
                "value": "korea",
                "condition": "LIKE"
            }
        ],
        "db_id": "cre_Doc_Template_Mgt",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "paragraphs.paragraph_text.korea"
        ]
    },
    {
        "question": "What are the details for the paragraph that includes the text 'Korea ' ?",
        "SQL": "select other_details from paragraphs where paragraph_text like 'korea'",
        "tables": [
            "paragraphs"
        ],
        "columns": [
            "paragraphs.other_details",
            "paragraphs.paragraph_text"
        ],
        "values": [
            {
                "table": "paragraphs",
                "column": "paragraph_text",
                "value": "korea",
                "condition": "LIKE"
            }
        ],
        "db_id": "cre_Doc_Template_Mgt",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "paragraphs.paragraph_text.korea"
        ]
    },
    {
        "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "SQL": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
        "tables": [
            "documents",
            "paragraphs"
        ],
        "columns": [
            "documents.document_name",
            "documents.document_id",
            "paragraphs.paragraph_text",
            "paragraphs.paragraph_id",
            "paragraphs.document_id"
        ],
        "values": [
            {
                "table": "documents",
                "column": "document_name",
                "value": "Welcome to NY",
                "condition": "="
            }
        ],
        "db_id": "cre_Doc_Template_Mgt",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "documents.document_name.welcome to ny"
        ]
    },
    {
        "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
        "SQL": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
        "tables": [
            "documents",
            "paragraphs"
        ],
        "columns": [
            "documents.document_name",
            "documents.document_id",
            "paragraphs.paragraph_text",
            "paragraphs.paragraph_id",
            "paragraphs.document_id"
        ],
        "values": [
            {
                "table": "documents",
                "column": "document_name",
                "value": "Welcome to NY",
                "condition": "="
            }
        ],
        "db_id": "cre_Doc_Template_Mgt",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "documents.document_name.welcome to ny"
        ]
    },
    {
        "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
        "SQL": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
        "tables": [
            "paragraphs"
        ],
        "columns": [],
        "values": [
            {
                "table": "",
                "column": "paragraph_text",
                "value": "Brazil",
                "condition": "="
            },
            {
                "table": "",
                "column": "paragraph_text",
                "value": "Ireland",
                "condition": "="
            }
        ],
        "db_id": "cre_Doc_Template_Mgt",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            ".paragraph_text.brazil",
            ".paragraph_text.ireland"
        ]
    },
    {
        "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
        "SQL": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
        "tables": [
            "paragraphs"
        ],
        "columns": [],
        "values": [
            {
                "table": "",
                "column": "paragraph_text",
                "value": "Brazil",
                "condition": "="
            },
            {
                "table": "",
                "column": "paragraph_text",
                "value": "Ireland",
                "condition": "="
            }
        ],
        "db_id": "cre_Doc_Template_Mgt",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            ".paragraph_text.brazil",
            ".paragraph_text.ireland"
        ]
    },
    {
        "question": "What are the opening year and staff number of the museum named Plaza Museum?",
        "SQL": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
        "tables": [
            "museum"
        ],
        "columns": [
            "museum.num_of_staff",
            "museum.name",
            "museum.open_year"
        ],
        "values": [
            {
                "table": "museum",
                "column": "name",
                "value": "Plaza Museum",
                "condition": "="
            }
        ],
        "db_id": "museum_visit",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "museum.name.plaza museum"
        ]
    },
    {
        "question": "List the first name and birth date of all players from the country with code USA.",
        "SQL": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
        "tables": [
            "players"
        ],
        "columns": [
            "players.first_name",
            "players.country_code",
            "players.birth_date"
        ],
        "values": [
            {
                "table": "players",
                "column": "country_code",
                "value": "USA",
                "condition": "="
            }
        ],
        "db_id": "wta_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "players.country_code.usa"
        ]
    },
    {
        "question": "What are the first names and birth dates of players from the USA?",
        "SQL": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
        "tables": [
            "players"
        ],
        "columns": [
            "players.first_name",
            "players.country_code",
            "players.birth_date"
        ],
        "values": [
            {
                "table": "players",
                "column": "country_code",
                "value": "USA",
                "condition": "="
            }
        ],
        "db_id": "wta_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "players.country_code.usa"
        ]
    },
    {
        "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "SQL": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "tables": [
            "matches",
            "players"
        ],
        "columns": [
            "matches.tourney_name",
            "players.country_code",
            "players.player_id",
            "matches.winner_id",
            "players.first_name"
        ],
        "values": [
            {
                "table": "matches",
                "column": "tourney_name",
                "value": "WTA Championships",
                "condition": "="
            },
            {
                "table": "matches",
                "column": "tourney_name",
                "value": "Australian Open",
                "condition": "="
            }
        ],
        "db_id": "wta_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "matches.tourney_name.wta championships",
            "matches.tourney_name.australian open"
        ]
    },
    {
        "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "SQL": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "tables": [
            "matches",
            "players"
        ],
        "columns": [
            "matches.tourney_name",
            "players.country_code",
            "players.player_id",
            "matches.winner_id",
            "players.first_name"
        ],
        "values": [
            {
                "table": "matches",
                "column": "tourney_name",
                "value": "WTA Championships",
                "condition": "="
            },
            {
                "table": "matches",
                "column": "tourney_name",
                "value": "Australian Open",
                "condition": "="
            }
        ],
        "db_id": "wta_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "matches.tourney_name.wta championships",
            "matches.tourney_name.australian open"
        ]
    },
    {
        "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "SQL": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "tables": [
            "players"
        ],
        "columns": [
            "players.first_name",
            "players.hand",
            "players.last_name",
            "players.birth_date"
        ],
        "values": [
            {
                "table": "players",
                "column": "hand",
                "value": "L",
                "condition": "="
            }
        ],
        "db_id": "wta_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "players.hand.l"
        ]
    },
    {
        "question": "What are the full names of all left handed players, in order of birth date?",
        "SQL": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "tables": [
            "players"
        ],
        "columns": [
            "players.first_name",
            "players.hand",
            "players.last_name",
            "players.birth_date"
        ],
        "values": [
            {
                "table": "players",
                "column": "hand",
                "value": "L",
                "condition": "="
            }
        ],
        "db_id": "wta_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "players.hand.l"
        ]
    },
    {
        "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "tables": [
            "matches"
        ],
        "columns": [
            "matches.tourney_name",
            "matches.winner_rank_points",
            "matches.winner_name"
        ],
        "values": [
            {
                "table": "matches",
                "column": "tourney_name",
                "value": "Australian Open",
                "condition": "="
            }
        ],
        "db_id": "wta_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "matches.tourney_name.australian open"
        ]
    },
    {
        "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "tables": [
            "matches"
        ],
        "columns": [
            "matches.tourney_name",
            "matches.winner_rank_points",
            "matches.winner_name"
        ],
        "values": [
            {
                "table": "matches",
                "column": "tourney_name",
                "value": "Australian Open",
                "condition": "="
            }
        ],
        "db_id": "wta_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "matches.tourney_name.australian open"
        ]
    },
    {
        "question": "How many different winners both participated in the WTA Championships and were left handed?",
        "SQL": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "tables": [
            "matches"
        ],
        "columns": [
            "matches.tourney_name",
            "matches.winner_name",
            "matches.winner_hand"
        ],
        "values": [
            {
                "table": "matches",
                "column": "tourney_name",
                "value": "WTA Championships",
                "condition": "="
            },
            {
                "table": "matches",
                "column": "winner_hand",
                "value": "L",
                "condition": "="
            }
        ],
        "db_id": "wta_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "matches.tourney_name.wta championships",
            "matches.winner_hand.l"
        ]
    },
    {
        "question": "Find the number of left handed winners who participated in the WTA Championships.",
        "SQL": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "tables": [
            "matches"
        ],
        "columns": [
            "matches.tourney_name",
            "matches.winner_name",
            "matches.winner_hand"
        ],
        "values": [
            {
                "table": "matches",
                "column": "tourney_name",
                "value": "WTA Championships",
                "condition": "="
            },
            {
                "table": "matches",
                "column": "winner_hand",
                "value": "L",
                "condition": "="
            }
        ],
        "db_id": "wta_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "matches.tourney_name.wta championships",
            "matches.winner_hand.l"
        ]
    },
    {
        "question": "How many ships ended up being 'Captured'?",
        "SQL": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'",
        "tables": [
            "ship"
        ],
        "columns": [
            "ship.disposition_of_ship"
        ],
        "values": [
            {
                "table": "ship",
                "column": "disposition_of_ship",
                "value": "Captured",
                "condition": "="
            }
        ],
        "db_id": "battle_death",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "ship.disposition_of_ship.captured"
        ]
    },
    {
        "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
        "SQL": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",
        "tables": [
            "ship",
            "death"
        ],
        "columns": [
            "ship.id",
            "death.killed",
            "death.injured",
            "ship.tonnage",
            "death.caused_by_ship_id"
        ],
        "values": [
            {
                "table": "ship",
                "column": "tonnage",
                "value": "t",
                "condition": "="
            }
        ],
        "db_id": "battle_death",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "ship.tonnage.t"
        ]
    },
    {
        "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "SQL": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
        "tables": [
            "battle"
        ],
        "columns": [
            "battle.result",
            "battle.bulgarian_commander",
            "battle.name"
        ],
        "values": [
            {
                "table": "battle",
                "column": "bulgarian_commander",
                "value": "Boril",
                "condition": "!="
            }
        ],
        "db_id": "battle_death",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "battle.bulgarian_commander.boril"
        ]
    },
    {
        "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "SQL": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'",
        "tables": [
            "ship",
            "battle"
        ],
        "columns": [
            "battle.name",
            "ship.ship_type",
            "ship.lost_in_battle",
            "battle.id"
        ],
        "values": [
            {
                "table": "ship",
                "column": "ship_type",
                "value": "Brig",
                "condition": "="
            }
        ],
        "db_id": "battle_death",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "ship.ship_type.brig"
        ]
    },
    {
        "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "SQL": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
        "tables": [
            "battle"
        ],
        "columns": [
            "battle.latin_commander",
            "battle.bulgarian_commander",
            "battle.name"
        ],
        "values": [
            {
                "table": "battle",
                "column": "bulgarian_commander",
                "value": "Kaloyan",
                "condition": "="
            },
            {
                "table": "battle",
                "column": "latin_commander",
                "value": "Baldwin I",
                "condition": "="
            }
        ],
        "db_id": "battle_death",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "battle.bulgarian_commander.kaloyan",
            "battle.latin_commander.baldwin i"
        ]
    },
    {
        "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
        "SQL": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'",
        "tables": [
            "ship",
            "battle"
        ],
        "columns": [
            "battle.name",
            "ship.name",
            "battle.date",
            "ship.lost_in_battle",
            "battle.id"
        ],
        "values": [
            {
                "table": "ship",
                "column": "name",
                "value": "Lettice",
                "condition": "="
            },
            {
                "table": "ship",
                "column": "name",
                "value": "HMS Atalanta",
                "condition": "="
            }
        ],
        "db_id": "battle_death",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "ship.name.lettice",
            "ship.name.hms atalanta"
        ]
    },
    {
        "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
        "SQL": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
        "tables": [
            "ship",
            "battle"
        ],
        "columns": [
            "battle.name",
            "battle.bulgarian_commander",
            "battle.result",
            "ship.lost_in_battle",
            "battle.id",
            "ship.location"
        ],
        "values": [
            {
                "table": "ship",
                "column": "location",
                "value": "English Channel",
                "condition": "="
            }
        ],
        "db_id": "battle_death",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "ship.location.english channel"
        ]
    },
    {
        "question": "How is the math course described?",
        "SQL": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "tables": [
            "courses"
        ],
        "columns": [
            "courses.course_description",
            "courses.course_name"
        ],
        "values": [
            {
                "table": "courses",
                "column": "course_name",
                "value": "math",
                "condition": "="
            }
        ],
        "db_id": "student_transcripts_tracking",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "courses.course_name.math"
        ]
    },
    {
        "question": "What are the descriptions for all the math courses?",
        "SQL": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "tables": [
            "courses"
        ],
        "columns": [
            "courses.course_description",
            "courses.course_name"
        ],
        "values": [
            {
                "table": "courses",
                "column": "course_name",
                "value": "math",
                "condition": "="
            }
        ],
        "db_id": "student_transcripts_tracking",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "courses.course_name.math"
        ]
    },
    {
        "question": "What is the zip code of the address in the city Port Chelsea?",
        "SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "tables": [
            "addresses"
        ],
        "columns": [
            "addresses.zip_postcode",
            "addresses.city"
        ],
        "values": [
            {
                "table": "addresses",
                "column": "city",
                "value": "Port Chelsea",
                "condition": "="
            }
        ],
        "db_id": "student_transcripts_tracking",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "addresses.city.port chelsea"
        ]
    },
    {
        "question": "What is the zip code for Port Chelsea?",
        "SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "tables": [
            "addresses"
        ],
        "columns": [
            "addresses.zip_postcode",
            "addresses.city"
        ],
        "values": [
            {
                "table": "addresses",
                "column": "city",
                "value": "Port Chelsea",
                "condition": "="
            }
        ],
        "db_id": "student_transcripts_tracking",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "addresses.city.port chelsea"
        ]
    },
    {
        "question": "How many degrees does the engineering department offer?",
        "SQL": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
        "tables": [
            "degree_programs",
            "departments"
        ],
        "columns": [
            "departments.department_name",
            "departments.department_id",
            "degree_programs.department_id"
        ],
        "values": [
            {
                "table": "departments",
                "column": "department_name",
                "value": "engineer",
                "condition": "="
            }
        ],
        "db_id": "student_transcripts_tracking",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "departments.department_name.engineer"
        ]
    },
    {
        "question": "How many degrees does the engineering department have?",
        "SQL": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
        "tables": [
            "degree_programs",
            "departments"
        ],
        "columns": [
            "departments.department_name",
            "departments.department_id",
            "degree_programs.department_id"
        ],
        "values": [
            {
                "table": "departments",
                "column": "department_name",
                "value": "engineer",
                "condition": "="
            }
        ],
        "db_id": "student_transcripts_tracking",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "departments.department_name.engineer"
        ]
    },
    {
        "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "SQL": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "tables": [
            "students",
            "degree_programs",
            "student_enrolment"
        ],
        "columns": [
            "students.middle_name",
            "students.last_name",
            "students.student_id",
            "students.first_name",
            "student_enrolment.degree_program_id",
            "student_enrolment.student_id",
            "degree_programs.degree_summary_name",
            "degree_programs.degree_program_id"
        ],
        "values": [
            {
                "table": "degree_programs",
                "column": "degree_summary_name",
                "value": "Bachelor",
                "condition": "="
            }
        ],
        "db_id": "student_transcripts_tracking",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "degree_programs.degree_summary_name.bachelor"
        ]
    },
    {
        "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
        "SQL": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "tables": [
            "students",
            "degree_programs",
            "student_enrolment"
        ],
        "columns": [
            "students.middle_name",
            "students.last_name",
            "students.student_id",
            "students.first_name",
            "student_enrolment.degree_program_id",
            "student_enrolment.student_id",
            "degree_programs.degree_summary_name",
            "degree_programs.degree_program_id"
        ],
        "values": [
            {
                "table": "degree_programs",
                "column": "degree_summary_name",
                "value": "Bachelor",
                "condition": "="
            }
        ],
        "db_id": "student_transcripts_tracking",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "degree_programs.degree_summary_name.bachelor"
        ]
    },
    {
        "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "SQL": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
        "tables": [
            "students"
        ],
        "columns": [
            "students.cell_mobile_number",
            "students.first_name",
            "students.last_name"
        ],
        "values": [
            {
                "table": "students",
                "column": "first_name",
                "value": "Timmothy",
                "condition": "="
            },
            {
                "table": "students",
                "column": "last_name",
                "value": "Ward",
                "condition": "="
            }
        ],
        "db_id": "student_transcripts_tracking",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "students.first_name.timmothy",
            "students.last_name.ward"
        ]
    },
    {
        "question": "What is the mobile phone number of the student named Timmothy Ward ?",
        "SQL": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'",
        "tables": [
            "students"
        ],
        "columns": [
            "students.cell_mobile_number",
            "students.first_name",
            "students.last_name"
        ],
        "values": [
            {
                "table": "students",
                "column": "first_name",
                "value": "timmothy",
                "condition": "="
            },
            {
                "table": "students",
                "column": "last_name",
                "value": "ward",
                "condition": "="
            }
        ],
        "db_id": "student_transcripts_tracking",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "students.first_name.timmothy",
            "students.last_name.ward"
        ]
    },
    {
        "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
        "SQL": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "tables": [
            "degree_programs",
            "student_enrolment"
        ],
        "columns": [
            "student_enrolment.degree_program_id",
            "degree_programs.degree_program_id",
            "student_enrolment.semester_id"
        ],
        "values": [
            {
                "table": "",
                "column": "degree_summary_name",
                "value": "Master",
                "condition": "="
            },
            {
                "table": "",
                "column": "degree_summary_name",
                "value": "Bachelor",
                "condition": "="
            }
        ],
        "db_id": "student_transcripts_tracking",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            ".degree_summary_name.master",
            ".degree_summary_name.bachelor"
        ]
    },
    {
        "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
        "SQL": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "tables": [
            "degree_programs",
            "student_enrolment"
        ],
        "columns": [
            "student_enrolment.degree_program_id",
            "degree_programs.degree_program_id",
            "student_enrolment.semester_id"
        ],
        "values": [
            {
                "table": "",
                "column": "degree_summary_name",
                "value": "Master",
                "condition": "="
            },
            {
                "table": "",
                "column": "degree_summary_name",
                "value": "Bachelor",
                "condition": "="
            }
        ],
        "db_id": "student_transcripts_tracking",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            ".degree_summary_name.master",
            ".degree_summary_name.bachelor"
        ]
    },
    {
        "question": "Describe the section h.",
        "SQL": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
        "tables": [
            "sections"
        ],
        "columns": [
            "sections.section_description",
            "sections.section_name"
        ],
        "values": [
            {
                "table": "sections",
                "column": "section_name",
                "value": "h",
                "condition": "="
            }
        ],
        "db_id": "student_transcripts_tracking",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "sections.section_name.h"
        ]
    },
    {
        "question": "What is the description for the section named h?",
        "SQL": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
        "tables": [
            "sections"
        ],
        "columns": [
            "sections.section_description",
            "sections.section_name"
        ],
        "values": [
            {
                "table": "sections",
                "column": "section_name",
                "value": "h",
                "condition": "="
            }
        ],
        "db_id": "student_transcripts_tracking",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "sections.section_name.h"
        ]
    },
    {
        "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
        "SQL": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
        "tables": [
            "students",
            "addresses"
        ],
        "columns": [
            "students.cell_mobile_number",
            "addresses.address_id",
            "students.first_name",
            "addresses.country",
            "students.permanent_address_id"
        ],
        "values": [
            {
                "table": "addresses",
                "column": "country",
                "value": "haiti",
                "condition": "="
            },
            {
                "table": "students",
                "column": "cell_mobile_number",
                "value": "09700166582",
                "condition": "="
            }
        ],
        "db_id": "student_transcripts_tracking",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "addresses.country.haiti",
            "students.cell_mobile_number.09700166582"
        ]
    },
    {
        "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
        "SQL": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
        "tables": [
            "students",
            "addresses"
        ],
        "columns": [
            "students.cell_mobile_number",
            "addresses.address_id",
            "students.first_name",
            "addresses.country",
            "students.permanent_address_id"
        ],
        "values": [
            {
                "table": "addresses",
                "column": "country",
                "value": "haiti",
                "condition": "="
            },
            {
                "table": "students",
                "column": "cell_mobile_number",
                "value": "09700166582",
                "condition": "="
            }
        ],
        "db_id": "student_transcripts_tracking",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "addresses.country.haiti",
            "students.cell_mobile_number.09700166582"
        ]
    },
    {
        "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
        "SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "tables": [
            "tv_channel",
            "cartoon"
        ],
        "columns": [
            "cartoon.written_by",
            "tv_channel.country",
            "cartoon.channel",
            "tv_channel.id"
        ],
        "values": [
            {
                "table": "cartoon",
                "column": "written_by",
                "value": "Todd Casey",
                "condition": "="
            }
        ],
        "db_id": "tvshow",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "cartoon.written_by.todd casey"
        ]
    },
    {
        "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
        "SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "tables": [
            "tv_channel",
            "cartoon"
        ],
        "columns": [
            "cartoon.written_by",
            "tv_channel.country",
            "cartoon.channel",
            "tv_channel.id"
        ],
        "values": [
            {
                "table": "cartoon",
                "column": "written_by",
                "value": "Todd Casey",
                "condition": "="
            }
        ],
        "db_id": "tvshow",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "cartoon.written_by.todd casey"
        ]
    },
    {
        "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
        "SQL": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "tables": [
            "tv_channel",
            "cartoon"
        ],
        "columns": [
            "cartoon.written_by",
            "tv_channel.country",
            "cartoon.channel",
            "tv_channel.id"
        ],
        "values": [
            {
                "table": "cartoon",
                "column": "written_by",
                "value": "Todd Casey",
                "condition": "="
            }
        ],
        "db_id": "tvshow",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "cartoon.written_by.todd casey"
        ]
    },
    {
        "question": "What are the countries that are not playing cartoons written by Todd Casey?",
        "SQL": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "tables": [
            "tv_channel",
            "cartoon"
        ],
        "columns": [
            "cartoon.written_by",
            "tv_channel.country",
            "cartoon.channel",
            "tv_channel.id"
        ],
        "values": [
            {
                "table": "cartoon",
                "column": "written_by",
                "value": "Todd Casey",
                "condition": "="
            }
        ],
        "db_id": "tvshow",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "cartoon.written_by.todd casey"
        ]
    },
    {
        "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "SQL": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "tables": [
            "tv_channel",
            "cartoon"
        ],
        "columns": [
            "cartoon.channel",
            "tv_channel.country",
            "tv_channel.id",
            "tv_channel.series_name",
            "cartoon.directed_by"
        ],
        "values": [
            {
                "table": "cartoon",
                "column": "directed_by",
                "value": "Michael Chang",
                "condition": "="
            },
            {
                "table": "cartoon",
                "column": "directed_by",
                "value": "Ben Jones",
                "condition": "="
            }
        ],
        "db_id": "tvshow",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "cartoon.directed_by.michael chang",
            "cartoon.directed_by.ben jones"
        ]
    },
    {
        "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
        "SQL": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "tables": [
            "tv_channel",
            "cartoon"
        ],
        "columns": [
            "cartoon.channel",
            "tv_channel.country",
            "tv_channel.id",
            "tv_channel.series_name",
            "cartoon.directed_by"
        ],
        "values": [
            {
                "table": "cartoon",
                "column": "directed_by",
                "value": "Michael Chang",
                "condition": "="
            },
            {
                "table": "cartoon",
                "column": "directed_by",
                "value": "Ben Jones",
                "condition": "="
            }
        ],
        "db_id": "tvshow",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "cartoon.directed_by.michael chang",
            "cartoon.directed_by.ben jones"
        ]
    },
    {
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "SQL": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "tables": [
            "tv_channel"
        ],
        "columns": [
            "tv_channel.pixel_aspect_ratio_par",
            "tv_channel.country",
            "tv_channel.language"
        ],
        "values": [
            {
                "table": "tv_channel",
                "column": "language",
                "value": "English",
                "condition": "!="
            }
        ],
        "db_id": "tvshow",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "tv_channel.language.english"
        ]
    },
    {
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "SQL": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "tables": [
            "tv_channel"
        ],
        "columns": [
            "tv_channel.pixel_aspect_ratio_par",
            "tv_channel.country",
            "tv_channel.language"
        ],
        "values": [
            {
                "table": "tv_channel",
                "column": "language",
                "value": "English",
                "condition": "!="
            }
        ],
        "db_id": "tvshow",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "tv_channel.language.english"
        ]
    },
    {
        "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
        "SQL": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
        "tables": [
            "tv_channel",
            "cartoon"
        ],
        "columns": [
            "cartoon.id",
            "cartoon.channel"
        ],
        "values": [
            {
                "table": "",
                "column": "directed_by",
                "value": "Ben Jones",
                "condition": "="
            }
        ],
        "db_id": "tvshow",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            ".directed_by.ben jones"
        ]
    },
    {
        "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
        "SQL": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
        "tables": [
            "tv_channel",
            "cartoon"
        ],
        "columns": [
            "cartoon.id",
            "cartoon.channel"
        ],
        "values": [
            {
                "table": "",
                "column": "directed_by",
                "value": "Ben Jones",
                "condition": "="
            }
        ],
        "db_id": "tvshow",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            ".directed_by.ben jones"
        ]
    },
    {
        "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "SQL": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "tables": [
            "tv_channel",
            "cartoon"
        ],
        "columns": [
            "cartoon.id",
            "cartoon.channel"
        ],
        "values": [
            {
                "table": "",
                "column": "directed_by",
                "value": "Ben Jones",
                "condition": "="
            }
        ],
        "db_id": "tvshow",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            ".directed_by.ben jones"
        ]
    },
    {
        "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "SQL": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "tables": [
            "tv_channel",
            "cartoon"
        ],
        "columns": [
            "cartoon.id",
            "cartoon.channel"
        ],
        "values": [
            {
                "table": "",
                "column": "directed_by",
                "value": "Ben Jones",
                "condition": "="
            }
        ],
        "db_id": "tvshow",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            ".directed_by.ben jones"
        ]
    },
    {
        "question": "What is last date created of votes from the state 'CA'?",
        "SQL": "SELECT max(created) FROM votes WHERE state  =  'CA'",
        "tables": [
            "votes"
        ],
        "columns": [
            "votes.state",
            "votes.created"
        ],
        "values": [
            {
                "table": "votes",
                "column": "state",
                "value": "CA",
                "condition": "="
            }
        ],
        "db_id": "voter_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "votes.state.ca"
        ]
    },
    {
        "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "SQL": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
        "tables": [
            "contestants"
        ],
        "columns": [
            "contestants.contestant_name"
        ],
        "values": [
            {
                "table": "contestants",
                "column": "contestant_name",
                "value": "Jessie Alloway",
                "condition": "!="
            }
        ],
        "db_id": "voter_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "contestants.contestant_name.jessie alloway"
        ]
    },
    {
        "question": "What are the number of votes from state 'NY' or 'CA'?",
        "SQL": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'",
        "tables": [
            "votes"
        ],
        "columns": [
            "votes.state"
        ],
        "values": [
            {
                "table": "votes",
                "column": "state",
                "value": "NY",
                "condition": "="
            },
            {
                "table": "votes",
                "column": "state",
                "value": "CA",
                "condition": "="
            }
        ],
        "db_id": "voter_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "votes.state.ny",
            "votes.state.ca"
        ]
    },
    {
        "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "SQL": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'",
        "tables": [
            "votes",
            "contestants"
        ],
        "columns": [
            "votes.contestant_number",
            "contestants.contestant_name",
            "votes.phone_number",
            "votes.state",
            "votes.created",
            "contestants.contestant_number"
        ],
        "values": [
            {
                "table": "contestants",
                "column": "contestant_name",
                "value": "Tabatha Gehling",
                "condition": "="
            }
        ],
        "db_id": "voter_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "contestants.contestant_name.tabatha gehling"
        ]
    },
    {
        "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
        "SQL": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'",
        "tables": [
            "votes",
            "contestants",
            "area_code_state"
        ],
        "columns": [
            "votes.contestant_number",
            "contestants.contestant_name",
            "area_code_state.state",
            "area_code_state.area_code",
            "votes.state",
            "contestants.contestant_number"
        ],
        "values": [
            {
                "table": "contestants",
                "column": "contestant_name",
                "value": "Tabatha Gehling",
                "condition": "="
            },
            {
                "table": "contestants",
                "column": "contestant_name",
                "value": "Kelly Clauss",
                "condition": "="
            }
        ],
        "db_id": "voter_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "contestants.contestant_name.tabatha gehling",
            "contestants.contestant_name.kelly clauss"
        ]
    },
    {
        "question": "Which cities are in European countries where English is not the official language?",
        "SQL": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "tables": [
            "city",
            "countrylanguage",
            "country"
        ],
        "columns": [
            "countrylanguage.isofficial",
            "countrylanguage.countrycode",
            "city.countrycode",
            "country.continent",
            "country.name",
            "country.code",
            "countrylanguage.language",
            "city.name"
        ],
        "values": [
            {
                "table": "country",
                "column": "continent",
                "value": "Europe",
                "condition": "="
            },
            {
                "table": "countrylanguage",
                "column": "isofficial",
                "value": "T",
                "condition": "="
            },
            {
                "table": "countrylanguage",
                "column": "language",
                "value": "English",
                "condition": "="
            }
        ],
        "db_id": "world_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "country.continent.europe",
            "countrylanguage.isofficial.t",
            "countrylanguage.language.english"
        ]
    },
    {
        "question": "What are the names of cities in Europe for which English is not the official language?",
        "SQL": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "tables": [
            "city",
            "countrylanguage",
            "country"
        ],
        "columns": [
            "countrylanguage.isofficial",
            "countrylanguage.countrycode",
            "city.countrycode",
            "country.continent",
            "country.name",
            "country.code",
            "countrylanguage.language",
            "city.name"
        ],
        "values": [
            {
                "table": "country",
                "column": "continent",
                "value": "Europe",
                "condition": "="
            },
            {
                "table": "countrylanguage",
                "column": "isofficial",
                "value": "T",
                "condition": "="
            },
            {
                "table": "countrylanguage",
                "column": "language",
                "value": "English",
                "condition": "="
            }
        ],
        "db_id": "world_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "country.continent.europe",
            "countrylanguage.isofficial.t",
            "countrylanguage.language.english"
        ]
    },
    {
        "question": "Which unique cities are in Asian countries where Chinese is the official language ?",
        "SQL": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"",
        "tables": [
            "city",
            "countrylanguage",
            "country"
        ],
        "columns": [
            "countrylanguage.isofficial",
            "countrylanguage.countrycode",
            "city.countrycode",
            "country.continent",
            "country.code",
            "countrylanguage.language",
            "city.name"
        ],
        "values": [
            {
                "table": "countrylanguage",
                "column": "isofficial",
                "value": "t",
                "condition": "="
            },
            {
                "table": "countrylanguage",
                "column": "language",
                "value": "chinese",
                "condition": "="
            }
        ],
        "db_id": "world_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "countrylanguage.isofficial.t",
            "countrylanguage.language.chinese"
        ]
    },
    {
        "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "SQL": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
        "tables": [
            "city",
            "countrylanguage",
            "country"
        ],
        "columns": [
            "countrylanguage.isofficial",
            "countrylanguage.countrycode",
            "city.countrycode",
            "country.continent",
            "country.code",
            "countrylanguage.language",
            "city.name"
        ],
        "values": [
            {
                "table": "countrylanguage",
                "column": "isofficial",
                "value": "T",
                "condition": "="
            },
            {
                "table": "countrylanguage",
                "column": "language",
                "value": "Chinese",
                "condition": "="
            }
        ],
        "db_id": "world_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "countrylanguage.isofficial.t",
            "countrylanguage.language.chinese"
        ]
    },
    {
        "question": "What are the names of conductors whose nationalities are not \"USA\"?",
        "SQL": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "tables": [
            "conductor"
        ],
        "columns": [
            "conductor.name",
            "conductor.nationality"
        ],
        "values": [
            {
                "table": "conductor",
                "column": "nationality",
                "value": "USA",
                "condition": "!="
            }
        ],
        "db_id": "orchestra",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "conductor.nationality.usa"
        ]
    },
    {
        "question": "Return the names of conductors that do not have the nationality \"USA\".",
        "SQL": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "tables": [
            "conductor"
        ],
        "columns": [
            "conductor.name",
            "conductor.nationality"
        ],
        "values": [
            {
                "table": "conductor",
                "column": "nationality",
                "value": "USA",
                "condition": "!="
            }
        ],
        "db_id": "orchestra",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "conductor.nationality.usa"
        ]
    },
    {
        "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
        "SQL": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
        "tables": [
            "treatments",
            "professionals"
        ],
        "columns": [
            "professionals.cell_number",
            "professionals.last_name",
            "treatments.professional_id",
            "professionals.state",
            "professionals.professional_id"
        ],
        "values": [
            {
                "table": "",
                "column": "state",
                "value": "Indiana",
                "condition": "="
            }
        ],
        "db_id": "dog_kennels",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            ".state.indiana"
        ]
    },
    {
        "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
        "SQL": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
        "tables": [
            "treatments",
            "professionals"
        ],
        "columns": [
            "professionals.cell_number",
            "professionals.last_name",
            "treatments.professional_id",
            "professionals.state",
            "professionals.professional_id"
        ],
        "values": [
            {
                "table": "",
                "column": "state",
                "value": "Indiana",
                "condition": "="
            }
        ],
        "db_id": "dog_kennels",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            ".state.indiana"
        ]
    },
    {
        "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "SQL": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "tables": [
            "owners",
            "dogs"
        ],
        "columns": [
            "owners.state",
            "dogs.owner_id",
            "dogs.name",
            "owners.first_name",
            "owners.owner_id"
        ],
        "values": [
            {
                "table": "owners",
                "column": "state",
                "value": "Virginia",
                "condition": "="
            }
        ],
        "db_id": "dog_kennels",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "owners.state.virginia"
        ]
    },
    {
        "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
        "SQL": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "tables": [
            "owners",
            "dogs"
        ],
        "columns": [
            "owners.state",
            "dogs.owner_id",
            "dogs.name",
            "owners.first_name",
            "owners.owner_id"
        ],
        "values": [
            {
                "table": "owners",
                "column": "state",
                "value": "Virginia",
                "condition": "="
            }
        ],
        "db_id": "dog_kennels",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "owners.state.virginia"
        ]
    },
    {
        "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
        "SQL": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
        "tables": [
            "professionals"
        ],
        "columns": [
            "professionals.state",
            "professionals.email_address"
        ],
        "values": [
            {
                "table": "professionals",
                "column": "state",
                "value": "Hawaii",
                "condition": "="
            },
            {
                "table": "professionals",
                "column": "state",
                "value": "Wisconsin",
                "condition": "="
            }
        ],
        "db_id": "dog_kennels",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "professionals.state.hawaii",
            "professionals.state.wisconsin"
        ]
    },
    {
        "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
        "SQL": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
        "tables": [
            "professionals"
        ],
        "columns": [
            "professionals.state",
            "professionals.email_address"
        ],
        "values": [
            {
                "table": "professionals",
                "column": "state",
                "value": "Hawaii",
                "condition": "="
            },
            {
                "table": "professionals",
                "column": "state",
                "value": "Wisconsin",
                "condition": "="
            }
        ],
        "db_id": "dog_kennels",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "professionals.state.hawaii",
            "professionals.state.wisconsin"
        ]
    },
    {
        "question": "List all the distinct product names, price and descriptions which are bought by female customers.",
        "SQL": "SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'",
        "tables": [
            "orders",
            "products",
            "order_items",
            "customers"
        ],
        "columns": [
            "products.product_name",
            "customers.gender_code",
            "customers.customer_id",
            "orders.order_id",
            "products.product_description",
            "order_items.order_id",
            "products.product_id",
            "products.product_price",
            "order_items.product_id",
            "orders.customer_id"
        ],
        "values": [
            {
                "table": "customers",
                "column": "gender_code",
                "value": "Female",
                "condition": "="
            }
        ],
        "db_id": "e_commerce",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "customers.gender_code.female"
        ]
    },
    {
        "question": "What are the different names, prices, and descriptions for all products bought by female customers?",
        "SQL": "SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'",
        "tables": [
            "orders",
            "products",
            "order_items",
            "customers"
        ],
        "columns": [
            "products.product_name",
            "customers.gender_code",
            "customers.customer_id",
            "orders.order_id",
            "products.product_description",
            "order_items.order_id",
            "products.product_id",
            "products.product_price",
            "order_items.product_id",
            "orders.customer_id"
        ],
        "values": [
            {
                "table": "customers",
                "column": "gender_code",
                "value": "Female",
                "condition": "="
            }
        ],
        "db_id": "e_commerce",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "customers.gender_code.female"
        ]
    },
    {
        "question": "List the address, town and county information of the customers who live in the USA.",
        "SQL": "SELECT address_line_1 ,  town_city ,  county FROM Customers WHERE Country  =  'USA'",
        "tables": [
            "customers"
        ],
        "columns": [
            "customers.address_line_1",
            "customers.town_city",
            "customers.county",
            "customers.country"
        ],
        "values": [
            {
                "table": "customers",
                "column": "country",
                "value": "USA",
                "condition": "="
            }
        ],
        "db_id": "e_commerce",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "customers.country.usa"
        ]
    },
    {
        "question": "What is the name of the director who is in the \"Dracula\" program?",
        "SQL": "SELECT t2.name FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id WHERE t1.title  =  'Dracula'",
        "tables": [
            "program",
            "director"
        ],
        "columns": [
            "program.title",
            "program.director_id",
            "director.director_id",
            "director.name"
        ],
        "values": [
            {
                "table": "program",
                "column": "title",
                "value": "Dracula",
                "condition": "="
            }
        ],
        "db_id": "bbc_channels",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "program.title.dracula"
        ]
    },
    {
        "question": "What are the names of the drivers who are citizens of the 'United States'?",
        "SQL": "SELECT name FROM driver WHERE citizenship  =  'United States'",
        "tables": [
            "driver"
        ],
        "columns": [
            "driver.citizenship",
            "driver.name"
        ],
        "values": [
            {
                "table": "driver",
                "column": "citizenship",
                "value": "United States",
                "condition": "="
            }
        ],
        "db_id": "vehicle_driver",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "driver.citizenship.united states"
        ]
    },
    {
        "question": "Return the names of drivers with citizenship from the United States.",
        "SQL": "SELECT name FROM driver WHERE citizenship  =  'United States'",
        "tables": [
            "driver"
        ],
        "columns": [
            "driver.citizenship",
            "driver.name"
        ],
        "values": [
            {
                "table": "driver",
                "column": "citizenship",
                "value": "United States",
                "condition": "="
            }
        ],
        "db_id": "vehicle_driver",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "driver.citizenship.united states"
        ]
    },
    {
        "question": "What is the maximum and average power for the vehicles manufactured by 'Zhuzhou'?",
        "SQL": "SELECT max(power) ,  avg(power) FROM vehicle WHERE builder  =  'Zhuzhou'",
        "tables": [
            "vehicle"
        ],
        "columns": [
            "vehicle.builder",
            "vehicle.power"
        ],
        "values": [
            {
                "table": "vehicle",
                "column": "builder",
                "value": "Zhuzhou",
                "condition": "="
            }
        ],
        "db_id": "vehicle_driver",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "vehicle.builder.zhuzhou"
        ]
    },
    {
        "question": "Return the maximum and average power for the vehicles built by Zhuzhou.",
        "SQL": "SELECT max(power) ,  avg(power) FROM vehicle WHERE builder  =  'Zhuzhou'",
        "tables": [
            "vehicle"
        ],
        "columns": [
            "vehicle.builder",
            "vehicle.power"
        ],
        "values": [
            {
                "table": "vehicle",
                "column": "builder",
                "value": "Zhuzhou",
                "condition": "="
            }
        ],
        "db_id": "vehicle_driver",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "vehicle.builder.zhuzhou"
        ]
    },
    {
        "question": "How many drivers have raced in 'NASCAR'?",
        "SQL": "SELECT count(*) FROM driver WHERE Racing_Series  =  'NASCAR'",
        "tables": [
            "driver"
        ],
        "columns": [
            "driver.racing_series"
        ],
        "values": [
            {
                "table": "driver",
                "column": "racing_series",
                "value": "NASCAR",
                "condition": "="
            }
        ],
        "db_id": "vehicle_driver",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "driver.racing_series.nascar"
        ]
    },
    {
        "question": "Count the number of drivers who have raced in NASCAR.",
        "SQL": "SELECT count(*) FROM driver WHERE Racing_Series  =  'NASCAR'",
        "tables": [
            "driver"
        ],
        "columns": [
            "driver.racing_series"
        ],
        "values": [
            {
                "table": "driver",
                "column": "racing_series",
                "value": "NASCAR",
                "condition": "="
            }
        ],
        "db_id": "vehicle_driver",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "driver.racing_series.nascar"
        ]
    },
    {
        "question": "What are the vehicle ids and models of the vehicle which have been driven by two drivers or been manufactured by 'Ziyang'.",
        "SQL": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  =  2 OR T1.builder  =  'Ziyang'",
        "tables": [
            "vehicle_driver",
            "vehicle"
        ],
        "columns": [
            "vehicle.vehicle_id",
            "vehicle.model",
            "vehicle_driver.vehicle_id",
            "vehicle.builder"
        ],
        "values": [
            {
                "table": "vehicle",
                "column": "builder",
                "value": "Ziyang",
                "condition": "="
            }
        ],
        "db_id": "vehicle_driver",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "vehicle.builder.ziyang"
        ]
    },
    {
        "question": "Return the ids and models of vehicles that have been driven by exactly two drivers or built by Ziyang.",
        "SQL": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  =  2 OR T1.builder  =  'Ziyang'",
        "tables": [
            "vehicle_driver",
            "vehicle"
        ],
        "columns": [
            "vehicle.vehicle_id",
            "vehicle.model",
            "vehicle_driver.vehicle_id",
            "vehicle.builder"
        ],
        "values": [
            {
                "table": "vehicle",
                "column": "builder",
                "value": "Ziyang",
                "condition": "="
            }
        ],
        "db_id": "vehicle_driver",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "vehicle.builder.ziyang"
        ]
    },
    {
        "question": "What are the vehicle ids and models which have been driven by more than 2 drivers or been driven by the driver named 'Jeff Gordon'?",
        "SQL": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id JOIN driver AS T3 ON T2.driver_id  =  T3.driver_id WHERE T3.name  =  'Jeff Gordon' UNION SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  >  2",
        "tables": [
            "driver",
            "vehicle_driver",
            "vehicle"
        ],
        "columns": [
            "driver.driver_id",
            "vehicle.vehicle_id",
            "vehicle_driver.vehicle_id",
            "vehicle_driver.driver_id",
            "vehicle.model",
            "driver.name"
        ],
        "values": [
            {
                "table": "driver",
                "column": "name",
                "value": "Jeff Gordon",
                "condition": "="
            }
        ],
        "db_id": "vehicle_driver",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "driver.name.jeff gordon"
        ]
    },
    {
        "question": "Return the ids and models of vehicles that have been driven by more than 2 drivers or been driven by the Jeff Gordon.",
        "SQL": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id JOIN driver AS T3 ON T2.driver_id  =  T3.driver_id WHERE T3.name  =  'Jeff Gordon' UNION SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  >  2",
        "tables": [
            "driver",
            "vehicle_driver",
            "vehicle"
        ],
        "columns": [
            "driver.driver_id",
            "vehicle.vehicle_id",
            "vehicle_driver.vehicle_id",
            "vehicle_driver.driver_id",
            "vehicle.model",
            "driver.name"
        ],
        "values": [
            {
                "table": "driver",
                "column": "name",
                "value": "Jeff Gordon",
                "condition": "="
            }
        ],
        "db_id": "vehicle_driver",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "driver.name.jeff gordon"
        ]
    },
    {
        "question": "What are the name and citizenship of the drivers who have driven the vehicle model 'DJ1'?",
        "SQL": "SELECT T1.name ,  T1.citizenship FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.driver_id  =  T2.driver_id JOIN vehicle AS T3 ON T2.vehicle_id  =  T3.vehicle_id WHERE T3.model  =  'DJ1'",
        "tables": [
            "vehicle",
            "driver",
            "vehicle_driver"
        ],
        "columns": [
            "driver.driver_id",
            "vehicle.vehicle_id",
            "vehicle_driver.vehicle_id",
            "vehicle.model",
            "vehicle_driver.driver_id",
            "driver.citizenship",
            "driver.name"
        ],
        "values": [
            {
                "table": "vehicle",
                "column": "model",
                "value": "DJ1",
                "condition": "="
            }
        ],
        "db_id": "vehicle_driver",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "vehicle.model.dj1"
        ]
    },
    {
        "question": "Return the names and citizenships of drivers who have driven the vehicle with the model 'DJ1'.",
        "SQL": "SELECT T1.name ,  T1.citizenship FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.driver_id  =  T2.driver_id JOIN vehicle AS T3 ON T2.vehicle_id  =  T3.vehicle_id WHERE T3.model  =  'DJ1'",
        "tables": [
            "vehicle",
            "driver",
            "vehicle_driver"
        ],
        "columns": [
            "driver.driver_id",
            "vehicle.vehicle_id",
            "vehicle_driver.vehicle_id",
            "vehicle.model",
            "vehicle_driver.driver_id",
            "driver.citizenship",
            "driver.name"
        ],
        "values": [
            {
                "table": "vehicle",
                "column": "model",
                "value": "DJ1",
                "condition": "="
            }
        ],
        "db_id": "vehicle_driver",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "vehicle.model.dj1"
        ]
    },
    {
        "question": "What are the names and dates of the exams with subject code that is not \"Database\"?",
        "SQL": "SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'",
        "tables": [
            "exams"
        ],
        "columns": [
            "exams.subject_code",
            "exams.exam_date",
            "exams.exam_name"
        ],
        "values": [
            {
                "table": "exams",
                "column": "subject_code",
                "value": "Database",
                "condition": "!="
            }
        ],
        "db_id": "online_exams",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "exams.subject_code.database"
        ]
    },
    {
        "question": "Find the exams whose subject code is not \"Database\". What are the exam dates and exam names?",
        "SQL": "SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'",
        "tables": [
            "exams"
        ],
        "columns": [
            "exams.subject_code",
            "exams.exam_date",
            "exams.exam_name"
        ],
        "values": [
            {
                "table": "exams",
                "column": "subject_code",
                "value": "Database",
                "condition": "!="
            }
        ],
        "db_id": "online_exams",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "exams.subject_code.database"
        ]
    },
    {
        "question": "What is the parent document of document owned by Marlin? List the document id.",
        "SQL": "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE OWNER  =  'Marlin'",
        "tables": [
            "document_objects"
        ],
        "columns": [
            "document_objects.parent_document_object_id",
            "document_objects.owner"
        ],
        "values": [
            {
                "table": "document_objects",
                "column": "owner",
                "value": "Marlin",
                "condition": "="
            }
        ],
        "db_id": "cre_Doc_and_collections",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "document_objects.owner.marlin"
        ]
    },
    {
        "question": "What are the document object ids of the objects owned by Marlin?",
        "SQL": "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE OWNER  =  'Marlin'",
        "tables": [
            "document_objects"
        ],
        "columns": [
            "document_objects.parent_document_object_id",
            "document_objects.owner"
        ],
        "values": [
            {
                "table": "document_objects",
                "column": "owner",
                "value": "Marlin",
                "condition": "="
            }
        ],
        "db_id": "cre_Doc_and_collections",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "document_objects.owner.marlin"
        ]
    },
    {
        "question": "What is the owner of document with the Description 'Braeden Collection'?",
        "SQL": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Braeden Collection'",
        "tables": [
            "document_objects"
        ],
        "columns": [
            "document_objects.description",
            "document_objects.owner"
        ],
        "values": [
            {
                "table": "document_objects",
                "column": "description",
                "value": "Braeden Collection",
                "condition": "="
            }
        ],
        "db_id": "cre_Doc_and_collections",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "document_objects.description.braeden collection"
        ]
    },
    {
        "question": "What are the owners of the document objects described as the 'Braeden Collection'?",
        "SQL": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Braeden Collection'",
        "tables": [
            "document_objects"
        ],
        "columns": [
            "document_objects.description",
            "document_objects.owner"
        ],
        "values": [
            {
                "table": "document_objects",
                "column": "description",
                "value": "Braeden Collection",
                "condition": "="
            }
        ],
        "db_id": "cre_Doc_and_collections",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "document_objects.description.braeden collection"
        ]
    },
    {
        "question": "What is the owner of the parent document of document owned by 'Marlin'?",
        "SQL": "SELECT T2.Owner FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner  =  'Marlin'",
        "tables": [
            "document_objects"
        ],
        "columns": [
            "document_objects.parent_document_object_id",
            "document_objects.document_object_id",
            "document_objects.owner"
        ],
        "values": [
            {
                "table": "document_objects",
                "column": "owner",
                "value": "Marlin",
                "condition": "="
            }
        ],
        "db_id": "cre_Doc_and_collections",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "document_objects.owner.marlin"
        ]
    },
    {
        "question": "Who is the owner of the parent document of every documents where 'Marlin' is the owner?",
        "SQL": "SELECT T2.Owner FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner  =  'Marlin'",
        "tables": [
            "document_objects"
        ],
        "columns": [
            "document_objects.parent_document_object_id",
            "document_objects.document_object_id",
            "document_objects.owner"
        ],
        "values": [
            {
                "table": "document_objects",
                "column": "owner",
                "value": "Marlin",
                "condition": "="
            }
        ],
        "db_id": "cre_Doc_and_collections",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "document_objects.owner.marlin"
        ]
    },
    {
        "question": "List all document which is related to document owned by Ransom . List the document id .",
        "SQL": "select t1.document_object_id from document_subset_members as t1 join document_objects as t2 on t1.document_object_id  =  t2.document_object_id where t2.owner  =  'ransom'",
        "tables": [
            "document_objects",
            "document_subset_members"
        ],
        "columns": [
            "document_subset_members.document_object_id",
            "document_objects.document_object_id",
            "document_objects.owner"
        ],
        "values": [
            {
                "table": "document_objects",
                "column": "owner",
                "value": "ransom",
                "condition": "="
            }
        ],
        "db_id": "cre_Doc_and_collections",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "document_objects.owner.ransom"
        ]
    },
    {
        "question": "What are the document object ids of the related to the document owned by Ransom ?",
        "SQL": "select t1.document_object_id from document_subset_members as t1 join document_objects as t2 on t1.document_object_id  =  t2.document_object_id where t2.owner  =  'ransom'",
        "tables": [
            "document_objects",
            "document_subset_members"
        ],
        "columns": [
            "document_subset_members.document_object_id",
            "document_objects.document_object_id",
            "document_objects.owner"
        ],
        "values": [
            {
                "table": "document_objects",
                "column": "owner",
                "value": "ransom",
                "condition": "="
            }
        ],
        "db_id": "cre_Doc_and_collections",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "document_objects.owner.ransom"
        ]
    },
    {
        "question": "List all owner of documents that is related to documents owned by Braeden.",
        "SQL": "SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Braeden';",
        "tables": [
            "document_objects",
            "document_subset_members"
        ],
        "columns": [
            "document_subset_members.related_document_object_id",
            "document_objects.document_object_id",
            "document_objects.owner"
        ],
        "values": [
            {
                "table": "document_objects",
                "column": "owner",
                "value": "Braeden",
                "condition": "="
            }
        ],
        "db_id": "cre_Doc_and_collections",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "document_objects.owner.braeden"
        ]
    },
    {
        "question": "What are the different owners of documents that are related to ones owned by Braeden?",
        "SQL": "SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Braeden';",
        "tables": [
            "document_objects",
            "document_subset_members"
        ],
        "columns": [
            "document_subset_members.related_document_object_id",
            "document_objects.document_object_id",
            "document_objects.owner"
        ],
        "values": [
            {
                "table": "document_objects",
                "column": "owner",
                "value": "Braeden",
                "condition": "="
            }
        ],
        "db_id": "cre_Doc_and_collections",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "document_objects.owner.braeden"
        ]
    },
    {
        "question": "Which unique subset does document owned by Braeden belong to? List the subset name.",
        "SQL": "SELECT DISTINCT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.owner  =  'Braeden'",
        "tables": [
            "document_subsets",
            "document_objects",
            "document_subset_members"
        ],
        "columns": [
            "document_subset_members.document_object_id",
            "document_objects.owner",
            "document_subset_members.document_subset_id",
            "document_subsets.document_subset_name",
            "document_objects.document_object_id",
            "document_subsets.document_subset_id"
        ],
        "values": [
            {
                "table": "document_objects",
                "column": "owner",
                "value": "Braeden",
                "condition": "="
            }
        ],
        "db_id": "cre_Doc_and_collections",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "document_objects.owner.braeden"
        ]
    },
    {
        "question": "What are the different subset names of all documents owned by Braeden?",
        "SQL": "SELECT DISTINCT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.owner  =  'Braeden'",
        "tables": [
            "document_subsets",
            "document_objects",
            "document_subset_members"
        ],
        "columns": [
            "document_subset_members.document_object_id",
            "document_objects.owner",
            "document_subset_members.document_subset_id",
            "document_subsets.document_subset_name",
            "document_objects.document_object_id",
            "document_subsets.document_subset_id"
        ],
        "values": [
            {
                "table": "document_objects",
                "column": "owner",
                "value": "Braeden",
                "condition": "="
            }
        ],
        "db_id": "cre_Doc_and_collections",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "document_objects.owner.braeden"
        ]
    },
    {
        "question": "List the Collection Name that document owned by 'Ransom ' belong to .",
        "SQL": "select t1.collection_name from collections as t1 join documents_in_collections as t2 on t1.collection_id = t2.collection_id join document_objects as t3 on t2.document_object_id  =  t3.document_object_id where t3.owner  =  'ransom'",
        "tables": [
            "collections",
            "document_objects",
            "documents_in_collections"
        ],
        "columns": [
            "collections.collection_id",
            "document_objects.owner",
            "documents_in_collections.document_object_id",
            "collections.collection_name",
            "document_objects.document_object_id",
            "documents_in_collections.collection_id"
        ],
        "values": [
            {
                "table": "document_objects",
                "column": "owner",
                "value": "ransom",
                "condition": "="
            }
        ],
        "db_id": "cre_Doc_and_collections",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "document_objects.owner.ransom"
        ]
    },
    {
        "question": "What is the collection name of a document owned by 'Ransom'?",
        "SQL": "SELECT T1.Collection_Name FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID JOIN Document_Objects AS T3 ON T2.Document_object_id  =  T3.Document_object_id WHERE T3.owner  =  'Ransom'",
        "tables": [
            "collections",
            "document_objects",
            "documents_in_collections"
        ],
        "columns": [
            "collections.collection_id",
            "document_objects.owner",
            "documents_in_collections.document_object_id",
            "collections.collection_name",
            "document_objects.document_object_id",
            "documents_in_collections.collection_id"
        ],
        "values": [
            {
                "table": "document_objects",
                "column": "owner",
                "value": "Ransom",
                "condition": "="
            }
        ],
        "db_id": "cre_Doc_and_collections",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "document_objects.owner.ransom"
        ]
    },
    {
        "question": "What are the voice sound quality score, rhythm tempo score and stage presence score performed by the participant named 'Freeway'?",
        "SQL": "SELECT T1.voice_sound_quality ,  T1.rhythm_tempo ,  T1.stage_presence FROM performance_score AS T1 JOIN participants AS T2 ON T1.participant_id  =  T2.id WHERE T2.name  =  'Freeway'",
        "tables": [
            "participants",
            "performance_score"
        ],
        "columns": [
            "performance_score.stage_presence",
            "performance_score.voice_sound_quality",
            "performance_score.rhythm_tempo",
            "participants.id",
            "performance_score.participant_id",
            "participants.name"
        ],
        "values": [
            {
                "table": "participants",
                "column": "name",
                "value": "Freeway",
                "condition": "="
            }
        ],
        "db_id": "sing_contest",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "participants.name.freeway"
        ]
    },
    {
        "question": "What are the id, language and original artist of the songs whose name is not 'Love'?",
        "SQL": "SELECT id ,  LANGUAGE ,  original_artist FROM songs WHERE name != 'Love'",
        "tables": [
            "songs"
        ],
        "columns": [
            "songs.language",
            "songs.id",
            "songs.original_artist",
            "songs.name"
        ],
        "values": [
            {
                "table": "songs",
                "column": "name",
                "value": "Love",
                "condition": "!="
            }
        ],
        "db_id": "sing_contest",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "songs.name.love"
        ]
    },
    {
        "question": "What are the names and original artists of the song whose English translation is 'All the streets of love'?",
        "SQL": "SELECT name ,  original_artist FROM songs WHERE english_translation  =  'All the streets of love'",
        "tables": [
            "songs"
        ],
        "columns": [
            "songs.english_translation",
            "songs.original_artist",
            "songs.name"
        ],
        "values": [
            {
                "table": "songs",
                "column": "english_translation",
                "value": "All the streets of love",
                "condition": "="
            }
        ],
        "db_id": "sing_contest",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "songs.english_translation.all the streets of love"
        ]
    },
    {
        "question": "What are the distinct stage presence scores for all the songs that are in language 'English' ?",
        "SQL": "SELECT DISTINCT T2.stage_presence FROM songs AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.songs_id WHERE T1.language  =  'English'",
        "tables": [
            "songs",
            "performance_score"
        ],
        "columns": [
            "performance_score.stage_presence",
            "performance_score.songs_id",
            "songs.id",
            "songs.language"
        ],
        "values": [
            {
                "table": "songs",
                "column": "language",
                "value": "English",
                "condition": "="
            }
        ],
        "db_id": "sing_contest",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "songs.language.english"
        ]
    },
    {
        "question": "What are the voice sound quality scores received for the song named ' The Balkan Girls ' in English language ?",
        "SQL": "SELECT T1.voice_sound_quality FROM performance_score AS T1 JOIN songs AS T2 ON T1.songs_id  =  T2.id WHERE T2.name  =  ' The Balkan Girls ' AND T2.language  =  'English'",
        "tables": [
            "songs",
            "performance_score"
        ],
        "columns": [
            "songs.language",
            "performance_score.voice_sound_quality",
            "songs.id",
            "performance_score.songs_id",
            "songs.name"
        ],
        "values": [
            {
                "table": "songs",
                "column": "name",
                "value": " The Balkan Girls ",
                "condition": "="
            },
            {
                "table": "songs",
                "column": "language",
                "value": "English",
                "condition": "="
            }
        ],
        "db_id": "sing_contest",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "songs.name. the balkan girls ",
            "songs.language.english"
        ]
    },
    {
        "question": "What are the distinct names of the participants who have sung a song in 'English'?",
        "SQL": "SELECT DISTINCT T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id JOIN songs AS T3 ON T3.id  =  T2.songs_id WHERE T3.language  =  'English'",
        "tables": [
            "participants",
            "songs",
            "performance_score"
        ],
        "columns": [
            "songs.language",
            "participants.id",
            "performance_score.participant_id",
            "songs.id",
            "participants.name",
            "performance_score.songs_id"
        ],
        "values": [
            {
                "table": "songs",
                "column": "language",
                "value": "English",
                "condition": "="
            }
        ],
        "db_id": "sing_contest",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "songs.language.english"
        ]
    },
    {
        "question": "What are the name and popularity of participants who have sung a song both in 'Croatian' language and in 'English' language?",
        "SQL": "SELECT T1.name ,  T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id JOIN songs AS T3 ON T3.id  =  T2.songs_id WHERE T3.language  =  'Croatian' INTERSECT SELECT T1.name ,  T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id JOIN songs AS T3 ON T3.id  =  T2.songs_id WHERE T3.language  =  'English'",
        "tables": [
            "participants",
            "songs",
            "performance_score"
        ],
        "columns": [
            "songs.language",
            "participants.popularity",
            "participants.id",
            "performance_score.participant_id",
            "songs.id",
            "participants.name",
            "performance_score.songs_id"
        ],
        "values": [
            {
                "table": "songs",
                "column": "language",
                "value": "Croatian",
                "condition": "="
            },
            {
                "table": "songs",
                "column": "language",
                "value": "English",
                "condition": "="
            }
        ],
        "db_id": "sing_contest",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "songs.language.croatian",
            "songs.language.english"
        ]
    },
    {
        "question": "Show ids for all female (sex is F) students living in state PA.",
        "SQL": "SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  \"PA\"  AND T2.sex  =  'F'",
        "tables": [
            "city",
            "student"
        ],
        "columns": [
            "city.city_code",
            "student.city_code",
            "student.sex",
            "city.state"
        ],
        "values": [
            {
                "table": "student",
                "column": "sex",
                "value": "F",
                "condition": "="
            }
        ],
        "db_id": "address_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "student.sex.f"
        ]
    },
    {
        "question": "What are the student ids for female students in the state of PA?",
        "SQL": "SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  \"PA\"  AND T2.sex  =  'F'",
        "tables": [
            "city",
            "student"
        ],
        "columns": [
            "city.city_code",
            "student.city_code",
            "student.sex",
            "city.state"
        ],
        "values": [
            {
                "table": "student",
                "column": "sex",
                "value": "F",
                "condition": "="
            }
        ],
        "db_id": "address_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "student.sex.f"
        ]
    },
    {
        "question": "Show ids for all male students living outside of USA.",
        "SQL": "SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T2.sex  =  'M' AND T1.country != \"USA\"",
        "tables": [
            "city",
            "student"
        ],
        "columns": [
            "city.country",
            "city.city_code",
            "student.city_code",
            "student.sex"
        ],
        "values": [
            {
                "table": "student",
                "column": "sex",
                "value": "M",
                "condition": "="
            }
        ],
        "db_id": "address_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "student.sex.m"
        ]
    },
    {
        "question": "What are the ids for male students not in the USA?",
        "SQL": "SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T2.sex  =  'M' AND T1.country != \"USA\"",
        "tables": [
            "city",
            "student"
        ],
        "columns": [
            "city.country",
            "city.city_code",
            "student.city_code",
            "student.sex"
        ],
        "values": [
            {
                "table": "student",
                "column": "sex",
                "value": "M",
                "condition": "="
            }
        ],
        "db_id": "address_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "student.sex.m"
        ]
    },
    {
        "question": "Find the id of Sailors (sid) that reserved red or blue boat.",
        "SQL": "SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' OR T1.color  =  \"blue\"",
        "tables": [
            "boats",
            "reserves"
        ],
        "columns": [
            "reserves.sid",
            "reserves.bid",
            "boats.bid",
            "boats.color"
        ],
        "values": [
            {
                "table": "boats",
                "column": "color",
                "value": "red",
                "condition": "="
            }
        ],
        "db_id": "boat_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "boats.color.red"
        ]
    },
    {
        "question": "What are the sids for sailors who reserved red or blue boats?",
        "SQL": "SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' OR T1.color  =  \"blue\"",
        "tables": [
            "boats",
            "reserves"
        ],
        "columns": [
            "reserves.sid",
            "reserves.bid",
            "boats.bid",
            "boats.color"
        ],
        "values": [
            {
                "table": "boats",
                "column": "color",
                "value": "red",
                "condition": "="
            }
        ],
        "db_id": "boat_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "boats.color.red"
        ]
    },
    {
        "question": "Find the name and id of Sailors (sid) that reserved red or blue boat.",
        "SQL": "SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' OR T1.color  =  \"blue\"",
        "tables": [
            "boats",
            "sailors",
            "reserves"
        ],
        "columns": [
            "sailors.sid",
            "sailors.name",
            "reserves.bid",
            "boats.bid",
            "boats.color",
            "reserves.sid"
        ],
        "values": [
            {
                "table": "boats",
                "column": "color",
                "value": "red",
                "condition": "="
            }
        ],
        "db_id": "boat_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "boats.color.red"
        ]
    },
    {
        "question": "What are the names and ids of sailors who reserved red or blue boats?",
        "SQL": "SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' OR T1.color  =  \"blue\"",
        "tables": [
            "boats",
            "sailors",
            "reserves"
        ],
        "columns": [
            "sailors.sid",
            "sailors.name",
            "reserves.bid",
            "boats.bid",
            "boats.color",
            "reserves.sid"
        ],
        "values": [
            {
                "table": "boats",
                "column": "color",
                "value": "red",
                "condition": "="
            }
        ],
        "db_id": "boat_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "boats.color.red"
        ]
    },
    {
        "question": "Find the id of Sailors (sid) that reserved red and blue boat.",
        "SQL": "SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  \"blue\"",
        "tables": [
            "boats",
            "reserves"
        ],
        "columns": [
            "reserves.sid",
            "reserves.bid",
            "boats.bid",
            "boats.color"
        ],
        "values": [
            {
                "table": "boats",
                "column": "color",
                "value": "red",
                "condition": "="
            }
        ],
        "db_id": "boat_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "boats.color.red"
        ]
    },
    {
        "question": "What are the ids of sailors who reserved red and blue boats?",
        "SQL": "SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  \"blue\"",
        "tables": [
            "boats",
            "reserves"
        ],
        "columns": [
            "reserves.sid",
            "reserves.bid",
            "boats.bid",
            "boats.color"
        ],
        "values": [
            {
                "table": "boats",
                "column": "color",
                "value": "red",
                "condition": "="
            }
        ],
        "db_id": "boat_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "boats.color.red"
        ]
    },
    {
        "question": "Find the name and id of Sailors (sid) that reserved red and blue boat.",
        "SQL": "SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  \"blue\"",
        "tables": [
            "boats",
            "sailors",
            "reserves"
        ],
        "columns": [
            "sailors.sid",
            "sailors.name",
            "reserves.bid",
            "boats.bid",
            "boats.color",
            "reserves.sid"
        ],
        "values": [
            {
                "table": "boats",
                "column": "color",
                "value": "red",
                "condition": "="
            }
        ],
        "db_id": "boat_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "boats.color.red"
        ]
    },
    {
        "question": "What are the names and ids of sailors who reserved red and blue boats?",
        "SQL": "SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  \"blue\"",
        "tables": [
            "boats",
            "sailors",
            "reserves"
        ],
        "columns": [
            "sailors.sid",
            "sailors.name",
            "reserves.bid",
            "boats.bid",
            "boats.color",
            "reserves.sid"
        ],
        "values": [
            {
                "table": "boats",
                "column": "color",
                "value": "red",
                "condition": "="
            }
        ],
        "db_id": "boat_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "boats.color.red"
        ]
    },
    {
        "question": "What is the name of all sailors whose rating is higher than any sailor named Luis?",
        "SQL": "SELECT name FROM Sailors WHERE rating  >  (SELECT min(rating) FROM Sailors WHERE name  =  'Luis')",
        "tables": [
            "sailors"
        ],
        "columns": [
            "sailors.rating",
            "sailors.name"
        ],
        "values": [
            {
                "table": "sailors",
                "column": "name",
                "value": "Luis",
                "condition": "="
            },
            {
                "table": "",
                "column": "name",
                "value": "Luis",
                "condition": "="
            }
        ],
        "db_id": "boat_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "sailors.name.luis",
            ".name.luis"
        ]
    },
    {
        "question": "What are the sailors' names, the ones whose rating is higher than any sailor named Luis?",
        "SQL": "SELECT name FROM Sailors WHERE rating  >  (SELECT min(rating) FROM Sailors WHERE name  =  'Luis')",
        "tables": [
            "sailors"
        ],
        "columns": [
            "sailors.rating",
            "sailors.name"
        ],
        "values": [
            {
                "table": "sailors",
                "column": "name",
                "value": "Luis",
                "condition": "="
            },
            {
                "table": "",
                "column": "name",
                "value": "Luis",
                "condition": "="
            }
        ],
        "db_id": "boat_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "sailors.name.luis",
            ".name.luis"
        ]
    },
    {
        "question": "What is the name of all sailors whose rating is higher than all sailors named Luis?",
        "SQL": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(rating) FROM Sailors WHERE name  =  'Luis')",
        "tables": [
            "sailors"
        ],
        "columns": [
            "sailors.rating",
            "sailors.name"
        ],
        "values": [
            {
                "table": "sailors",
                "column": "name",
                "value": "Luis",
                "condition": "="
            },
            {
                "table": "",
                "column": "name",
                "value": "Luis",
                "condition": "="
            }
        ],
        "db_id": "boat_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "sailors.name.luis",
            ".name.luis"
        ]
    },
    {
        "question": "What are the names of all sailors with a higher rating than every sailor named Luis?",
        "SQL": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(rating) FROM Sailors WHERE name  =  'Luis')",
        "tables": [
            "sailors"
        ],
        "columns": [
            "sailors.rating",
            "sailors.name"
        ],
        "values": [
            {
                "table": "sailors",
                "column": "name",
                "value": "Luis",
                "condition": "="
            },
            {
                "table": "",
                "column": "name",
                "value": "Luis",
                "condition": "="
            }
        ],
        "db_id": "boat_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "sailors.name.luis",
            ".name.luis"
        ]
    },
    {
        "question": "What is the rating and average age for sailors who have reserved red boat grouped by rating?",
        "SQL": "SELECT T1.rating ,  avg(T1.age) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red' GROUP BY T1.rating",
        "tables": [
            "boats",
            "sailors",
            "reserves"
        ],
        "columns": [
            "sailors.rating",
            "sailors.sid",
            "boats.bid",
            "reserves.bid",
            "boats.color",
            "sailors.age",
            "reserves.sid"
        ],
        "values": [
            {
                "table": "boats",
                "column": "color",
                "value": "red",
                "condition": "="
            }
        ],
        "db_id": "boat_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "boats.color.red"
        ]
    },
    {
        "question": "What are the rating and average age for sailors who reserved red boats for each rating?",
        "SQL": "SELECT T1.rating ,  avg(T1.age) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red' GROUP BY T1.rating",
        "tables": [
            "boats",
            "sailors",
            "reserves"
        ],
        "columns": [
            "sailors.rating",
            "sailors.sid",
            "boats.bid",
            "reserves.bid",
            "boats.color",
            "sailors.age",
            "reserves.sid"
        ],
        "values": [
            {
                "table": "boats",
                "column": "color",
                "value": "red",
                "condition": "="
            }
        ],
        "db_id": "boat_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "boats.color.red"
        ]
    },
    {
        "question": "How many boats are red?",
        "SQL": "SELECT count(*) FROM Boats WHERE color  =  'red'",
        "tables": [
            "boats"
        ],
        "columns": [
            "boats.color"
        ],
        "values": [
            {
                "table": "boats",
                "column": "color",
                "value": "red",
                "condition": "="
            }
        ],
        "db_id": "boat_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "boats.color.red"
        ]
    },
    {
        "question": "How many red boats exist?",
        "SQL": "SELECT count(*) FROM Boats WHERE color  =  'red'",
        "tables": [
            "boats"
        ],
        "columns": [
            "boats.color"
        ],
        "values": [
            {
                "table": "boats",
                "column": "color",
                "value": "red",
                "condition": "="
            }
        ],
        "db_id": "boat_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "boats.color.red"
        ]
    },
    {
        "question": "Find the names of sailors whose rating is larger than the rating of all sailors who booked a red boat.",
        "SQL": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(T1.rating) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red')",
        "tables": [
            "boats",
            "sailors",
            "reserves"
        ],
        "columns": [
            "sailors.rating",
            "sailors.sid",
            "sailors.name",
            "boats.bid",
            "reserves.bid",
            "boats.color",
            "reserves.sid"
        ],
        "values": [
            {
                "table": "boats",
                "column": "color",
                "value": "red",
                "condition": "="
            },
            {
                "table": "boats",
                "column": "color",
                "value": "red",
                "condition": "="
            }
        ],
        "db_id": "boat_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "boats.color.red",
            "boats.color.red"
        ]
    },
    {
        "question": "What are the names of the sailors whose rating is larger than the rating of all sailors who booked a red boat?",
        "SQL": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(T1.rating) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red')",
        "tables": [
            "boats",
            "sailors",
            "reserves"
        ],
        "columns": [
            "sailors.rating",
            "sailors.sid",
            "sailors.name",
            "boats.bid",
            "reserves.bid",
            "boats.color",
            "reserves.sid"
        ],
        "values": [
            {
                "table": "boats",
                "column": "color",
                "value": "red",
                "condition": "="
            },
            {
                "table": "boats",
                "column": "color",
                "value": "red",
                "condition": "="
            }
        ],
        "db_id": "boat_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "boats.color.red",
            "boats.color.red"
        ]
    },
    {
        "question": "Find the names of sailors who reserved boat with the name Melon.",
        "SQL": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.name  =  'Melon'",
        "tables": [
            "boats",
            "sailors",
            "reserves"
        ],
        "columns": [
            "sailors.sid",
            "sailors.name",
            "boats.bid",
            "reserves.bid",
            "boats.name",
            "reserves.sid"
        ],
        "values": [
            {
                "table": "boats",
                "column": "name",
                "value": "Melon",
                "condition": "="
            }
        ],
        "db_id": "boat_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "boats.name.melon"
        ]
    },
    {
        "question": "What are the names of sailors who reserved a boat with the name Melon?",
        "SQL": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.name  =  'Melon'",
        "tables": [
            "boats",
            "sailors",
            "reserves"
        ],
        "columns": [
            "sailors.sid",
            "sailors.name",
            "boats.bid",
            "reserves.bid",
            "boats.name",
            "reserves.sid"
        ],
        "values": [
            {
                "table": "boats",
                "column": "name",
                "value": "Melon",
                "condition": "="
            }
        ],
        "db_id": "boat_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "boats.name.melon"
        ]
    },
    {
        "question": "Which headphone classes have both headphones with \"Bowls\" and headphones with \"Comfort Pads\" earpads?",
        "SQL": "SELECT CLASS FROM headphone WHERE earpads  =  'Bowls' INTERSECT SELECT CLASS FROM headphone WHERE earpads  =  'Comfort Pads'",
        "tables": [
            "headphone"
        ],
        "columns": [
            "headphone.class",
            "headphone.earpads"
        ],
        "values": [
            {
                "table": "",
                "column": "earpads",
                "value": "Bowls",
                "condition": "="
            },
            {
                "table": "",
                "column": "earpads",
                "value": "Comfort Pads",
                "condition": "="
            }
        ],
        "db_id": "headphone_store",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            ".earpads.bowls",
            ".earpads.comfort pads"
        ]
    },
    {
        "question": "Find the headphone classes that contain both headphones using \"Bowls\" earpads and headphones using \"Comfort Pads\" earpads.",
        "SQL": "SELECT CLASS FROM headphone WHERE earpads  =  'Bowls' INTERSECT SELECT CLASS FROM headphone WHERE earpads  =  'Comfort Pads'",
        "tables": [
            "headphone"
        ],
        "columns": [
            "headphone.class",
            "headphone.earpads"
        ],
        "values": [
            {
                "table": "",
                "column": "earpads",
                "value": "Bowls",
                "condition": "="
            },
            {
                "table": "",
                "column": "earpads",
                "value": "Comfort Pads",
                "condition": "="
            }
        ],
        "db_id": "headphone_store",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            ".earpads.bowls",
            ".earpads.comfort pads"
        ]
    },
    {
        "question": "Which earpads never use plastic construction?",
        "SQL": "SELECT earpads FROM headphone EXCEPT SELECT earpads FROM headphone WHERE construction  =  'Plastic'",
        "tables": [
            "headphone"
        ],
        "columns": [
            "headphone.earpads",
            "headphone.construction"
        ],
        "values": [
            {
                "table": "",
                "column": "construction",
                "value": "Plastic",
                "condition": "="
            }
        ],
        "db_id": "headphone_store",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            ".construction.plastic"
        ]
    },
    {
        "question": "Find all earpads that do not use plastic construction.",
        "SQL": "SELECT earpads FROM headphone EXCEPT SELECT earpads FROM headphone WHERE construction  =  'Plastic'",
        "tables": [
            "headphone"
        ],
        "columns": [
            "headphone.earpads",
            "headphone.construction"
        ],
        "values": [
            {
                "table": "",
                "column": "construction",
                "value": "Plastic",
                "condition": "="
            }
        ],
        "db_id": "headphone_store",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            ".construction.plastic"
        ]
    },
    {
        "question": "List name and parking info for the stores in the Tarzana neighborhood.",
        "SQL": "SELECT name ,  parking FROM store WHERE neighborhood  =  'Tarzana'",
        "tables": [
            "store"
        ],
        "columns": [
            "store.parking",
            "store.neighborhood",
            "store.name"
        ],
        "values": [
            {
                "table": "store",
                "column": "neighborhood",
                "value": "Tarzana",
                "condition": "="
            }
        ],
        "db_id": "headphone_store",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "store.neighborhood.tarzana"
        ]
    },
    {
        "question": "Which stores are located in the \"Tarzana\" neighborhood? Return their names and parking information.",
        "SQL": "SELECT name ,  parking FROM store WHERE neighborhood  =  'Tarzana'",
        "tables": [
            "store"
        ],
        "columns": [
            "store.parking",
            "store.neighborhood",
            "store.name"
        ],
        "values": [
            {
                "table": "store",
                "column": "neighborhood",
                "value": "Tarzana",
                "condition": "="
            }
        ],
        "db_id": "headphone_store",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "store.neighborhood.tarzana"
        ]
    },
    {
        "question": "How many headphones are stored in the Woodman store?",
        "SQL": "SELECT sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id WHERE t1.name  =  'Woodman'",
        "tables": [
            "stock",
            "store"
        ],
        "columns": [
            "stock.store_id",
            "stock.quantity",
            "store.name",
            "store.store_id"
        ],
        "values": [
            {
                "table": "store",
                "column": "name",
                "value": "Woodman",
                "condition": "="
            }
        ],
        "db_id": "headphone_store",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "store.name.woodman"
        ]
    },
    {
        "question": "Find the total quantity of headphones stored in the Woodman store.",
        "SQL": "SELECT sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id WHERE t1.name  =  'Woodman'",
        "tables": [
            "stock",
            "store"
        ],
        "columns": [
            "stock.store_id",
            "stock.quantity",
            "store.name",
            "store.store_id"
        ],
        "values": [
            {
                "table": "store",
                "column": "name",
                "value": "Woodman",
                "condition": "="
            }
        ],
        "db_id": "headphone_store",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "store.name.woodman"
        ]
    },
    {
        "question": "Show all staff names who have been both speaker and sponsor in some conference.",
        "SQL": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'",
        "tables": [
            "staff",
            "conference_participation"
        ],
        "columns": [
            "conference_participation.staff_id",
            "staff.staff_id",
            "conference_participation.role",
            "staff.name"
        ],
        "values": [
            {
                "table": "conference_participation",
                "column": "role",
                "value": "Speaker",
                "condition": "="
            },
            {
                "table": "conference_participation",
                "column": "role",
                "value": "Sponsor",
                "condition": "="
            }
        ],
        "db_id": "conference",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "conference_participation.role.speaker",
            "conference_participation.role.sponsor"
        ]
    },
    {
        "question": "What are the names of the staff members who have been both a speaker and a sponsor at some conference?",
        "SQL": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'",
        "tables": [
            "staff",
            "conference_participation"
        ],
        "columns": [
            "conference_participation.staff_id",
            "staff.staff_id",
            "conference_participation.role",
            "staff.name"
        ],
        "values": [
            {
                "table": "conference_participation",
                "column": "role",
                "value": "Speaker",
                "condition": "="
            },
            {
                "table": "conference_participation",
                "column": "role",
                "value": "Sponsor",
                "condition": "="
            }
        ],
        "db_id": "conference",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "conference_participation.role.speaker",
            "conference_participation.role.sponsor"
        ]
    },
    {
        "question": "Show all names who have been in both ACL and Naccl.",
        "SQL": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN Conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.Conference_name  =  'ACL' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.Conference_name  =  'Naccl'",
        "tables": [
            "staff",
            "conference_participation",
            "conference"
        ],
        "columns": [
            "conference.conference_id",
            "staff.staff_id",
            "conference_participation.staff_id",
            "conference_participation.conference_id",
            "staff.name",
            "conference.conference_name"
        ],
        "values": [
            {
                "table": "conference",
                "column": "conference_name",
                "value": "ACL",
                "condition": "="
            },
            {
                "table": "conference",
                "column": "conference_name",
                "value": "Naccl",
                "condition": "="
            }
        ],
        "db_id": "conference",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "conference.conference_name.acl",
            "conference.conference_name.naccl"
        ]
    },
    {
        "question": "What are the names of everbody who has participated in both the ACL and NACCL conferences?",
        "SQL": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN Conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.Conference_name  =  'ACL' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.Conference_name  =  'Naccl'",
        "tables": [
            "staff",
            "conference_participation",
            "conference"
        ],
        "columns": [
            "conference.conference_id",
            "staff.staff_id",
            "conference_participation.staff_id",
            "conference_participation.conference_id",
            "staff.name",
            "conference.conference_name"
        ],
        "values": [
            {
                "table": "conference",
                "column": "conference_name",
                "value": "ACL",
                "condition": "="
            },
            {
                "table": "conference",
                "column": "conference_name",
                "value": "Naccl",
                "condition": "="
            }
        ],
        "db_id": "conference",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "conference.conference_name.acl",
            "conference.conference_name.naccl"
        ]
    },
    {
        "question": "Find the names of all pilots who have a plane named Piper Cub and is under 35.",
        "SQL": "SELECT pilot_name FROM PilotSkills WHERE age  <  35 AND plane_name  =  'Piper Cub'",
        "tables": [
            "pilotskills"
        ],
        "columns": [
            "pilotskills.plane_name",
            "pilotskills.age",
            "pilotskills.pilot_name"
        ],
        "values": [
            {
                "table": "pilotskills",
                "column": "age",
                "value": "35",
                "condition": "<"
            },
            {
                "table": "pilotskills",
                "column": "plane_name",
                "value": "Piper Cub",
                "condition": "="
            }
        ],
        "db_id": "pilot_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "pilotskills.age.35",
            "pilotskills.plane_name.piper cub"
        ]
    },
    {
        "question": "What are the names of pilots who are younger than 35 and have a plane named Piper Cub?",
        "SQL": "SELECT pilot_name FROM PilotSkills WHERE age  <  35 AND plane_name  =  'Piper Cub'",
        "tables": [
            "pilotskills"
        ],
        "columns": [
            "pilotskills.plane_name",
            "pilotskills.age",
            "pilotskills.pilot_name"
        ],
        "values": [
            {
                "table": "pilotskills",
                "column": "age",
                "value": "35",
                "condition": "<"
            },
            {
                "table": "pilotskills",
                "column": "plane_name",
                "value": "Piper Cub",
                "condition": "="
            }
        ],
        "db_id": "pilot_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "pilotskills.age.35",
            "pilotskills.plane_name.piper cub"
        ]
    },
    {
        "question": "Where is the plane F-14 Fighter located?",
        "SQL": "SELECT LOCATION FROM hangar WHERE plane_name  =  'F-14 Fighter'",
        "tables": [
            "hangar"
        ],
        "columns": [
            "hangar.plane_name",
            "hangar.location"
        ],
        "values": [
            {
                "table": "hangar",
                "column": "plane_name",
                "value": "F-14 Fighter",
                "condition": "="
            }
        ],
        "db_id": "pilot_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "hangar.plane_name.f-14 fighter"
        ]
    },
    {
        "question": "Return the location of the hangar in which F-14 Fighter is located.",
        "SQL": "SELECT LOCATION FROM hangar WHERE plane_name  =  'F-14 Fighter'",
        "tables": [
            "hangar"
        ],
        "columns": [
            "hangar.plane_name",
            "hangar.location"
        ],
        "values": [
            {
                "table": "hangar",
                "column": "plane_name",
                "value": "F-14 Fighter",
                "condition": "="
            }
        ],
        "db_id": "pilot_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "hangar.plane_name.f-14 fighter"
        ]
    },
    {
        "question": "Which plane does the pilot Jones with age 32 has?",
        "SQL": "SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Jones'  AND age  =  32",
        "tables": [
            "pilotskills"
        ],
        "columns": [
            "pilotskills.plane_name",
            "pilotskills.age",
            "pilotskills.pilot_name"
        ],
        "values": [
            {
                "table": "pilotskills",
                "column": "pilot_name",
                "value": "Jones",
                "condition": "="
            },
            {
                "table": "pilotskills",
                "column": "age",
                "value": "32",
                "condition": "="
            }
        ],
        "db_id": "pilot_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "pilotskills.pilot_name.jones",
            "pilotskills.age.32"
        ]
    },
    {
        "question": "What are the names of planes that the pilot Jones who is 32 has?",
        "SQL": "SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Jones'  AND age  =  32",
        "tables": [
            "pilotskills"
        ],
        "columns": [
            "pilotskills.plane_name",
            "pilotskills.age",
            "pilotskills.pilot_name"
        ],
        "values": [
            {
                "table": "pilotskills",
                "column": "pilot_name",
                "value": "Jones",
                "condition": "="
            },
            {
                "table": "pilotskills",
                "column": "age",
                "value": "32",
                "condition": "="
            }
        ],
        "db_id": "pilot_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "pilotskills.pilot_name.jones",
            "pilotskills.age.32"
        ]
    },
    {
        "question": "How many plane B-52 Bomber owned by the pilot who is under 35?",
        "SQL": "SELECT count(*) FROM pilotskills WHERE age  <  35 AND plane_name  =  'B-52 Bomber'",
        "tables": [
            "pilotskills"
        ],
        "columns": [
            "pilotskills.plane_name",
            "pilotskills.age"
        ],
        "values": [
            {
                "table": "pilotskills",
                "column": "age",
                "value": "35",
                "condition": "<"
            },
            {
                "table": "pilotskills",
                "column": "plane_name",
                "value": "B-52 Bomber",
                "condition": "="
            }
        ],
        "db_id": "pilot_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "pilotskills.age.35",
            "pilotskills.plane_name.b-52 bomber"
        ]
    },
    {
        "question": "Count the number of B-52 Bombers owned by pilots under 35.",
        "SQL": "SELECT count(*) FROM pilotskills WHERE age  <  35 AND plane_name  =  'B-52 Bomber'",
        "tables": [
            "pilotskills"
        ],
        "columns": [
            "pilotskills.plane_name",
            "pilotskills.age"
        ],
        "values": [
            {
                "table": "pilotskills",
                "column": "age",
                "value": "35",
                "condition": "<"
            },
            {
                "table": "pilotskills",
                "column": "plane_name",
                "value": "B-52 Bomber",
                "condition": "="
            }
        ],
        "db_id": "pilot_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "pilotskills.age.35",
            "pilotskills.plane_name.b-52 bomber"
        ]
    },
    {
        "question": "Who is the youngest pilot to fly the plane Piper Cub?",
        "SQL": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' ORDER BY age LIMIT 1",
        "tables": [
            "pilotskills"
        ],
        "columns": [
            "pilotskills.plane_name",
            "pilotskills.age",
            "pilotskills.pilot_name"
        ],
        "values": [
            {
                "table": "pilotskills",
                "column": "plane_name",
                "value": "Piper Cub",
                "condition": "="
            }
        ],
        "db_id": "pilot_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "pilotskills.plane_name.piper cub"
        ]
    },
    {
        "question": "Return the name of the youngest pilot to fly Piper Cub.",
        "SQL": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' ORDER BY age LIMIT 1",
        "tables": [
            "pilotskills"
        ],
        "columns": [
            "pilotskills.plane_name",
            "pilotskills.age",
            "pilotskills.pilot_name"
        ],
        "values": [
            {
                "table": "pilotskills",
                "column": "plane_name",
                "value": "Piper Cub",
                "condition": "="
            }
        ],
        "db_id": "pilot_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "pilotskills.plane_name.piper cub"
        ]
    },
    {
        "question": "How many pilots whose planes are in Chicago?",
        "SQL": "SELECT \tcount(DISTINCT T1.pilot_name) FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  'Chicago'",
        "tables": [
            "hangar",
            "pilotskills"
        ],
        "columns": [
            "hangar.location",
            "pilotskills.plane_name",
            "hangar.plane_name",
            "pilotskills.pilot_name"
        ],
        "values": [
            {
                "table": "hangar",
                "column": "location",
                "value": "Chicago",
                "condition": "="
            }
        ],
        "db_id": "pilot_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "hangar.location.chicago"
        ]
    },
    {
        "question": "Count the number of pilots who have planes in Chicago.",
        "SQL": "SELECT \tcount(DISTINCT T1.pilot_name) FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  'Chicago'",
        "tables": [
            "hangar",
            "pilotskills"
        ],
        "columns": [
            "hangar.location",
            "pilotskills.plane_name",
            "hangar.plane_name",
            "pilotskills.pilot_name"
        ],
        "values": [
            {
                "table": "hangar",
                "column": "location",
                "value": "Chicago",
                "condition": "="
            }
        ],
        "db_id": "pilot_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "hangar.location.chicago"
        ]
    },
    {
        "question": "What are the planes owned by pilot Smith with age 41?",
        "SQL": "SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Smith' AND age  =  41",
        "tables": [
            "pilotskills"
        ],
        "columns": [
            "pilotskills.plane_name",
            "pilotskills.age",
            "pilotskills.pilot_name"
        ],
        "values": [
            {
                "table": "pilotskills",
                "column": "pilot_name",
                "value": "Smith",
                "condition": "="
            },
            {
                "table": "pilotskills",
                "column": "age",
                "value": "41",
                "condition": "="
            }
        ],
        "db_id": "pilot_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "pilotskills.pilot_name.smith",
            "pilotskills.age.41"
        ]
    },
    {
        "question": "Return the names of planes owned by the pilot whose name is Smith and is 41 years old.",
        "SQL": "SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Smith' AND age  =  41",
        "tables": [
            "pilotskills"
        ],
        "columns": [
            "pilotskills.plane_name",
            "pilotskills.age",
            "pilotskills.pilot_name"
        ],
        "values": [
            {
                "table": "pilotskills",
                "column": "pilot_name",
                "value": "Smith",
                "condition": "="
            },
            {
                "table": "pilotskills",
                "column": "age",
                "value": "41",
                "condition": "="
            }
        ],
        "db_id": "pilot_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "pilotskills.pilot_name.smith",
            "pilotskills.age.41"
        ]
    },
    {
        "question": "How many planes are owned by the pilot whose name is Smith?",
        "SQL": "SELECT count(plane_name) FROM pilotskills WHERE pilot_name  =  'Smith'",
        "tables": [
            "pilotskills"
        ],
        "columns": [
            "pilotskills.plane_name",
            "pilotskills.pilot_name"
        ],
        "values": [
            {
                "table": "pilotskills",
                "column": "pilot_name",
                "value": "Smith",
                "condition": "="
            }
        ],
        "db_id": "pilot_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "pilotskills.pilot_name.smith"
        ]
    },
    {
        "question": "Count the number of planes Smith owns.",
        "SQL": "SELECT count(plane_name) FROM pilotskills WHERE pilot_name  =  'Smith'",
        "tables": [
            "pilotskills"
        ],
        "columns": [
            "pilotskills.plane_name",
            "pilotskills.pilot_name"
        ],
        "values": [
            {
                "table": "pilotskills",
                "column": "pilot_name",
                "value": "Smith",
                "condition": "="
            }
        ],
        "db_id": "pilot_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "pilotskills.pilot_name.smith"
        ]
    },
    {
        "question": "What are the names and ages of pilots who own plane Piper Cub and are older than 35, or have F-14 Fighter and are younger than 30?",
        "SQL": "SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'Piper Cub' AND age  >  35 UNION SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'F-14 Fighter' AND age  <  30",
        "tables": [
            "pilotskills"
        ],
        "columns": [],
        "values": [
            {
                "table": "",
                "column": "plane_name",
                "value": "Piper Cub",
                "condition": "="
            },
            {
                "table": "",
                "column": "age",
                "value": "35",
                "condition": ">"
            },
            {
                "table": "",
                "column": "plane_name",
                "value": "F-14 Fighter",
                "condition": "="
            },
            {
                "table": "",
                "column": "age",
                "value": "30",
                "condition": "<"
            }
        ],
        "db_id": "pilot_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            ".plane_name.piper cub",
            ".age.35",
            ".plane_name.f-14 fighter",
            ".age.30"
        ]
    },
    {
        "question": "Return the names and ages of pilors who have flown Piper Cub and are older than 35, or have flown the F-14 Fighter and are younger than 30.",
        "SQL": "SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'Piper Cub' AND age  >  35 UNION SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'F-14 Fighter' AND age  <  30",
        "tables": [
            "pilotskills"
        ],
        "columns": [],
        "values": [
            {
                "table": "",
                "column": "plane_name",
                "value": "Piper Cub",
                "condition": "="
            },
            {
                "table": "",
                "column": "age",
                "value": "35",
                "condition": ">"
            },
            {
                "table": "",
                "column": "plane_name",
                "value": "F-14 Fighter",
                "condition": "="
            },
            {
                "table": "",
                "column": "age",
                "value": "30",
                "condition": "<"
            }
        ],
        "db_id": "pilot_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            ".plane_name.piper cub",
            ".age.35",
            ".plane_name.f-14 fighter",
            ".age.30"
        ]
    },
    {
        "question": "Find pilots who own plane Piper Cub but not B-52 Bomber.",
        "SQL": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' EXCEPT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'",
        "tables": [
            "pilotskills"
        ],
        "columns": [],
        "values": [
            {
                "table": "",
                "column": "plane_name",
                "value": "Piper Cub",
                "condition": "="
            },
            {
                "table": "",
                "column": "plane_name",
                "value": "B-52 Bomber",
                "condition": "="
            }
        ],
        "db_id": "pilot_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            ".plane_name.piper cub",
            ".plane_name.b-52 bomber"
        ]
    },
    {
        "question": "What are the names of pilots who have flown Piper Cub but not the B-52 Bomber?",
        "SQL": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' EXCEPT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'",
        "tables": [
            "pilotskills"
        ],
        "columns": [],
        "values": [
            {
                "table": "",
                "column": "plane_name",
                "value": "Piper Cub",
                "condition": "="
            },
            {
                "table": "",
                "column": "plane_name",
                "value": "B-52 Bomber",
                "condition": "="
            }
        ],
        "db_id": "pilot_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            ".plane_name.piper cub",
            ".plane_name.b-52 bomber"
        ]
    },
    {
        "question": "Find pilots who own planes Piper Cub and B-52 Bomber.",
        "SQL": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'",
        "tables": [
            "pilotskills"
        ],
        "columns": [],
        "values": [
            {
                "table": "",
                "column": "plane_name",
                "value": "Piper Cub",
                "condition": "="
            },
            {
                "table": "",
                "column": "plane_name",
                "value": "B-52 Bomber",
                "condition": "="
            }
        ],
        "db_id": "pilot_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            ".plane_name.piper cub",
            ".plane_name.b-52 bomber"
        ]
    },
    {
        "question": "What are the names of pilots who own both Piper Cub and the B-52 Bomber?",
        "SQL": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'",
        "tables": [
            "pilotskills"
        ],
        "columns": [],
        "values": [
            {
                "table": "",
                "column": "plane_name",
                "value": "Piper Cub",
                "condition": "="
            },
            {
                "table": "",
                "column": "plane_name",
                "value": "B-52 Bomber",
                "condition": "="
            }
        ],
        "db_id": "pilot_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            ".plane_name.piper cub",
            ".plane_name.b-52 bomber"
        ]
    },
    {
        "question": "Find the pilots who have either plane Piper Cub or plane F-14 Fighter.",
        "SQL": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' OR plane_name  =  'F-14 Fighter'",
        "tables": [
            "pilotskills"
        ],
        "columns": [
            "pilotskills.plane_name",
            "pilotskills.pilot_name"
        ],
        "values": [
            {
                "table": "pilotskills",
                "column": "plane_name",
                "value": "Piper Cub",
                "condition": "="
            },
            {
                "table": "pilotskills",
                "column": "plane_name",
                "value": "F-14 Fighter",
                "condition": "="
            }
        ],
        "db_id": "pilot_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "pilotskills.plane_name.piper cub",
            "pilotskills.plane_name.f-14 fighter"
        ]
    },
    {
        "question": "What are the names of pilots who have either the Piper Cub or the F-14 Fighter?",
        "SQL": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' OR plane_name  =  'F-14 Fighter'",
        "tables": [
            "pilotskills"
        ],
        "columns": [
            "pilotskills.plane_name",
            "pilotskills.pilot_name"
        ],
        "values": [
            {
                "table": "pilotskills",
                "column": "plane_name",
                "value": "Piper Cub",
                "condition": "="
            },
            {
                "table": "pilotskills",
                "column": "plane_name",
                "value": "F-14 Fighter",
                "condition": "="
            }
        ],
        "db_id": "pilot_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "pilotskills.plane_name.piper cub",
            "pilotskills.plane_name.f-14 fighter"
        ]
    },
    {
        "question": "List in alphabetic order the names of pilots whose age is greater than some pilots having plane Piper Cub.",
        "SQL": "SELECT pilot_name FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub') ORDER BY pilot_name",
        "tables": [
            "pilotskills"
        ],
        "columns": [
            "pilotskills.plane_name",
            "pilotskills.age"
        ],
        "values": [
            {
                "table": "pilotskills",
                "column": "plane_name",
                "value": "Piper Cub",
                "condition": "="
            },
            {
                "table": "",
                "column": "plane_name",
                "value": "Piper Cub",
                "condition": "="
            }
        ],
        "db_id": "pilot_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "pilotskills.plane_name.piper cub",
            ".plane_name.piper cub"
        ]
    },
    {
        "question": "Return the names of pilots who are older than any pilot who has flown Piper Cub, ordered alphabetically.",
        "SQL": "SELECT pilot_name FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub') ORDER BY pilot_name",
        "tables": [
            "pilotskills"
        ],
        "columns": [
            "pilotskills.plane_name",
            "pilotskills.age"
        ],
        "values": [
            {
                "table": "pilotskills",
                "column": "plane_name",
                "value": "Piper Cub",
                "condition": "="
            },
            {
                "table": "",
                "column": "plane_name",
                "value": "Piper Cub",
                "condition": "="
            }
        ],
        "db_id": "pilot_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "pilotskills.plane_name.piper cub",
            ".plane_name.piper cub"
        ]
    },
    {
        "question": "Find the number of pilots whose age is younger than all pilots whose plane is F-14 Fighter.",
        "SQL": "SELECT count(*) FROM pilotskills WHERE age  <  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'F-14 Fighter')",
        "tables": [
            "pilotskills"
        ],
        "columns": [
            "pilotskills.plane_name",
            "pilotskills.age"
        ],
        "values": [
            {
                "table": "pilotskills",
                "column": "plane_name",
                "value": "F-14 Fighter",
                "condition": "="
            },
            {
                "table": "",
                "column": "plane_name",
                "value": "F-14 Fighter",
                "condition": "="
            }
        ],
        "db_id": "pilot_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "pilotskills.plane_name.f-14 fighter",
            ".plane_name.f-14 fighter"
        ]
    },
    {
        "question": "How many pilots are younger than all pilots who own the F-14 Fighter?",
        "SQL": "SELECT count(*) FROM pilotskills WHERE age  <  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'F-14 Fighter')",
        "tables": [
            "pilotskills"
        ],
        "columns": [
            "pilotskills.plane_name",
            "pilotskills.age"
        ],
        "values": [
            {
                "table": "pilotskills",
                "column": "plane_name",
                "value": "F-14 Fighter",
                "condition": "="
            },
            {
                "table": "",
                "column": "plane_name",
                "value": "F-14 Fighter",
                "condition": "="
            }
        ],
        "db_id": "pilot_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "pilotskills.plane_name.f-14 fighter",
            ".plane_name.f-14 fighter"
        ]
    },
    {
        "question": "Find the number of all pilots whose age is older than some pilot who has plane Piper Cub.",
        "SQL": "SELECT count(pilot_name) FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub')",
        "tables": [
            "pilotskills"
        ],
        "columns": [
            "pilotskills.plane_name",
            "pilotskills.age"
        ],
        "values": [
            {
                "table": "pilotskills",
                "column": "plane_name",
                "value": "Piper Cub",
                "condition": "="
            },
            {
                "table": "",
                "column": "plane_name",
                "value": "Piper Cub",
                "condition": "="
            }
        ],
        "db_id": "pilot_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "pilotskills.plane_name.piper cub",
            ".plane_name.piper cub"
        ]
    },
    {
        "question": "How many pilots are older than the youngest pilot who has Piper Cub?",
        "SQL": "SELECT count(pilot_name) FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub')",
        "tables": [
            "pilotskills"
        ],
        "columns": [
            "pilotskills.plane_name",
            "pilotskills.age"
        ],
        "values": [
            {
                "table": "pilotskills",
                "column": "plane_name",
                "value": "Piper Cub",
                "condition": "="
            },
            {
                "table": "",
                "column": "plane_name",
                "value": "Piper Cub",
                "condition": "="
            }
        ],
        "db_id": "pilot_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "pilotskills.plane_name.piper cub",
            ".plane_name.piper cub"
        ]
    },
    {
        "question": "What are the id and height of the painting with the longest width in gallery 240?",
        "SQL": "SELECT paintingID ,  height_mm FROM paintings WHERE LOCATION  =  'Gallery 240' ORDER BY width_mm DESC LIMIT 1",
        "tables": [
            "paintings"
        ],
        "columns": [
            "paintings.paintingid",
            "paintings.location",
            "paintings.height_mm",
            "paintings.width_mm"
        ],
        "values": [
            {
                "table": "paintings",
                "column": "location",
                "value": "Gallery 240",
                "condition": "="
            }
        ],
        "db_id": "art_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "paintings.location.gallery 240"
        ]
    },
    {
        "question": "Tell me the height and id number of the widest painting in gallery 240.",
        "SQL": "SELECT paintingID ,  height_mm FROM paintings WHERE LOCATION  =  'Gallery 240' ORDER BY width_mm DESC LIMIT 1",
        "tables": [
            "paintings"
        ],
        "columns": [
            "paintings.paintingid",
            "paintings.location",
            "paintings.height_mm",
            "paintings.width_mm"
        ],
        "values": [
            {
                "table": "paintings",
                "column": "location",
                "value": "Gallery 240",
                "condition": "="
            }
        ],
        "db_id": "art_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "paintings.location.gallery 240"
        ]
    },
    {
        "question": "What are the ids of the paintings created before all of the paintings in gallery 240?",
        "SQL": "SELECT paintingID FROM paintings WHERE YEAR  <   (SELECT min(YEAR) FROM paintings WHERE LOCATION  =  'Gallery 240')",
        "tables": [
            "paintings"
        ],
        "columns": [
            "paintings.year",
            "paintings.location"
        ],
        "values": [
            {
                "table": "paintings",
                "column": "location",
                "value": "Gallery 240",
                "condition": "="
            },
            {
                "table": "",
                "column": "location",
                "value": "Gallery 240",
                "condition": "="
            }
        ],
        "db_id": "art_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "paintings.location.gallery 240",
            ".location.gallery 240"
        ]
    },
    {
        "question": "What is the id of every painting created before the oldest painting in gallery 240?",
        "SQL": "SELECT paintingID FROM paintings WHERE YEAR  <   (SELECT min(YEAR) FROM paintings WHERE LOCATION  =  'Gallery 240')",
        "tables": [
            "paintings"
        ],
        "columns": [
            "paintings.year",
            "paintings.location"
        ],
        "values": [
            {
                "table": "paintings",
                "column": "location",
                "value": "Gallery 240",
                "condition": "="
            },
            {
                "table": "",
                "column": "location",
                "value": "Gallery 240",
                "condition": "="
            }
        ],
        "db_id": "art_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "paintings.location.gallery 240",
            ".location.gallery 240"
        ]
    },
    {
        "question": "Which winning drivers of races had pole position that is not \"Junior Strous\"?",
        "SQL": "SELECT Winning_driver FROM race WHERE Pole_Position != 'Junior Strous'",
        "tables": [
            "race"
        ],
        "columns": [
            "race.winning_driver",
            "race.pole_position"
        ],
        "values": [
            {
                "table": "race",
                "column": "pole_position",
                "value": "Junior Strous",
                "condition": "!="
            }
        ],
        "db_id": "car_road_race",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "race.pole_position.junior strous"
        ]
    },
    {
        "question": "Return the winning drivers of races who did not have the pole position of Junior Strous.",
        "SQL": "SELECT Winning_driver FROM race WHERE Pole_Position != 'Junior Strous'",
        "tables": [
            "race"
        ],
        "columns": [
            "race.winning_driver",
            "race.pole_position"
        ],
        "values": [
            {
                "table": "race",
                "column": "pole_position",
                "value": "Junior Strous",
                "condition": "!="
            }
        ],
        "db_id": "car_road_race",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "race.pole_position.junior strous"
        ]
    },
    {
        "question": "How is the feature rooftop described?",
        "SQL": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';",
        "tables": [
            "features"
        ],
        "columns": [
            "features.feature_name",
            "features.feature_description"
        ],
        "values": [
            {
                "table": "features",
                "column": "feature_name",
                "value": "rooftop",
                "condition": "="
            }
        ],
        "db_id": "real_estate_rentals",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "features.feature_name.rooftop"
        ]
    },
    {
        "question": "Return the description of the feature 'rooftop'.",
        "SQL": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';",
        "tables": [
            "features"
        ],
        "columns": [
            "features.feature_name",
            "features.feature_description"
        ],
        "values": [
            {
                "table": "features",
                "column": "feature_name",
                "value": "rooftop",
                "condition": "="
            }
        ],
        "db_id": "real_estate_rentals",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "features.feature_name.rooftop"
        ]
    },
    {
        "question": "List the average room count of the properties with gardens.",
        "SQL": "SELECT avg(T3.room_count) FROM Property_Features AS T1 JOIN Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T1.property_id  =  T3.property_id WHERE T2.feature_name  =  'garden';",
        "tables": [
            "property_features",
            "features",
            "properties"
        ],
        "columns": [
            "features.feature_id",
            "features.feature_name",
            "property_features.feature_id",
            "property_features.property_id",
            "properties.property_id",
            "properties.room_count"
        ],
        "values": [
            {
                "table": "features",
                "column": "feature_name",
                "value": "garden",
                "condition": "="
            }
        ],
        "db_id": "real_estate_rentals",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "features.feature_name.garden"
        ]
    },
    {
        "question": "On average, how many rooms do properties with garden features have?",
        "SQL": "SELECT avg(T3.room_count) FROM Property_Features AS T1 JOIN Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T1.property_id  =  T3.property_id WHERE T2.feature_name  =  'garden';",
        "tables": [
            "property_features",
            "features",
            "properties"
        ],
        "columns": [
            "features.feature_id",
            "features.feature_name",
            "property_features.feature_id",
            "property_features.property_id",
            "properties.property_id",
            "properties.room_count"
        ],
        "values": [
            {
                "table": "features",
                "column": "feature_name",
                "value": "garden",
                "condition": "="
            }
        ],
        "db_id": "real_estate_rentals",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "features.feature_name.garden"
        ]
    },
    {
        "question": "In which cities are there any properties equipped with a swimming pool?",
        "SQL": "SELECT T2.town_city FROM Properties AS T1 JOIN Addresses AS T2 ON T1.property_address_id  =  T2.address_id JOIN Property_Features AS T3 ON T1.property_id  =  T3.property_id JOIN Features AS T4 ON T4.feature_id  =  T3.feature_id WHERE T4.feature_name  =  'swimming pool';",
        "tables": [
            "property_features",
            "properties",
            "features",
            "addresses"
        ],
        "columns": [
            "features.feature_id",
            "addresses.address_id",
            "features.feature_name",
            "property_features.feature_id",
            "addresses.town_city",
            "property_features.property_id",
            "properties.property_address_id",
            "properties.property_id"
        ],
        "values": [
            {
                "table": "features",
                "column": "feature_name",
                "value": "swimming pool",
                "condition": "="
            }
        ],
        "db_id": "real_estate_rentals",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "features.feature_name.swimming pool"
        ]
    },
    {
        "question": "Return the cities in which there exist properties that have swimming pools.",
        "SQL": "SELECT T2.town_city FROM Properties AS T1 JOIN Addresses AS T2 ON T1.property_address_id  =  T2.address_id JOIN Property_Features AS T3 ON T1.property_id  =  T3.property_id JOIN Features AS T4 ON T4.feature_id  =  T3.feature_id WHERE T4.feature_name  =  'swimming pool';",
        "tables": [
            "property_features",
            "properties",
            "features",
            "addresses"
        ],
        "columns": [
            "features.feature_id",
            "addresses.address_id",
            "features.feature_name",
            "property_features.feature_id",
            "addresses.town_city",
            "property_features.property_id",
            "properties.property_address_id",
            "properties.property_id"
        ],
        "values": [
            {
                "table": "features",
                "column": "feature_name",
                "value": "swimming pool",
                "condition": "="
            }
        ],
        "db_id": "real_estate_rentals",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "features.feature_name.swimming pool"
        ]
    },
    {
        "question": "Find the login names of all senior citizen users ordered by their first names.",
        "SQL": "SELECT login_name FROM Users WHERE user_category_code  =  'Senior Citizen' ORDER BY first_name",
        "tables": [
            "users"
        ],
        "columns": [
            "users.first_name",
            "users.user_category_code",
            "users.login_name"
        ],
        "values": [
            {
                "table": "users",
                "column": "user_category_code",
                "value": "Senior Citizen",
                "condition": "="
            }
        ],
        "db_id": "real_estate_rentals",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "users.user_category_code.senior citizen"
        ]
    },
    {
        "question": "What are the login names of all senior citizens, sorted by first name?",
        "SQL": "SELECT login_name FROM Users WHERE user_category_code  =  'Senior Citizen' ORDER BY first_name",
        "tables": [
            "users"
        ],
        "columns": [
            "users.first_name",
            "users.user_category_code",
            "users.login_name"
        ],
        "values": [
            {
                "table": "users",
                "column": "user_category_code",
                "value": "Senior Citizen",
                "condition": "="
            }
        ],
        "db_id": "real_estate_rentals",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "users.user_category_code.senior citizen"
        ]
    },
    {
        "question": "When did the user with login name ratione register?",
        "SQL": "SELECT date_registered FROM Users WHERE login_name  =  'ratione';",
        "tables": [
            "users"
        ],
        "columns": [
            "users.date_registered",
            "users.login_name"
        ],
        "values": [
            {
                "table": "users",
                "column": "login_name",
                "value": "ratione",
                "condition": "="
            }
        ],
        "db_id": "real_estate_rentals",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "users.login_name.ratione"
        ]
    },
    {
        "question": "What was the registration date for the user whose login name is ratione?",
        "SQL": "SELECT date_registered FROM Users WHERE login_name  =  'ratione';",
        "tables": [
            "users"
        ],
        "columns": [
            "users.date_registered",
            "users.login_name"
        ],
        "values": [
            {
                "table": "users",
                "column": "login_name",
                "value": "ratione",
                "condition": "="
            }
        ],
        "db_id": "real_estate_rentals",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "users.login_name.ratione"
        ]
    },
    {
        "question": "Where do the Senior Citizens live? List building, street, and the city.",
        "SQL": "SELECT T1.line_1_number_building ,  T1.line_2_number_street ,  T1.town_city FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.user_category_code  =  'Senior Citizen';",
        "tables": [
            "users",
            "addresses"
        ],
        "columns": [
            "addresses.line_1_number_building",
            "addresses.address_id",
            "users.user_address_id",
            "users.user_category_code",
            "addresses.town_city",
            "addresses.line_2_number_street"
        ],
        "values": [
            {
                "table": "users",
                "column": "user_category_code",
                "value": "Senior Citizen",
                "condition": "="
            }
        ],
        "db_id": "real_estate_rentals",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "users.user_category_code.senior citizen"
        ]
    },
    {
        "question": "What are the buildings, streets, and cities corresponding to the addresses of senior citizens?",
        "SQL": "SELECT T1.line_1_number_building ,  T1.line_2_number_street ,  T1.town_city FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.user_category_code  =  'Senior Citizen';",
        "tables": [
            "users",
            "addresses"
        ],
        "columns": [
            "addresses.line_1_number_building",
            "addresses.address_id",
            "users.user_address_id",
            "users.user_category_code",
            "addresses.town_city",
            "addresses.line_2_number_street"
        ],
        "values": [
            {
                "table": "users",
                "column": "user_category_code",
                "value": "Senior Citizen",
                "condition": "="
            }
        ],
        "db_id": "real_estate_rentals",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "users.user_category_code.senior citizen"
        ]
    },
    {
        "question": "What is the total max price of the properties owned by single mothers or students?",
        "SQL": "SELECT sum(T1.price_max) FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id  =  T2.user_id WHERE T2.user_category_code  =  'Single Mother' OR T2.user_category_code  =  'Student';",
        "tables": [
            "properties",
            "users"
        ],
        "columns": [
            "properties.owner_user_id",
            "properties.price_max",
            "users.user_id",
            "users.user_category_code"
        ],
        "values": [
            {
                "table": "users",
                "column": "user_category_code",
                "value": "Single Mother",
                "condition": "="
            },
            {
                "table": "users",
                "column": "user_category_code",
                "value": "Student",
                "condition": "="
            }
        ],
        "db_id": "real_estate_rentals",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "users.user_category_code.single mother",
            "users.user_category_code.student"
        ]
    },
    {
        "question": "Give the total max price corresponding to any properties owned by single mothers or students.",
        "SQL": "SELECT sum(T1.price_max) FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id  =  T2.user_id WHERE T2.user_category_code  =  'Single Mother' OR T2.user_category_code  =  'Student';",
        "tables": [
            "properties",
            "users"
        ],
        "columns": [
            "properties.owner_user_id",
            "properties.price_max",
            "users.user_id",
            "users.user_category_code"
        ],
        "values": [
            {
                "table": "users",
                "column": "user_category_code",
                "value": "Single Mother",
                "condition": "="
            },
            {
                "table": "users",
                "column": "user_category_code",
                "value": "Student",
                "condition": "="
            }
        ],
        "db_id": "real_estate_rentals",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "users.user_category_code.single mother",
            "users.user_category_code.student"
        ]
    },
    {
        "question": "What is the detailed description of the age category code 'Over 60'?",
        "SQL": "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code  =  'Over 60';",
        "tables": [
            "ref_age_categories"
        ],
        "columns": [
            "ref_age_categories.age_category_code",
            "ref_age_categories.age_category_description"
        ],
        "values": [
            {
                "table": "ref_age_categories",
                "column": "age_category_code",
                "value": "Over 60",
                "condition": "="
            }
        ],
        "db_id": "real_estate_rentals",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "ref_age_categories.age_category_code.over 60"
        ]
    },
    {
        "question": "Give the category description of the age category 'Over 60'.",
        "SQL": "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code  =  'Over 60';",
        "tables": [
            "ref_age_categories"
        ],
        "columns": [
            "ref_age_categories.age_category_code",
            "ref_age_categories.age_category_description"
        ],
        "values": [
            {
                "table": "ref_age_categories",
                "column": "age_category_code",
                "value": "Over 60",
                "condition": "="
            }
        ],
        "db_id": "real_estate_rentals",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "ref_age_categories.age_category_code.over 60"
        ]
    },
    {
        "question": "In which country does the user with first name Robbie live?",
        "SQL": "SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Robbie';",
        "tables": [
            "users",
            "addresses"
        ],
        "columns": [
            "users.first_name",
            "addresses.country",
            "users.user_address_id",
            "addresses.address_id"
        ],
        "values": [
            {
                "table": "users",
                "column": "first_name",
                "value": "Robbie",
                "condition": "="
            }
        ],
        "db_id": "real_estate_rentals",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "users.first_name.robbie"
        ]
    },
    {
        "question": "Return the country in which the user with first name Robbie lives.",
        "SQL": "SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Robbie';",
        "tables": [
            "users",
            "addresses"
        ],
        "columns": [
            "users.first_name",
            "addresses.country",
            "users.user_address_id",
            "addresses.address_id"
        ],
        "values": [
            {
                "table": "users",
                "column": "first_name",
                "value": "Robbie",
                "condition": "="
            }
        ],
        "db_id": "real_estate_rentals",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "users.first_name.robbie"
        ]
    },
    {
        "question": "What is the average price of the bikes made of material 'Carbon CC'?",
        "SQL": "SELECT avg(price) FROM bike WHERE material  =  'Carbon CC'",
        "tables": [
            "bike"
        ],
        "columns": [
            "bike.material",
            "bike.price"
        ],
        "values": [
            {
                "table": "bike",
                "column": "material",
                "value": "Carbon CC",
                "condition": "="
            }
        ],
        "db_id": "bike_racing",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "bike.material.carbon cc"
        ]
    },
    {
        "question": "What are the name and result of the cyclists not from 'Russia' ?",
        "SQL": "SELECT name ,  RESULT FROM cyclist WHERE nation != 'Russia'",
        "tables": [
            "cyclist"
        ],
        "columns": [
            "cyclist.name",
            "cyclist.result",
            "cyclist.nation"
        ],
        "values": [
            {
                "table": "cyclist",
                "column": "nation",
                "value": "Russia",
                "condition": "!="
            }
        ],
        "db_id": "bike_racing",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "cyclist.nation.russia"
        ]
    },
    {
        "question": "What are the distinct product names of bikes owned by cyclists from 'Russia' or cyclists from 'Great Britain'?",
        "SQL": "SELECT DISTINCT T3.product_name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.nation  =  'Russia' OR T1.nation  =  'Great Britain'",
        "tables": [
            "cyclists_own_bikes",
            "cyclist",
            "bike"
        ],
        "columns": [
            "bike.id",
            "cyclist.nation",
            "bike.product_name",
            "cyclists_own_bikes.bike_id",
            "cyclist.id",
            "cyclists_own_bikes.cyclist_id"
        ],
        "values": [
            {
                "table": "cyclist",
                "column": "nation",
                "value": "Russia",
                "condition": "="
            },
            {
                "table": "cyclist",
                "column": "nation",
                "value": "Great Britain",
                "condition": "="
            }
        ],
        "db_id": "bike_racing",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "cyclist.nation.russia",
            "cyclist.nation.great britain"
        ]
    },
    {
        "question": "List the name and price of the bike that is owned by both the cyclists named 'Bradley Wiggins' and the cyclist named 'Antonio Tauler'.",
        "SQL": "SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Bradley Wiggins' INTERSECT SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Antonio Tauler'",
        "tables": [
            "cyclists_own_bikes",
            "cyclist",
            "bike"
        ],
        "columns": [
            "bike.id",
            "cyclist.name",
            "bike.product_name",
            "cyclists_own_bikes.bike_id",
            "bike.price",
            "cyclist.id",
            "cyclists_own_bikes.cyclist_id"
        ],
        "values": [
            {
                "table": "cyclist",
                "column": "name",
                "value": "Bradley Wiggins",
                "condition": "="
            },
            {
                "table": "cyclist",
                "column": "name",
                "value": "Antonio Tauler",
                "condition": "="
            }
        ],
        "db_id": "bike_racing",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "cyclist.name.bradley wiggins",
            "cyclist.name.antonio tauler"
        ]
    },
    {
        "question": "Find all the receipt numbers in which customer with last name LOGAN purchased Croissant.",
        "SQL": "SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id JOIN customers AS T4 ON T4.Id  =  T1.CustomerId WHERE T3.food  =  \"Croissant\" AND T4.LastName  =  'LOGAN'",
        "tables": [
            "goods",
            "items",
            "receipts",
            "customers"
        ],
        "columns": [
            "customers.lastname",
            "receipts.receiptnumber",
            "items.receipt",
            "items.item",
            "goods.food",
            "receipts.customerid",
            "customers.id",
            "goods.id"
        ],
        "values": [
            {
                "table": "customers",
                "column": "lastname",
                "value": "LOGAN",
                "condition": "="
            }
        ],
        "db_id": "bakery_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "customers.lastname.logan"
        ]
    },
    {
        "question": "What are the receipt numbers for a customer with the last name Logan who purchased a croissant?",
        "SQL": "SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id JOIN customers AS T4 ON T4.Id  =  T1.CustomerId WHERE T3.food  =  \"Croissant\" AND T4.LastName  =  'LOGAN'",
        "tables": [
            "goods",
            "items",
            "receipts",
            "customers"
        ],
        "columns": [
            "customers.lastname",
            "receipts.receiptnumber",
            "items.receipt",
            "items.item",
            "goods.food",
            "receipts.customerid",
            "customers.id",
            "goods.id"
        ],
        "values": [
            {
                "table": "customers",
                "column": "lastname",
                "value": "LOGAN",
                "condition": "="
            }
        ],
        "db_id": "bakery_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "customers.lastname.logan"
        ]
    },
    {
        "question": "What are the ids of Cookies whose price is lower than any Croissant?",
        "SQL": "SELECT id FROM goods WHERE food  =  \"Cookie\" AND price  <  (SELECT min(price) FROM goods WHERE food  =  'Croissant')",
        "tables": [
            "goods"
        ],
        "columns": [
            "goods.id",
            "goods.food",
            "goods.price"
        ],
        "values": [
            {
                "table": "goods",
                "column": "food",
                "value": "Croissant",
                "condition": "="
            },
            {
                "table": "",
                "column": "food",
                "value": "Croissant",
                "condition": "="
            }
        ],
        "db_id": "bakery_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "goods.food.croissant",
            ".food.croissant"
        ]
    },
    {
        "question": "Give the ids of cookes that are cheaper than any croissant.",
        "SQL": "SELECT id FROM goods WHERE food  =  \"Cookie\" AND price  <  (SELECT min(price) FROM goods WHERE food  =  'Croissant')",
        "tables": [
            "goods"
        ],
        "columns": [
            "goods.id",
            "goods.food",
            "goods.price"
        ],
        "values": [
            {
                "table": "goods",
                "column": "food",
                "value": "Croissant",
                "condition": "="
            },
            {
                "table": "",
                "column": "food",
                "value": "Croissant",
                "condition": "="
            }
        ],
        "db_id": "bakery_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "goods.food.croissant",
            ".food.croissant"
        ]
    },
    {
        "question": "Find all different contents stored in New York.",
        "SQL": "SELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE LOCATION  =  'New York'",
        "tables": [
            "warehouses",
            "boxes"
        ],
        "columns": [
            "boxes.warehouse",
            "boxes.contents",
            "warehouses.code",
            "warehouses.location"
        ],
        "values": [
            {
                "table": "",
                "column": "location",
                "value": "New York",
                "condition": "="
            }
        ],
        "db_id": "warehouse_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            ".location.new york"
        ]
    },
    {
        "question": "What are all the different contents stored in boxes in New York?",
        "SQL": "SELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE LOCATION  =  'New York'",
        "tables": [
            "warehouses",
            "boxes"
        ],
        "columns": [
            "boxes.warehouse",
            "boxes.contents",
            "warehouses.code",
            "warehouses.location"
        ],
        "values": [
            {
                "table": "",
                "column": "location",
                "value": "New York",
                "condition": "="
            }
        ],
        "db_id": "warehouse_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            ".location.new york"
        ]
    },
    {
        "question": "Find the code of boxes that are stored at the warehouses located at Chicago or New York.",
        "SQL": "SELECT T1.code FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'",
        "tables": [
            "warehouses",
            "boxes"
        ],
        "columns": [
            "boxes.warehouse",
            "boxes.code",
            "warehouses.code",
            "warehouses.location"
        ],
        "values": [
            {
                "table": "warehouses",
                "column": "location",
                "value": "Chicago",
                "condition": "="
            },
            {
                "table": "warehouses",
                "column": "location",
                "value": "New York",
                "condition": "="
            }
        ],
        "db_id": "warehouse_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "warehouses.location.chicago",
            "warehouses.location.new york"
        ]
    },
    {
        "question": "What are the codes of boxes stored in warehouses in either Chicago or New York?",
        "SQL": "SELECT T1.code FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'",
        "tables": [
            "warehouses",
            "boxes"
        ],
        "columns": [
            "boxes.warehouse",
            "boxes.code",
            "warehouses.code",
            "warehouses.location"
        ],
        "values": [
            {
                "table": "warehouses",
                "column": "location",
                "value": "Chicago",
                "condition": "="
            },
            {
                "table": "warehouses",
                "column": "location",
                "value": "New York",
                "condition": "="
            }
        ],
        "db_id": "warehouse_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "warehouses.location.chicago",
            "warehouses.location.new york"
        ]
    },
    {
        "question": "Find the total value of boxes in the warehouses located at Chicago or New York.",
        "SQL": "SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'",
        "tables": [
            "warehouses",
            "boxes"
        ],
        "columns": [
            "boxes.warehouse",
            "warehouses.code",
            "boxes.value",
            "warehouses.location"
        ],
        "values": [
            {
                "table": "warehouses",
                "column": "location",
                "value": "Chicago",
                "condition": "="
            },
            {
                "table": "warehouses",
                "column": "location",
                "value": "New York",
                "condition": "="
            }
        ],
        "db_id": "warehouse_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "warehouses.location.chicago",
            "warehouses.location.new york"
        ]
    },
    {
        "question": "What is the total value of boxes located in Chicago or New York?",
        "SQL": "SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'",
        "tables": [
            "warehouses",
            "boxes"
        ],
        "columns": [
            "boxes.warehouse",
            "warehouses.code",
            "boxes.value",
            "warehouses.location"
        ],
        "values": [
            {
                "table": "warehouses",
                "column": "location",
                "value": "Chicago",
                "condition": "="
            },
            {
                "table": "warehouses",
                "column": "location",
                "value": "New York",
                "condition": "="
            }
        ],
        "db_id": "warehouse_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "warehouses.location.chicago",
            "warehouses.location.new york"
        ]
    },
    {
        "question": "Find all contents present in warehouses located in Chicago and those located in New York.",
        "SQL": "SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
        "tables": [
            "warehouses",
            "boxes"
        ],
        "columns": [
            "boxes.warehouse",
            "boxes.contents",
            "warehouses.code",
            "warehouses.location"
        ],
        "values": [
            {
                "table": "warehouses",
                "column": "location",
                "value": "Chicago",
                "condition": "="
            },
            {
                "table": "warehouses",
                "column": "location",
                "value": "New York",
                "condition": "="
            }
        ],
        "db_id": "warehouse_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "warehouses.location.chicago",
            "warehouses.location.new york"
        ]
    },
    {
        "question": "Find the contents that are stored in both Chicago and New York.",
        "SQL": "SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
        "tables": [
            "warehouses",
            "boxes"
        ],
        "columns": [
            "boxes.warehouse",
            "boxes.contents",
            "warehouses.code",
            "warehouses.location"
        ],
        "values": [
            {
                "table": "warehouses",
                "column": "location",
                "value": "Chicago",
                "condition": "="
            },
            {
                "table": "warehouses",
                "column": "location",
                "value": "New York",
                "condition": "="
            }
        ],
        "db_id": "warehouse_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "warehouses.location.chicago",
            "warehouses.location.new york"
        ]
    },
    {
        "question": "Find the type of contents that are not in the warehouses located at New York.",
        "SQL": "SELECT CONTENTS FROM boxes EXCEPT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
        "tables": [
            "warehouses",
            "boxes"
        ],
        "columns": [
            "boxes.warehouse",
            "boxes.contents",
            "warehouses.code",
            "warehouses.location"
        ],
        "values": [
            {
                "table": "warehouses",
                "column": "location",
                "value": "New York",
                "condition": "="
            }
        ],
        "db_id": "warehouse_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "warehouses.location.new york"
        ]
    },
    {
        "question": "What types of contents cannot be found in warehouses in New York?",
        "SQL": "SELECT CONTENTS FROM boxes EXCEPT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
        "tables": [
            "warehouses",
            "boxes"
        ],
        "columns": [
            "boxes.warehouse",
            "boxes.contents",
            "warehouses.code",
            "warehouses.location"
        ],
        "values": [
            {
                "table": "warehouses",
                "column": "location",
                "value": "New York",
                "condition": "="
            }
        ],
        "db_id": "warehouse_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "warehouses.location.new york"
        ]
    },
    {
        "question": "Find the location of the warehouses which have contents Rocks but not Scissors.",
        "SQL": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' EXCEPT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
        "tables": [
            "warehouses",
            "boxes"
        ],
        "columns": [
            "boxes.warehouse",
            "warehouses.code",
            "warehouses.location",
            "boxes.contents"
        ],
        "values": [
            {
                "table": "boxes",
                "column": "contents",
                "value": "Rocks",
                "condition": "="
            },
            {
                "table": "boxes",
                "column": "contents",
                "value": "Scissors",
                "condition": "="
            }
        ],
        "db_id": "warehouse_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "boxes.contents.rocks",
            "boxes.contents.scissors"
        ]
    },
    {
        "question": "What are the locations of warehouses that have boxes containing Rocks but not Scissors?",
        "SQL": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' EXCEPT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
        "tables": [
            "warehouses",
            "boxes"
        ],
        "columns": [
            "boxes.warehouse",
            "warehouses.code",
            "warehouses.location",
            "boxes.contents"
        ],
        "values": [
            {
                "table": "boxes",
                "column": "contents",
                "value": "Rocks",
                "condition": "="
            },
            {
                "table": "boxes",
                "column": "contents",
                "value": "Scissors",
                "condition": "="
            }
        ],
        "db_id": "warehouse_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "boxes.contents.rocks",
            "boxes.contents.scissors"
        ]
    },
    {
        "question": "Find the warehouses which store contents Rocks or Scissors.",
        "SQL": "SELECT DISTINCT warehouse FROM boxes WHERE CONTENTS  =  'Rocks' OR CONTENTS  =  'Scissors'",
        "tables": [
            "boxes"
        ],
        "columns": [
            "boxes.warehouse",
            "boxes.contents"
        ],
        "values": [
            {
                "table": "boxes",
                "column": "contents",
                "value": "Rocks",
                "condition": "="
            },
            {
                "table": "boxes",
                "column": "contents",
                "value": "Scissors",
                "condition": "="
            }
        ],
        "db_id": "warehouse_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "boxes.contents.rocks",
            "boxes.contents.scissors"
        ]
    },
    {
        "question": "What are the distinct warehouses that have boxes with Rocks or Scissors as contents?",
        "SQL": "SELECT DISTINCT warehouse FROM boxes WHERE CONTENTS  =  'Rocks' OR CONTENTS  =  'Scissors'",
        "tables": [
            "boxes"
        ],
        "columns": [
            "boxes.warehouse",
            "boxes.contents"
        ],
        "values": [
            {
                "table": "boxes",
                "column": "contents",
                "value": "Rocks",
                "condition": "="
            },
            {
                "table": "boxes",
                "column": "contents",
                "value": "Scissors",
                "condition": "="
            }
        ],
        "db_id": "warehouse_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "boxes.contents.rocks",
            "boxes.contents.scissors"
        ]
    },
    {
        "question": "Find the location of the warehouses which store contents Rocks and Scissors.",
        "SQL": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' INTERSECT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
        "tables": [
            "warehouses",
            "boxes"
        ],
        "columns": [
            "boxes.warehouse",
            "warehouses.code",
            "warehouses.location",
            "boxes.contents"
        ],
        "values": [
            {
                "table": "boxes",
                "column": "contents",
                "value": "Rocks",
                "condition": "="
            },
            {
                "table": "boxes",
                "column": "contents",
                "value": "Scissors",
                "condition": "="
            }
        ],
        "db_id": "warehouse_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "boxes.contents.rocks",
            "boxes.contents.scissors"
        ]
    },
    {
        "question": "What are the locations of warehouses in which boxes that contain Rocks and Scissors are kept?",
        "SQL": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' INTERSECT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
        "tables": [
            "warehouses",
            "boxes"
        ],
        "columns": [
            "boxes.warehouse",
            "warehouses.code",
            "warehouses.location",
            "boxes.contents"
        ],
        "values": [
            {
                "table": "boxes",
                "column": "contents",
                "value": "Rocks",
                "condition": "="
            },
            {
                "table": "boxes",
                "column": "contents",
                "value": "Scissors",
                "condition": "="
            }
        ],
        "db_id": "warehouse_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "boxes.contents.rocks",
            "boxes.contents.scissors"
        ]
    },
    {
        "question": "Find the code of all boxes whose value is higher than the value of any boxes with Rocks as content.",
        "SQL": "SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Rocks')",
        "tables": [
            "boxes"
        ],
        "columns": [
            "boxes.contents",
            "boxes.value",
            "boxes.code"
        ],
        "values": [
            {
                "table": "boxes",
                "column": "contents",
                "value": "Rocks",
                "condition": "="
            },
            {
                "table": "",
                "column": "contents",
                "value": "Rocks",
                "condition": "="
            }
        ],
        "db_id": "warehouse_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "boxes.contents.rocks",
            ".contents.rocks"
        ]
    },
    {
        "question": "What are the codes of boxes for which the value is greater than the value of any box that contains Rocks?",
        "SQL": "SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Rocks')",
        "tables": [
            "boxes"
        ],
        "columns": [
            "boxes.contents",
            "boxes.value",
            "boxes.code"
        ],
        "values": [
            {
                "table": "boxes",
                "column": "contents",
                "value": "Rocks",
                "condition": "="
            },
            {
                "table": "",
                "column": "contents",
                "value": "Rocks",
                "condition": "="
            }
        ],
        "db_id": "warehouse_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "boxes.contents.rocks",
            ".contents.rocks"
        ]
    },
    {
        "question": "Find the code and content of all boxes whose value is higher than the value of all boxes with Scissors as content.",
        "SQL": "SELECT code ,  CONTENTS FROM boxes WHERE value  >  (SELECT max(value) FROM boxes WHERE CONTENTS  =  'Scissors')",
        "tables": [
            "boxes"
        ],
        "columns": [
            "boxes.contents",
            "boxes.value",
            "boxes.code"
        ],
        "values": [
            {
                "table": "boxes",
                "column": "contents",
                "value": "Scissors",
                "condition": "="
            },
            {
                "table": "",
                "column": "contents",
                "value": "Scissors",
                "condition": "="
            }
        ],
        "db_id": "warehouse_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "boxes.contents.scissors",
            ".contents.scissors"
        ]
    },
    {
        "question": "What are the codes and corresponding contents of boxes for which their value is higher than the values of all boxes containing Scissors?",
        "SQL": "SELECT code ,  CONTENTS FROM boxes WHERE value  >  (SELECT max(value) FROM boxes WHERE CONTENTS  =  'Scissors')",
        "tables": [
            "boxes"
        ],
        "columns": [
            "boxes.contents",
            "boxes.value",
            "boxes.code"
        ],
        "values": [
            {
                "table": "boxes",
                "column": "contents",
                "value": "Scissors",
                "condition": "="
            },
            {
                "table": "",
                "column": "contents",
                "value": "Scissors",
                "condition": "="
            }
        ],
        "db_id": "warehouse_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "boxes.contents.scissors",
            ".contents.scissors"
        ]
    },
    {
        "question": "Find the number of different locations where Rocks are stored.",
        "SQL": "SELECT count(DISTINCT LOCATION) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks'",
        "tables": [
            "warehouses",
            "boxes"
        ],
        "columns": [
            "boxes.warehouse",
            "warehouses.code",
            "warehouses.location",
            "boxes.contents"
        ],
        "values": [
            {
                "table": "boxes",
                "column": "contents",
                "value": "Rocks",
                "condition": "="
            }
        ],
        "db_id": "warehouse_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "boxes.contents.rocks"
        ]
    },
    {
        "question": "In how many different warehouses are Rocks stored within boxes?",
        "SQL": "SELECT count(DISTINCT LOCATION) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks'",
        "tables": [
            "warehouses",
            "boxes"
        ],
        "columns": [
            "boxes.warehouse",
            "warehouses.code",
            "warehouses.location",
            "boxes.contents"
        ],
        "values": [
            {
                "table": "boxes",
                "column": "contents",
                "value": "Rocks",
                "condition": "="
            }
        ],
        "db_id": "warehouse_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "boxes.contents.rocks"
        ]
    },
    {
        "question": "Select the codes of all the boxes located in Chicago.",
        "SQL": "SELECT T1.code FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago'",
        "tables": [
            "warehouses",
            "boxes"
        ],
        "columns": [
            "boxes.warehouse",
            "boxes.code",
            "warehouses.code",
            "warehouses.location"
        ],
        "values": [
            {
                "table": "warehouses",
                "column": "location",
                "value": "Chicago",
                "condition": "="
            }
        ],
        "db_id": "warehouse_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "warehouses.location.chicago"
        ]
    },
    {
        "question": "What are the codes of boxes stored in warehouses in Chicago?",
        "SQL": "SELECT T1.code FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago'",
        "tables": [
            "warehouses",
            "boxes"
        ],
        "columns": [
            "boxes.warehouse",
            "boxes.code",
            "warehouses.code",
            "warehouses.location"
        ],
        "values": [
            {
                "table": "warehouses",
                "column": "location",
                "value": "Chicago",
                "condition": "="
            }
        ],
        "db_id": "warehouse_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "warehouses.location.chicago"
        ]
    },
    {
        "question": "Find the total values of boxes that are not in the warehouses located at Chicago.",
        "SQL": "SELECT sum(T1.value) FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location != 'Chicago'",
        "tables": [
            "warehouses",
            "boxes"
        ],
        "columns": [
            "boxes.warehouse",
            "warehouses.code",
            "boxes.value",
            "warehouses.location"
        ],
        "values": [
            {
                "table": "warehouses",
                "column": "location",
                "value": "Chicago",
                "condition": "!="
            }
        ],
        "db_id": "warehouse_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "warehouses.location.chicago"
        ]
    },
    {
        "question": "What is the total value of boxes contained in any location but Chicago?",
        "SQL": "SELECT sum(T1.value) FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location != 'Chicago'",
        "tables": [
            "warehouses",
            "boxes"
        ],
        "columns": [
            "boxes.warehouse",
            "warehouses.code",
            "boxes.value",
            "warehouses.location"
        ],
        "values": [
            {
                "table": "warehouses",
                "column": "location",
                "value": "Chicago",
                "condition": "!="
            }
        ],
        "db_id": "warehouse_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "warehouses.location.chicago"
        ]
    },
    {
        "question": "How many universities are in Illinois or Ohio?",
        "SQL": "SELECT count(*) FROM University WHERE state  =  'Illinois' OR state  =  'Ohio'",
        "tables": [
            "university"
        ],
        "columns": [
            "university.state"
        ],
        "values": [
            {
                "table": "university",
                "column": "state",
                "value": "Illinois",
                "condition": "="
            },
            {
                "table": "university",
                "column": "state",
                "value": "Ohio",
                "condition": "="
            }
        ],
        "db_id": "university_rank",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "university.state.illinois",
            "university.state.ohio"
        ]
    },
    {
        "question": "What is the total number of universities located in Illinois or Ohio?",
        "SQL": "SELECT count(*) FROM University WHERE state  =  'Illinois' OR state  =  'Ohio'",
        "tables": [
            "university"
        ],
        "columns": [
            "university.state"
        ],
        "values": [
            {
                "table": "university",
                "column": "state",
                "value": "Illinois",
                "condition": "="
            },
            {
                "table": "university",
                "column": "state",
                "value": "Ohio",
                "condition": "="
            }
        ],
        "db_id": "university_rank",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "university.state.illinois",
            "university.state.ohio"
        ]
    },
    {
        "question": "Show all majors and major ranks for the university with name Augustana College.",
        "SQL": "SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Augustana College'",
        "tables": [
            "major",
            "major_ranking",
            "university"
        ],
        "columns": [
            "major_ranking.university_id",
            "major_ranking.major_id",
            "major_ranking.rank",
            "university.university_name",
            "major.major_id",
            "major.major_name",
            "university.university_id"
        ],
        "values": [
            {
                "table": "university",
                "column": "university_name",
                "value": "Augustana College",
                "condition": "="
            }
        ],
        "db_id": "university_rank",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "university.university_name.augustana college"
        ]
    },
    {
        "question": "What are the ranks and names of all majors at Augustana College?",
        "SQL": "SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Augustana College'",
        "tables": [
            "major",
            "major_ranking",
            "university"
        ],
        "columns": [
            "major_ranking.university_id",
            "major_ranking.major_id",
            "major_ranking.rank",
            "university.university_name",
            "major.major_id",
            "major.major_name",
            "university.university_id"
        ],
        "values": [
            {
                "table": "university",
                "column": "university_name",
                "value": "Augustana College",
                "condition": "="
            }
        ],
        "db_id": "university_rank",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "university.university_name.augustana college"
        ]
    },
    {
        "question": "What is the name, city, state of the university with a rank 1 on Accounting major?",
        "SQL": "SELECT T2.university_name ,  T2.city ,  T2.state FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T1.rank  =  1 AND T3.major_name  =  'Accounting'",
        "tables": [
            "major",
            "major_ranking",
            "university"
        ],
        "columns": [
            "university.state",
            "major_ranking.university_id",
            "major_ranking.major_id",
            "major_ranking.rank",
            "university.university_name",
            "major.major_id",
            "university.city",
            "major.major_name",
            "university.university_id"
        ],
        "values": [
            {
                "table": "major_ranking",
                "column": "rank",
                "value": "1",
                "condition": "="
            },
            {
                "table": "major",
                "column": "major_name",
                "value": "Accounting",
                "condition": "="
            }
        ],
        "db_id": "university_rank",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "major_ranking.rank.1",
            "major.major_name.accounting"
        ]
    },
    {
        "question": "What is the name, city, and state of the university with number 1 ranked Accounting major?",
        "SQL": "SELECT T2.university_name ,  T2.city ,  T2.state FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T1.rank  =  1 AND T3.major_name  =  'Accounting'",
        "tables": [
            "major",
            "major_ranking",
            "university"
        ],
        "columns": [
            "university.state",
            "major_ranking.university_id",
            "major_ranking.major_id",
            "major_ranking.rank",
            "university.university_name",
            "major.major_id",
            "university.city",
            "major.major_name",
            "university.university_id"
        ],
        "values": [
            {
                "table": "major_ranking",
                "column": "rank",
                "value": "1",
                "condition": "="
            },
            {
                "table": "major",
                "column": "major_name",
                "value": "Accounting",
                "condition": "="
            }
        ],
        "db_id": "university_rank",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "major_ranking.rank.1",
            "major.major_name.accounting"
        ]
    },
    {
        "question": "Show all university names with both major Accounting and major Urban Education.",
        "SQL": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Accounting' INTERSECT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Urban Education'",
        "tables": [
            "major",
            "major_ranking",
            "university"
        ],
        "columns": [
            "major_ranking.university_id",
            "major_ranking.major_id",
            "university.university_name",
            "major.major_id",
            "major.major_name",
            "university.university_id"
        ],
        "values": [
            {
                "table": "major",
                "column": "major_name",
                "value": "Accounting",
                "condition": "="
            },
            {
                "table": "major",
                "column": "major_name",
                "value": "Urban Education",
                "condition": "="
            }
        ],
        "db_id": "university_rank",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "major.major_name.accounting",
            "major.major_name.urban education"
        ]
    },
    {
        "question": "What are the names of all universities that have both Accounting and Urban Education majors?",
        "SQL": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Accounting' INTERSECT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Urban Education'",
        "tables": [
            "major",
            "major_ranking",
            "university"
        ],
        "columns": [
            "major_ranking.university_id",
            "major_ranking.major_id",
            "university.university_name",
            "major.major_id",
            "major.major_name",
            "university.university_id"
        ],
        "values": [
            {
                "table": "major",
                "column": "major_name",
                "value": "Accounting",
                "condition": "="
            },
            {
                "table": "major",
                "column": "major_name",
                "value": "Urban Education",
                "condition": "="
            }
        ],
        "db_id": "university_rank",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "major.major_name.accounting",
            "major.major_name.urban education"
        ]
    },
    {
        "question": "What is the name and overall ranking of universities in Wisconsin state?",
        "SQL": "SELECT T1.university_name ,  T2.rank FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T1.state  =  'Wisconsin'",
        "tables": [
            "overall_ranking",
            "university"
        ],
        "columns": [
            "university.state",
            "overall_ranking.university_id",
            "university.university_id",
            "university.university_name",
            "overall_ranking.rank"
        ],
        "values": [
            {
                "table": "university",
                "column": "state",
                "value": "Wisconsin",
                "condition": "="
            }
        ],
        "db_id": "university_rank",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "university.state.wisconsin"
        ]
    },
    {
        "question": "What is the name and rank of every university in Wisconsin?",
        "SQL": "SELECT T1.university_name ,  T2.rank FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T1.state  =  'Wisconsin'",
        "tables": [
            "overall_ranking",
            "university"
        ],
        "columns": [
            "university.state",
            "overall_ranking.university_id",
            "university.university_id",
            "university.university_name",
            "overall_ranking.rank"
        ],
        "values": [
            {
                "table": "university",
                "column": "state",
                "value": "Wisconsin",
                "condition": "="
            }
        ],
        "db_id": "university_rank",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "university.state.wisconsin"
        ]
    },
    {
        "question": "Find the names of movies whose rating is \u2018G\u2019.",
        "SQL": "SELECT title FROM movies WHERE rating  =  'G'",
        "tables": [
            "movies"
        ],
        "columns": [
            "movies.rating",
            "movies.title"
        ],
        "values": [
            {
                "table": "movies",
                "column": "rating",
                "value": "G",
                "condition": "="
            }
        ],
        "db_id": "movie_2",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "movies.rating.g"
        ]
    },
    {
        "question": "What are names of movies that have a 'G' ratings?",
        "SQL": "SELECT title FROM movies WHERE rating  =  'G'",
        "tables": [
            "movies"
        ],
        "columns": [
            "movies.rating",
            "movies.title"
        ],
        "values": [
            {
                "table": "movies",
                "column": "rating",
                "value": "G",
                "condition": "="
            }
        ],
        "db_id": "movie_2",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "movies.rating.g"
        ]
    },
    {
        "question": "Find the title of the movie that is played in the Odeon theater.",
        "SQL": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
        "tables": [
            "movietheaters",
            "movies"
        ],
        "columns": [
            "movies.code",
            "movietheaters.movie",
            "movies.title",
            "movietheaters.name"
        ],
        "values": [
            {
                "table": "movietheaters",
                "column": "name",
                "value": "Odeon",
                "condition": "="
            }
        ],
        "db_id": "movie_2",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "movietheaters.name.odeon"
        ]
    },
    {
        "question": "What are the movie titles for ones that are played in the Odeon theater?",
        "SQL": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
        "tables": [
            "movietheaters",
            "movies"
        ],
        "columns": [
            "movies.code",
            "movietheaters.movie",
            "movies.title",
            "movietheaters.name"
        ],
        "values": [
            {
                "table": "movietheaters",
                "column": "name",
                "value": "Odeon",
                "condition": "="
            }
        ],
        "db_id": "movie_2",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "movietheaters.name.odeon"
        ]
    },
    {
        "question": "Find the number of movies whose rating is \u2018G\u2019.",
        "SQL": "SELECT count(*) FROM movies WHERE rating  =  'G'",
        "tables": [
            "movies"
        ],
        "columns": [
            "movies.rating"
        ],
        "values": [
            {
                "table": "movies",
                "column": "rating",
                "value": "G",
                "condition": "="
            }
        ],
        "db_id": "movie_2",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "movies.rating.g"
        ]
    },
    {
        "question": "How many movies had a 'G' rating?",
        "SQL": "SELECT count(*) FROM movies WHERE rating  =  'G'",
        "tables": [
            "movies"
        ],
        "columns": [
            "movies.rating"
        ],
        "values": [
            {
                "table": "movies",
                "column": "rating",
                "value": "G",
                "condition": "="
            }
        ],
        "db_id": "movie_2",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "movies.rating.g"
        ]
    },
    {
        "question": "Find the name of the cinemas that are playing movies with either rating \u2018G\u2019 or rating \u2018PG\u2019.",
        "SQL": "SELECT title FROM movies WHERE rating  =  'G' OR rating  =  'PG'",
        "tables": [
            "movies"
        ],
        "columns": [
            "movies.rating",
            "movies.title"
        ],
        "values": [
            {
                "table": "movies",
                "column": "rating",
                "value": "G",
                "condition": "="
            },
            {
                "table": "movies",
                "column": "rating",
                "value": "PG",
                "condition": "="
            }
        ],
        "db_id": "movie_2",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "movies.rating.g",
            "movies.rating.pg"
        ]
    },
    {
        "question": "What are the names of the movie theaters that are playing 'G' or 'PG' rated movies?",
        "SQL": "SELECT title FROM movies WHERE rating  =  'G' OR rating  =  'PG'",
        "tables": [
            "movies"
        ],
        "columns": [
            "movies.rating",
            "movies.title"
        ],
        "values": [
            {
                "table": "movies",
                "column": "rating",
                "value": "G",
                "condition": "="
            },
            {
                "table": "movies",
                "column": "rating",
                "value": "PG",
                "condition": "="
            }
        ],
        "db_id": "movie_2",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "movies.rating.g",
            "movies.rating.pg"
        ]
    },
    {
        "question": "Find the name of the movies that are played in either cinema Odeon or Imperial.",
        "SQL": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' OR T2.name  =  'Imperial'",
        "tables": [
            "movietheaters",
            "movies"
        ],
        "columns": [
            "movies.code",
            "movietheaters.movie",
            "movies.title",
            "movietheaters.name"
        ],
        "values": [
            {
                "table": "movietheaters",
                "column": "name",
                "value": "Odeon",
                "condition": "="
            },
            {
                "table": "movietheaters",
                "column": "name",
                "value": "Imperial",
                "condition": "="
            }
        ],
        "db_id": "movie_2",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "movietheaters.name.odeon",
            "movietheaters.name.imperial"
        ]
    },
    {
        "question": "What are the titles of all the movies that played at the Odeon or Imperial theater?",
        "SQL": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' OR T2.name  =  'Imperial'",
        "tables": [
            "movietheaters",
            "movies"
        ],
        "columns": [
            "movies.code",
            "movietheaters.movie",
            "movies.title",
            "movietheaters.name"
        ],
        "values": [
            {
                "table": "movietheaters",
                "column": "name",
                "value": "Odeon",
                "condition": "="
            },
            {
                "table": "movietheaters",
                "column": "name",
                "value": "Imperial",
                "condition": "="
            }
        ],
        "db_id": "movie_2",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "movietheaters.name.odeon",
            "movietheaters.name.imperial"
        ]
    },
    {
        "question": "Find the name of the movie that is on in both Odeon and Imperial theaters.",
        "SQL": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' INTERSECT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Imperial'",
        "tables": [
            "movietheaters",
            "movies"
        ],
        "columns": [
            "movies.code",
            "movietheaters.movie",
            "movies.title",
            "movietheaters.name"
        ],
        "values": [
            {
                "table": "movietheaters",
                "column": "name",
                "value": "Odeon",
                "condition": "="
            },
            {
                "table": "movietheaters",
                "column": "name",
                "value": "Imperial",
                "condition": "="
            }
        ],
        "db_id": "movie_2",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "movietheaters.name.odeon",
            "movietheaters.name.imperial"
        ]
    },
    {
        "question": "What movie is playing at both the Odeon and Imperial theater?",
        "SQL": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' INTERSECT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Imperial'",
        "tables": [
            "movietheaters",
            "movies"
        ],
        "columns": [
            "movies.code",
            "movietheaters.movie",
            "movies.title",
            "movietheaters.name"
        ],
        "values": [
            {
                "table": "movietheaters",
                "column": "name",
                "value": "Odeon",
                "condition": "="
            },
            {
                "table": "movietheaters",
                "column": "name",
                "value": "Imperial",
                "condition": "="
            }
        ],
        "db_id": "movie_2",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "movietheaters.name.odeon",
            "movietheaters.name.imperial"
        ]
    },
    {
        "question": "Find the name of all movies that are not played in Odeon theater.",
        "SQL": "SELECT title FROM movies EXCEPT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
        "tables": [
            "movietheaters",
            "movies"
        ],
        "columns": [
            "movies.code",
            "movietheaters.movie",
            "movies.title",
            "movietheaters.name"
        ],
        "values": [
            {
                "table": "movietheaters",
                "column": "name",
                "value": "Odeon",
                "condition": "="
            }
        ],
        "db_id": "movie_2",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "movietheaters.name.odeon"
        ]
    },
    {
        "question": "What are the names of every movie that is not playing at the Odeon theater?",
        "SQL": "SELECT title FROM movies EXCEPT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
        "tables": [
            "movietheaters",
            "movies"
        ],
        "columns": [
            "movies.code",
            "movietheaters.movie",
            "movies.title",
            "movietheaters.name"
        ],
        "values": [
            {
                "table": "movietheaters",
                "column": "name",
                "value": "Odeon",
                "condition": "="
            }
        ],
        "db_id": "movie_2",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "movietheaters.name.odeon"
        ]
    },
    {
        "question": "Find the number of movies whose rating is not null.",
        "SQL": "SELECT count(*) ,  rating FROM movies WHERE rating != 'null' GROUP BY rating",
        "tables": [
            "movies"
        ],
        "columns": [
            "movies.rating"
        ],
        "values": [
            {
                "table": "movies",
                "column": "rating",
                "value": "null",
                "condition": "!="
            }
        ],
        "db_id": "movie_2",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "movies.rating.null"
        ]
    },
    {
        "question": "How many movies have a rating that is not null?",
        "SQL": "SELECT count(*) ,  rating FROM movies WHERE rating != 'null' GROUP BY rating",
        "tables": [
            "movies"
        ],
        "columns": [
            "movies.rating"
        ],
        "values": [
            {
                "table": "movies",
                "column": "rating",
                "value": "null",
                "condition": "!="
            }
        ],
        "db_id": "movie_2",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "movies.rating.null"
        ]
    },
    {
        "question": "Find the name of the movie theaters that are playing the movies whose rating is \u2018G\u2019.",
        "SQL": "SELECT T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T1.rating  =  'G'",
        "tables": [
            "movietheaters",
            "movies"
        ],
        "columns": [
            "movies.code",
            "movietheaters.name",
            "movies.rating",
            "movietheaters.movie"
        ],
        "values": [
            {
                "table": "movies",
                "column": "rating",
                "value": "G",
                "condition": "="
            }
        ],
        "db_id": "movie_2",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "movies.rating.g"
        ]
    },
    {
        "question": "What are the names of theaters playing 'G' rated movies?",
        "SQL": "SELECT T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T1.rating  =  'G'",
        "tables": [
            "movietheaters",
            "movies"
        ],
        "columns": [
            "movies.code",
            "movietheaters.name",
            "movies.rating",
            "movietheaters.movie"
        ],
        "values": [
            {
                "table": "movies",
                "column": "rating",
                "value": "G",
                "condition": "="
            }
        ],
        "db_id": "movie_2",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "movies.rating.g"
        ]
    },
    {
        "question": "What is the average units sold in millions of the games that are not developed by Nintendo?",
        "SQL": "SELECT avg(Units_sold_Millions) FROM game WHERE developers != 'Nintendo'",
        "tables": [
            "game"
        ],
        "columns": [
            "game.developers",
            "game.units_sold_millions"
        ],
        "values": [
            {
                "table": "game",
                "column": "developers",
                "value": "Nintendo",
                "condition": "!="
            }
        ],
        "db_id": "video_game",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "game.developers.nintendo"
        ]
    },
    {
        "question": "Return the average number of units sold in millions for games not developed by Nintendo.",
        "SQL": "SELECT avg(Units_sold_Millions) FROM game WHERE developers != 'Nintendo'",
        "tables": [
            "game"
        ],
        "columns": [
            "game.developers",
            "game.units_sold_millions"
        ],
        "values": [
            {
                "table": "game",
                "column": "developers",
                "value": "Nintendo",
                "condition": "!="
            }
        ],
        "db_id": "video_game",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "game.developers.nintendo"
        ]
    },
    {
        "question": "Find the name of authors who publish their books in both \"MM\" and \"LT\" series.",
        "SQL": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'MM' INTERSECT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'LT'",
        "tables": [
            "author",
            "book"
        ],
        "columns": [
            "book.book_series",
            "author.author_id",
            "author.name",
            "book.author_id"
        ],
        "values": [
            {
                "table": "book",
                "column": "book_series",
                "value": "MM",
                "condition": "="
            },
            {
                "table": "book",
                "column": "book_series",
                "value": "LT",
                "condition": "="
            }
        ],
        "db_id": "book_press",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "book.book_series.mm",
            "book.book_series.lt"
        ]
    },
    {
        "question": "Which authors publish books in both \"MM\" and \"LT\" series? Give me the author names.",
        "SQL": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'MM' INTERSECT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'LT'",
        "tables": [
            "author",
            "book"
        ],
        "columns": [
            "book.book_series",
            "author.author_id",
            "author.name",
            "book.author_id"
        ],
        "values": [
            {
                "table": "book",
                "column": "book_series",
                "value": "MM",
                "condition": "="
            },
            {
                "table": "book",
                "column": "book_series",
                "value": "LT",
                "condition": "="
            }
        ],
        "db_id": "book_press",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "book.book_series.mm",
            "book.book_series.lt"
        ]
    },
    {
        "question": "Find the names of the authors who did not have any book with the \"Accor\" press.",
        "SQL": "SELECT name FROM author EXCEPT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id JOIN press AS t3 ON t2.press_id  =  t3.press_id WHERE t3.name  =  'Accor'",
        "tables": [
            "press",
            "author",
            "book"
        ],
        "columns": [
            "author.author_id",
            "author.name",
            "press.name",
            "press.press_id",
            "book.author_id",
            "book.press_id"
        ],
        "values": [
            {
                "table": "press",
                "column": "name",
                "value": "Accor",
                "condition": "="
            }
        ],
        "db_id": "book_press",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "press.name.accor"
        ]
    },
    {
        "question": "Which authors have never published under the \"Accor\" press? Give me their names.",
        "SQL": "SELECT name FROM author EXCEPT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id JOIN press AS t3 ON t2.press_id  =  t3.press_id WHERE t3.name  =  'Accor'",
        "tables": [
            "press",
            "author",
            "book"
        ],
        "columns": [
            "author.author_id",
            "author.name",
            "press.name",
            "press.press_id",
            "book.author_id",
            "book.press_id"
        ],
        "values": [
            {
                "table": "press",
                "column": "name",
                "value": "Accor",
                "condition": "="
            }
        ],
        "db_id": "book_press",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "press.name.accor"
        ]
    },
    {
        "question": "Show agency details for client with detail 'Mac'.",
        "SQL": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Mac'",
        "tables": [
            "agencies",
            "clients"
        ],
        "columns": [
            "clients.agency_id",
            "agencies.agency_id",
            "clients.client_details",
            "agencies.agency_details"
        ],
        "values": [
            {
                "table": "clients",
                "column": "client_details",
                "value": "Mac",
                "condition": "="
            }
        ],
        "db_id": "advertising_agencies",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "clients.client_details.mac"
        ]
    },
    {
        "question": "What are the agency details for clients with the detail Mac?",
        "SQL": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Mac'",
        "tables": [
            "agencies",
            "clients"
        ],
        "columns": [
            "clients.agency_id",
            "agencies.agency_id",
            "clients.client_details",
            "agencies.agency_details"
        ],
        "values": [
            {
                "table": "clients",
                "column": "client_details",
                "value": "Mac",
                "condition": "="
            }
        ],
        "db_id": "advertising_agencies",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "clients.client_details.mac"
        ]
    },
    {
        "question": "Show all payment ids and details for invoices whose status is 'Working'.",
        "SQL": "SELECT T1.payment_id ,  T1.payment_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id WHERE T2.invoice_status  =  'Working'",
        "tables": [
            "payments",
            "invoices"
        ],
        "columns": [
            "payments.payment_id",
            "payments.invoice_id",
            "payments.payment_details",
            "invoices.invoice_id",
            "invoices.invoice_status"
        ],
        "values": [
            {
                "table": "invoices",
                "column": "invoice_status",
                "value": "Working",
                "condition": "="
            }
        ],
        "db_id": "advertising_agencies",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "invoices.invoice_status.working"
        ]
    },
    {
        "question": "What are all payment ids and payment details for invoices with status Working?",
        "SQL": "SELECT T1.payment_id ,  T1.payment_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id WHERE T2.invoice_status  =  'Working'",
        "tables": [
            "payments",
            "invoices"
        ],
        "columns": [
            "payments.payment_id",
            "payments.invoice_id",
            "payments.payment_details",
            "invoices.invoice_id",
            "invoices.invoice_status"
        ],
        "values": [
            {
                "table": "invoices",
                "column": "invoice_status",
                "value": "Working",
                "condition": "="
            }
        ],
        "db_id": "advertising_agencies",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "invoices.invoice_status.working"
        ]
    }
]