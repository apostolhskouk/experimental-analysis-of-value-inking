[
    {
        "SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'North Omer'",
        "tables": [
            "addresses"
        ],
        "columns": [
            "addresses.zip_postcode",
            "addresses.city"
        ],
        "values": [
            {
                "table": "addresses",
                "column": "city",
                "value": "North Omer",
                "condition": "="
            }
        ],
        "db_id": "student_transcripts_tracking",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "addresses.city.port chelsea"
        ],
        "original_question": "What is the zip code of the address in the city Port Chelsea?",
        "question": "What is the zip code of the address in the city North Oner?",
        "original_SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "changes_information": {
            "original_value": "North Omer",
            "typo_substitution": "North Oner"
        }
    },
    {
        "SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'North Omer'",
        "tables": [
            "addresses"
        ],
        "columns": [
            "addresses.zip_postcode",
            "addresses.city"
        ],
        "values": [
            {
                "table": "addresses",
                "column": "city",
                "value": "North Omer",
                "condition": "="
            }
        ],
        "db_id": "student_transcripts_tracking",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "addresses.city.port chelsea"
        ],
        "original_question": "What is the zip code for Port Chelsea?",
        "question": "What is the zip code for North Oner?",
        "original_SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "changes_information": {
            "original_value": "North Omer",
            "typo_substitution": "North Oner"
        }
    },
    {
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Caucus' LIMIT 10",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "badges.userid",
            "users.displayname",
            "badges.name"
        ],
        "values": [
            {
                "table": "badges",
                "column": "name",
                "value": "Caucus",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
        "values_list": [
            "badges.name.caucus"
        ],
        "original_question": "Name 10 users with the badge name 'Necromancer.'",
        "question": "Name 10 users with the badge name 'Causus.'",
        "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10",
        "changes_information": {
            "original_value": "Caucus",
            "typo_substitution": "Causus"
        }
    },
    {
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Caucus'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "badges.userid",
            "users.displayname",
            "badges.name"
        ],
        "values": [
            {
                "table": "badges",
                "column": "name",
                "value": "Caucus",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "values_list": [
            "badges.name.caucus"
        ],
        "original_question": "List all the name of users that obtained the Organizer Badges.",
        "question": "List all the name of users that obtained the Causus Badges.",
        "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'",
        "changes_information": {
            "original_value": "Caucus",
            "typo_substitution": "Causus"
        }
    },
    {
        "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Caucus'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.location",
            "badges.userid",
            "badges.name",
            "users.id",
            "users.lastaccessdate"
        ],
        "values": [
            {
                "table": "badges",
                "column": "name",
                "value": "Caucus",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "Outliers is the name of the badge;",
        "values_list": [
            "badges.name.caucus"
        ],
        "original_question": "Describe the last accessed date and location of the users who received the outliers badge.",
        "question": "Describe the last accessed date and location of the users who received the Causus badge.",
        "original_SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
        "changes_information": {
            "original_value": "Caucus",
            "typo_substitution": "Causus"
        }
    },
    {
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Caucus' ORDER BY T2.Date LIMIT 1",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "badges.userid",
            "badges.name",
            "users.id",
            "users.displayname",
            "badges.date"
        ],
        "values": [
            {
                "table": "badges",
                "column": "name",
                "value": "Caucus",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "values_list": [
            "badges.name.caucus"
        ],
        "original_question": "What is the display name of the user who acquired the first Autobiographer badge?",
        "question": "What is the display name of the user who acquired the first Causus badge?",
        "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
        "changes_information": {
            "original_value": "Caucus",
            "typo_substitution": "Causus"
        }
    },
    {
        "SQL": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
        "tables": [
            "battle"
        ],
        "columns": [
            "battle.latin_commander",
            "battle.bulgarian_commander",
            "battle.name"
        ],
        "values": [
            {
                "table": "battle",
                "column": "bulgarian_commander",
                "value": "Kaloyan",
                "condition": "="
            },
            {
                "table": "battle",
                "column": "latin_commander",
                "value": "Baldwin I",
                "condition": "="
            }
        ],
        "db_id": "battle_death",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "battle.bulgarian_commander.kaloyan",
            "battle.latin_commander.baldwin i"
        ],
        "original_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin l'?",
        "original_SQL": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
        "changes_information": {
            "original_value": "Baldwin I",
            "typo_substitution": "Baldwin l"
        }
    },
    {
        "SQL": "SELECT DISTINCT warehouse FROM boxes WHERE CONTENTS  =  'Scissors' OR CONTENTS  =  'Scissors'",
        "tables": [
            "boxes"
        ],
        "columns": [
            "boxes.warehouse",
            "boxes.contents"
        ],
        "values": [
            {
                "table": "boxes",
                "column": "contents",
                "value": "Scissors",
                "condition": "="
            },
            {
                "table": "boxes",
                "column": "contents",
                "value": "Scissors",
                "condition": "="
            }
        ],
        "db_id": "warehouse_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "boxes.contents.scissors",
            "boxes.contents.scissors"
        ],
        "original_question": "Find the warehouses which store contents Rocks or Scissors.",
        "question": "Find the warehouses which store contents Scissorz or Scissors.",
        "original_SQL": "SELECT DISTINCT warehouse FROM boxes WHERE CONTENTS  =  'Rocks' OR CONTENTS  =  'Scissors'",
        "changes_information": {
            "original_value": "Scissors",
            "typo_substitution": "Scissorz"
        }
    },
    {
        "SQL": "SELECT DISTINCT warehouse FROM boxes WHERE CONTENTS  =  'Scissors' OR CONTENTS  =  'Scissors'",
        "tables": [
            "boxes"
        ],
        "columns": [
            "boxes.warehouse",
            "boxes.contents"
        ],
        "values": [
            {
                "table": "boxes",
                "column": "contents",
                "value": "Scissors",
                "condition": "="
            },
            {
                "table": "boxes",
                "column": "contents",
                "value": "Scissors",
                "condition": "="
            }
        ],
        "db_id": "warehouse_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "boxes.contents.scissors",
            "boxes.contents.scissors"
        ],
        "original_question": "What are the distinct warehouses that have boxes with Rocks or Scissors as contents?",
        "question": "What are the distinct warehouses that have boxes with Scissorz or Scissors as contents?",
        "original_SQL": "SELECT DISTINCT warehouse FROM boxes WHERE CONTENTS  =  'Rocks' OR CONTENTS  =  'Scissors'",
        "changes_information": {
            "original_value": "Scissors",
            "typo_substitution": "Scissorz"
        }
    },
    {
        "SQL": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors' INTERSECT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
        "tables": [
            "warehouses",
            "boxes"
        ],
        "columns": [
            "boxes.warehouse",
            "warehouses.code",
            "warehouses.location",
            "boxes.contents"
        ],
        "values": [
            {
                "table": "boxes",
                "column": "contents",
                "value": "Scissors",
                "condition": "="
            },
            {
                "table": "boxes",
                "column": "contents",
                "value": "Scissors",
                "condition": "="
            }
        ],
        "db_id": "warehouse_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "boxes.contents.scissors",
            "boxes.contents.scissors"
        ],
        "original_question": "Find the location of the warehouses which store contents Rocks and Scissors.",
        "question": "Find the location of the warehouses which store contents Scissorz and Scissors.",
        "original_SQL": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' INTERSECT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
        "changes_information": {
            "original_value": "Scissors",
            "typo_substitution": "Scissorz"
        }
    },
    {
        "SQL": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors' INTERSECT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
        "tables": [
            "warehouses",
            "boxes"
        ],
        "columns": [
            "boxes.warehouse",
            "warehouses.code",
            "warehouses.location",
            "boxes.contents"
        ],
        "values": [
            {
                "table": "boxes",
                "column": "contents",
                "value": "Scissors",
                "condition": "="
            },
            {
                "table": "boxes",
                "column": "contents",
                "value": "Scissors",
                "condition": "="
            }
        ],
        "db_id": "warehouse_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "boxes.contents.scissors",
            "boxes.contents.scissors"
        ],
        "original_question": "What are the locations of warehouses in which boxes that contain Rocks and Scissors are kept?",
        "question": "What are the locations of warehouses in which boxes that contain Scissorz and Scissors are kept?",
        "original_SQL": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' INTERSECT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
        "changes_information": {
            "original_value": "Scissors",
            "typo_substitution": "Scissorz"
        }
    },
    {
        "SQL": "SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Scissors')",
        "tables": [
            "boxes"
        ],
        "columns": [
            "boxes.contents",
            "boxes.value",
            "boxes.code"
        ],
        "values": [
            {
                "table": "boxes",
                "column": "contents",
                "value": "Scissors",
                "condition": "="
            },
            {
                "table": "",
                "column": "contents",
                "value": "Rocks",
                "condition": "="
            }
        ],
        "db_id": "warehouse_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "boxes.contents.scissors",
            ".contents.rocks"
        ],
        "original_question": "Find the code of all boxes whose value is higher than the value of any boxes with Rocks as content.",
        "question": "Find the code of all boxes whose value is higher than the value of any boxes with Scissorz as content.",
        "original_SQL": "SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Rocks')",
        "changes_information": {
            "original_value": "Scissors",
            "typo_substitution": "Scissorz"
        }
    },
    {
        "SQL": "SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Scissors')",
        "tables": [
            "boxes"
        ],
        "columns": [
            "boxes.contents",
            "boxes.value",
            "boxes.code"
        ],
        "values": [
            {
                "table": "boxes",
                "column": "contents",
                "value": "Scissors",
                "condition": "="
            },
            {
                "table": "",
                "column": "contents",
                "value": "Rocks",
                "condition": "="
            }
        ],
        "db_id": "warehouse_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "boxes.contents.scissors",
            ".contents.rocks"
        ],
        "original_question": "What are the codes of boxes for which the value is greater than the value of any box that contains Rocks?",
        "question": "What are the codes of boxes for which the value is greater than the value of any box that contains Scissorz?",
        "original_SQL": "SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Rocks')",
        "changes_information": {
            "original_value": "Scissors",
            "typo_substitution": "Scissorz"
        }
    },
    {
        "SQL": "SELECT code ,  CONTENTS FROM boxes WHERE value  >  (SELECT max(value) FROM boxes WHERE CONTENTS  =  'Scissors')",
        "tables": [
            "boxes"
        ],
        "columns": [
            "boxes.contents",
            "boxes.value",
            "boxes.code"
        ],
        "values": [
            {
                "table": "boxes",
                "column": "contents",
                "value": "Scissors",
                "condition": "="
            },
            {
                "table": "",
                "column": "contents",
                "value": "Scissors",
                "condition": "="
            }
        ],
        "db_id": "warehouse_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "boxes.contents.scissors",
            ".contents.scissors"
        ],
        "original_question": "Find the code and content of all boxes whose value is higher than the value of all boxes with Scissors as content.",
        "question": "Find the code and content of all boxes whose value is higher than the value of all boxes with Scissorz as content.",
        "original_SQL": "SELECT code ,  CONTENTS FROM boxes WHERE value  >  (SELECT max(value) FROM boxes WHERE CONTENTS  =  'Scissors')",
        "changes_information": {
            "original_value": "Scissors",
            "typo_substitution": "Scissorz"
        }
    },
    {
        "SQL": "SELECT code ,  CONTENTS FROM boxes WHERE value  >  (SELECT max(value) FROM boxes WHERE CONTENTS  =  'Scissors')",
        "tables": [
            "boxes"
        ],
        "columns": [
            "boxes.contents",
            "boxes.value",
            "boxes.code"
        ],
        "values": [
            {
                "table": "boxes",
                "column": "contents",
                "value": "Scissors",
                "condition": "="
            },
            {
                "table": "",
                "column": "contents",
                "value": "Scissors",
                "condition": "="
            }
        ],
        "db_id": "warehouse_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "boxes.contents.scissors",
            ".contents.scissors"
        ],
        "original_question": "What are the codes and corresponding contents of boxes for which their value is higher than the values of all boxes containing Scissors?",
        "question": "What are the codes and corresponding contents of boxes for which their value is higher than the values of all boxes containing Scissorz?",
        "original_SQL": "SELECT code ,  CONTENTS FROM boxes WHERE value  >  (SELECT max(value) FROM boxes WHERE CONTENTS  =  'Scissors')",
        "changes_information": {
            "original_value": "Scissors",
            "typo_substitution": "Scissorz"
        }
    },
    {
        "SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Greg Staples'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.artist",
            "cards.name"
        ],
        "values": [
            {
                "table": "cards",
                "column": "artist",
                "value": "Greg Staples",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Aaron Boyd' is artist;",
        "values_list": [
            "cards.artist.aaron boyd"
        ],
        "original_question": "Name the cards that were illustrated by Aaron Boyd.",
        "question": "Name the cards that were illustrated by Greg Stables.",
        "original_SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Aaron Boyd'",
        "changes_information": {
            "original_value": "Greg Staples",
            "typo_substitution": "Greg Stables"
        }
    },
    {
        "SQL": "SELECT manaCost FROM cards WHERE artist = 'Greg Staples'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.artist",
            "cards.manacost"
        ],
        "values": [
            {
                "table": "cards",
                "column": "artist",
                "value": "Greg Staples",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "unconverted mana refer to manaCost; Rob Alexander refer to artist",
        "values_list": [
            "cards.artist.rob alexander"
        ],
        "original_question": "What is the  unconverted mana do all the cards created by Rob Alexander cost in total?",
        "question": "What is the  unconverted mana do all the cards created by Greg Stables cost in total?",
        "original_SQL": "SELECT manaCost FROM cards WHERE artist = 'Rob Alexander'",
        "changes_information": {
            "original_value": "Greg Staples",
            "typo_substitution": "Greg Stables"
        }
    },
    {
        "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Greg Staples' AND T2.format = 'pauper' AND T1.availability = 'paper'",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.artist",
            "legalities.format",
            "cards.id",
            "legalities.uuid",
            "cards.uuid",
            "cards.availability"
        ],
        "values": [
            {
                "table": "cards",
                "column": "availability",
                "value": "paper",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "artist",
                "value": "Greg Staples",
                "condition": "="
            },
            {
                "table": "legalities",
                "column": "format",
                "value": "pauper",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "available in paper refers to availability = 'paper'",
        "values_list": [
            "cards.availability.paper",
            "cards.artist.erica yang",
            "legalities.format.pauper"
        ],
        "original_question": "Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its ID.",
        "question": "Is there any card from Greg Stables artist in pauper format and available in paper? If so, indicate its ID.",
        "original_SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'",
        "changes_information": {
            "original_value": "Greg Staples",
            "typo_substitution": "Greg Stables"
        }
    },
    {
        "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Greg Staples'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.artist",
            "cards.availability"
        ],
        "values": [
            {
                "table": "cards",
                "column": "artist",
                "value": "Greg Staples",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
        "values_list": [
            "cards.artist.daren bader"
        ],
        "original_question": "What kind of printing is on the card that Daren Bader created?",
        "question": "What kind of printing is on the card that Greg Stables created?",
        "original_SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'",
        "changes_information": {
            "original_value": "Greg Staples",
            "typo_substitution": "Greg Stables"
        }
    },
    {
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Greg Staples' ORDER BY T2.date DESC",
        "tables": [
            "rulings",
            "cards"
        ],
        "columns": [
            "cards.artist",
            "rulings.date",
            "rulings.text",
            "cards.uuid",
            "rulings.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "artist",
                "value": "Greg Staples",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
        "values_list": [
            "cards.artist.kev walker"
        ],
        "original_question": "What are the rulings for the card named and designed by Kev Walker? List them in descending order of dates.",
        "question": "What are the rulings for the card named and designed by Greg Stables? List them in descending order of dates.",
        "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Kev Walker' ORDER BY T2.date DESC",
        "changes_information": {
            "original_value": "Greg Staples",
            "typo_substitution": "Greg Stables"
        }
    },
    {
        "SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Greg Staples'",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.artist",
            "legalities.status",
            "cards.name",
            "cards.frameversion",
            "legalities.uuid",
            "cards.uuid"
        ],
        "values": [
            {
                "table": "legalities",
                "column": "status",
                "value": "Banned",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "artist",
                "value": "Greg Staples",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
        "values_list": [
            "legalities.status.banned",
            "cards.artist.allen williams"
        ],
        "original_question": "List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.",
        "question": "List all the frame styles and cards Greg Stables worked on and find any banned cards if there are any.",
        "original_SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'",
        "changes_information": {
            "original_value": "Greg Staples",
            "typo_substitution": "Greg Stables"
        }
    },
    {
        "SQL": "SELECT layout FROM cards WHERE keywords = 'Landfall'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.keywords",
            "cards.layout"
        ],
        "values": [
            {
                "table": "cards",
                "column": "keywords",
                "value": "Landfall",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "cards.keywords.landfall"
        ],
        "original_question": "What are the card layout of cards with keyword of flying?",
        "question": "What are the card layout of cards with keyword of Landfoll?",
        "original_SQL": "SELECT layout FROM cards WHERE keywords = 'Flying'",
        "changes_information": {
            "original_value": "Landfall",
            "typo_substitution": "Landfoll"
        }
    },
    {
        "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Maddening Wind'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.name",
            "cards.keywords"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Maddening Wind",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Angel of Mercy' is the name of card;",
        "values_list": [
            "cards.name.angel of mercy"
        ],
        "original_question": "What is the keyword found on card 'Angel of Mercy'?",
        "question": "What is the keyword found on card 'Maddening Wond'?",
        "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
        "changes_information": {
            "original_value": "Maddening Wind",
            "typo_substitution": "Maddening Wond"
        }
    },
    {
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Maddening Wind'",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "legalities.uuid",
            "legalities.status",
            "cards.name",
            "cards.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Maddening Wind",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Cloudchaser Eagle is the name of card;",
        "values_list": [
            "cards.name.cloudchaser eagle"
        ],
        "original_question": "What is the status of card \"Cloudchaser Eagle\"?",
        "question": "What is the status of card \"Maddening Wond\"?",
        "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
        "changes_information": {
            "original_value": "Maddening Wind",
            "typo_substitution": "Maddening Wond"
        }
    },
    {
        "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Maddening Wind'",
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.uuid",
            "cards.name",
            "foreign_data.uuid",
            "cards.type"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Maddening Wind",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Benalish Knight' is the name of card;",
        "values_list": [
            "cards.name.benalish knight"
        ],
        "original_question": "What is the type of card \"Benalish Knight\"?",
        "question": "What is the type of card \"Maddening Wond\"?",
        "original_SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
        "changes_information": {
            "original_value": "Maddening Wind",
            "typo_substitution": "Maddening Wond"
        }
    },
    {
        "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Maddening Wind'",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "legalities.uuid",
            "cards.uuid",
            "legalities.format",
            "cards.name"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Maddening Wind",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
        "values_list": [
            "cards.name.benalish knight"
        ],
        "original_question": "What is the rule of playing card \"Benalish Knight\"?",
        "question": "What is the rule of playing card \"Maddening Wond\"?",
        "original_SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
        "changes_information": {
            "original_value": "Maddening Wind",
            "typo_substitution": "Maddening Wond"
        }
    },
    {
        "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Maddening Wind'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.name",
            "cards.subtypes",
            "cards.supertypes"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Maddening Wind",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "values_list": [
            "cards.name.molimo, maro-sorcerer"
        ],
        "original_question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
        "question": "What's the list of all types for the card \"Maddening Wond\"?",
        "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
        "changes_information": {
            "original_value": "Maddening Wind",
            "typo_substitution": "Maddening Wond"
        }
    },
    {
        "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Maddening Wind'",
        "tables": [
            "sets",
            "cards"
        ],
        "columns": [
            "sets.mtgocode",
            "cards.name",
            "cards.setcode",
            "sets.code"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Maddening Wind",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "values_list": [
            "cards.name.angel of mercy"
        ],
        "original_question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
        "question": "Did the set of cards with \"Maddening Wond\" appear on Magic: The Gathering Online?",
        "original_SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
        "changes_information": {
            "original_value": "Maddening Wind",
            "typo_substitution": "Maddening Wond"
        }
    },
    {
        "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Maddening Wind'",
        "tables": [
            "sets",
            "cards"
        ],
        "columns": [
            "cards.name",
            "cards.setcode",
            "sets.code",
            "sets.releasedate"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Maddening Wind",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "values_list": [
            "cards.name.maddening_wind"
        ],
        "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
        "question": "What was the release date for the set which card \"Maddening Wond\" in it?",
        "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
        "changes_information": {
            "original_value": "Maddening Wind",
            "typo_substitution": "Maddening Wond"
        }
    },
    {
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Maddening Wind' AND T2.language = 'French' AND T2.translation IS NOT NULL",
        "tables": [
            "set_translations",
            "cards"
        ],
        "columns": [
            "set_translations.language",
            "cards.name",
            "set_translations.setcode",
            "cards.setcode",
            "set_translations.translation"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Maddening Wind",
                "condition": "="
            },
            {
                "table": "set_translations",
                "column": "language",
                "value": "French",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
        "values_list": [
            "cards.name.tendo ice bridge",
            "set_translations.language.french"
        ],
        "original_question": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in?",
        "question": "What's the French name of the set of cards with \"Maddening Wond\" is in?",
        "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL",
        "changes_information": {
            "original_value": "Maddening Wind",
            "typo_substitution": "Maddening Wond"
        }
    },
    {
        "SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Enchant Swamp'",
        "tables": [
            "rulings",
            "cards"
        ],
        "columns": [
            "cards.originaltype",
            "cards.id",
            "rulings.date",
            "cards.uuid",
            "rulings.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "originaltype",
                "value": "Enchant Swamp",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Creature - Elf is the originalType;",
        "values_list": [
            "cards.originaltype.creature - elf"
        ],
        "original_question": "List down the name of cards with original types of Creature - Elf and the date of rulings for these cards.",
        "question": "List down the name of cards with original types of Enchant Swamo and the date of rulings for these cards.",
        "original_SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'",
        "changes_information": {
            "original_value": "Enchant Swamp",
            "typo_substitution": "Enchant Swamo"
        }
    },
    {
        "SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Enchant Swamp' AND T1.colors = 'B'",
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.originaltype",
            "cards.name",
            "cards.colors",
            "foreign_data.uuid",
            "cards.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "originaltype",
                "value": "Enchant Swamp",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "colors",
                "value": "B",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Artifact card refers to originalType = 'Artifact'; black color refers to colors = 'B'; foreign language refers to language in foreign_data",
        "values_list": [
            "cards.originaltype.enchant_swamp",
            "cards.colors.b"
        ],
        "original_question": "Among the Artifact cards, which are black color and comes with foreign languague translation?",
        "question": "Among the Enchant Swamo cards, which are black color and comes with foreign languague translation?",
        "original_SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B'",
        "changes_information": {
            "original_value": "Enchant Swamp",
            "typo_substitution": "Enchant Swamo"
        }
    },
    {
        "SQL": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'tourney'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.purchaseurls",
            "cards.promotypes"
        ],
        "values": [
            {
                "table": "cards",
                "column": "promotypes",
                "value": "tourney",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "promotional type of \"bundle\" refers to promoTypes = 'bundle'; websites refers to purchaseUrls",
        "values_list": [
            "cards.promotypes.tourney"
        ],
        "original_question": "Please list the websites where I can purchase the cards that have the promotional type of \"bundle\".",
        "question": "Please list the websites where I can purchase the cards that have the promotional type of \"tournry\".",
        "original_SQL": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'bundle'",
        "changes_information": {
            "original_value": "tourney",
            "typo_substitution": "tournry"
        }
    },
    {
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Legendary Enchantment' AND T2.format = 'vintage' AND T1.side IS NULL",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.side",
            "legalities.format",
            "legalities.status",
            "legalities.uuid",
            "cards.uuid",
            "cards.type"
        ],
        "values": [
            {
                "table": "cards",
                "column": "type",
                "value": "Legendary Enchantment",
                "condition": "="
            },
            {
                "table": "legalities",
                "column": "format",
                "value": "vintage",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Artifact type of cards refers to types = 'Artifact'; card does not have multiple faces on the same card refers to side is NULL'; vintage play format refers to format = 'vintage';",
        "values_list": [
            "cards.type.legendary_enchantment",
            "legalities.format.vintage"
        ],
        "original_question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format.",
        "question": "For Legendaru Enchantment type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format.",
        "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Artifact' AND T2.format = 'vintage' AND T1.side IS NULL",
        "changes_information": {
            "original_value": "Legendary Enchantment",
            "typo_substitution": "Legendaru Enchantment"
        }
    },
    {
        "SQL": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "tables": [
            "tv_channel",
            "cartoon"
        ],
        "columns": [
            "cartoon.channel",
            "tv_channel.country",
            "tv_channel.id",
            "tv_channel.series_name",
            "cartoon.directed_by"
        ],
        "values": [
            {
                "table": "cartoon",
                "column": "directed_by",
                "value": "Ben Jones",
                "condition": "="
            },
            {
                "table": "cartoon",
                "column": "directed_by",
                "value": "Ben Jones",
                "condition": "="
            }
        ],
        "db_id": "tvshow",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "cartoon.directed_by.michael chang",
            "cartoon.directed_by.ben jones"
        ],
        "original_question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Ben Jomes?",
        "original_SQL": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "changes_information": {
            "original_value": "Ben Jones",
            "typo_substitution": "Ben Jomes"
        }
    },
    {
        "SQL": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "tables": [
            "tv_channel",
            "cartoon"
        ],
        "columns": [
            "cartoon.channel",
            "tv_channel.country",
            "tv_channel.id",
            "tv_channel.series_name",
            "cartoon.directed_by"
        ],
        "values": [
            {
                "table": "cartoon",
                "column": "directed_by",
                "value": "Ben Jones",
                "condition": "="
            },
            {
                "table": "cartoon",
                "column": "directed_by",
                "value": "Ben Jones",
                "condition": "="
            }
        ],
        "db_id": "tvshow",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "cartoon.directed_by.michael chang",
            "cartoon.directed_by.ben jones"
        ],
        "original_question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
        "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Ben Jomes?",
        "original_SQL": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "changes_information": {
            "original_value": "Ben Jones",
            "typo_substitution": "Ben Jomes"
        }
    },
    {
        "SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Adam Beechen'",
        "tables": [
            "tv_channel",
            "cartoon"
        ],
        "columns": [
            "cartoon.written_by",
            "tv_channel.country",
            "cartoon.channel",
            "tv_channel.id"
        ],
        "values": [
            {
                "table": "cartoon",
                "column": "written_by",
                "value": "Adam Beechen",
                "condition": "="
            }
        ],
        "db_id": "tvshow",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "cartoon.written_by.todd casey"
        ],
        "original_question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
        "question": "which countries' tv channels are playing some cartoon written by Adam Beechem?",
        "original_SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "changes_information": {
            "original_value": "Adam Beechen",
            "typo_substitution": "Adam Beechem"
        }
    },
    {
        "SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Adam Beechen'",
        "tables": [
            "tv_channel",
            "cartoon"
        ],
        "columns": [
            "cartoon.written_by",
            "tv_channel.country",
            "cartoon.channel",
            "tv_channel.id"
        ],
        "values": [
            {
                "table": "cartoon",
                "column": "written_by",
                "value": "Adam Beechen",
                "condition": "="
            }
        ],
        "db_id": "tvshow",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "cartoon.written_by.todd casey"
        ],
        "original_question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
        "question": "What are the countries that have cartoons on TV that were written by Adam Beechem?",
        "original_SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "changes_information": {
            "original_value": "Adam Beechen",
            "typo_substitution": "Adam Beechem"
        }
    },
    {
        "SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Adelaide'",
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "circuits.circuitid",
            "races.year",
            "races.circuitid",
            "circuits.location"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "location",
                "value": "Adelaide",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "Shanghai is a name of location;",
        "values_list": [
            "circuits.location.adelaide"
        ],
        "original_question": "Please list the year during which the race is held on circuits in Shanghai.",
        "question": "Please list the year during which the race is held on circuits in Adelaode.",
        "original_SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Shanghai'",
        "changes_information": {
            "original_value": "Adelaide",
            "typo_substitution": "Adelaode"
        }
    },
    {
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Monaco'",
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "circuits.circuitid",
            "races.circuitid",
            "circuits.name",
            "circuits.url"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "name",
                "value": "Circuit de Monaco",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
        "values_list": [
            "circuits.name.circuit de barcelona-catalunya"
        ],
        "original_question": "Where can the introduction of the races held on Circuit de Barcelona-Catalunya be found?",
        "question": "Where can the introduction of the races held on Circuit de Monsco be found?",
        "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
        "changes_information": {
            "original_value": "Circuit de Monaco",
            "typo_substitution": "Circuit de Monsco"
        }
    },
    {
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Monaco'",
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "circuits.circuitid",
            "races.circuitid",
            "circuits.name",
            "circuits.url"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "name",
                "value": "Circuit de Monaco",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "information about races refers to url;",
        "values_list": [
            "circuits.name.sepang international circuit"
        ],
        "original_question": "Where can I find the information about the races held on Sepang International Circuit?",
        "question": "Where can I find the information about the races held on Circuit de Monsco?",
        "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
        "changes_information": {
            "original_value": "Circuit de Monaco",
            "typo_substitution": "Circuit de Monsco"
        }
    },
    {
        "SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Monaco'",
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "circuits.circuitid",
            "circuits.name",
            "races.time",
            "races.circuitid"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "name",
                "value": "Circuit de Monaco",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "circuits.name.sepang international circuit"
        ],
        "original_question": "Please list the time of the races held on Sepang International Circuit.",
        "question": "Please list the time of the races held on Circuit de Monsco.",
        "original_SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
        "changes_information": {
            "original_value": "Circuit de Monaco",
            "typo_substitution": "Circuit de Monsco"
        }
    },
    {
        "SQL": "SELECT lat, lng FROM circuits WHERE name = 'Circuit de Monaco'",
        "tables": [
            "circuits"
        ],
        "columns": [
            "circuits.lat",
            "circuits.lng",
            "circuits.name"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "name",
                "value": "Circuit de Monaco",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
        "values_list": [
            "circuits.name.silverstone circuit"
        ],
        "original_question": "What's the location coordinates of Silverstone Circuit?",
        "question": "What's the location coordinates of Circuit de Monsco?",
        "original_SQL": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
        "changes_information": {
            "original_value": "Circuit de Monaco",
            "typo_substitution": "Circuit de Monsco"
        }
    },
    {
        "SQL": "SELECT circuitRef FROM circuits WHERE name = 'Circuit de Monaco'",
        "tables": [
            "circuits"
        ],
        "columns": [
            "circuits.circuitref",
            "circuits.name"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "name",
                "value": "Circuit de Monaco",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'",
        "values_list": [
            "circuits.name.marina bay street circuit"
        ],
        "original_question": "What's the reference name of Marina Bay Street Circuit?",
        "question": "What's the reference name of Circuit de Monsco?",
        "original_SQL": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'",
        "changes_information": {
            "original_value": "Circuit de Monaco",
            "typo_substitution": "Circuit de Monsco"
        }
    },
    {
        "SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Monaco'",
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "circuits.circuitid",
            "races.year",
            "races.circuitid",
            "circuits.name"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "name",
                "value": "Circuit de Monaco",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "circuits.name.silverstone circuit"
        ],
        "original_question": "Please list all the years that Silverstone Circuit was used in a Formula_1 race.",
        "question": "Please list all the years that Circuit de Monsco was used in a Formula_1 race.",
        "original_SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
        "changes_information": {
            "original_value": "Circuit de Monaco",
            "typo_substitution": "Circuit de Monsco"
        }
    },
    {
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Monaco'",
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "circuits.circuitid",
            "races.circuitid",
            "circuits.name",
            "circuits.url"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "name",
                "value": "Circuit de Monaco",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "more information refers to url",
        "values_list": [
            "circuits.name.silverstone circuit"
        ],
        "original_question": "Please give more information about the Formula_1 races that used the Silverstone Circuit.",
        "question": "Please give more information about the Formula_1 races that used the Circuit de Monsco.",
        "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
        "changes_information": {
            "original_value": "Circuit de Monaco",
            "typo_substitution": "Circuit de Monsco"
        }
    },
    {
        "SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Circuit de Monaco'",
        "tables": [
            "circuits"
        ],
        "columns": [
            "circuits.lat",
            "circuits.lng",
            "circuits.country",
            "circuits.name"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "name",
                "value": "Circuit de Monaco",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "coordinates expressed in latitude and longitude refers to (lat, lng)",
        "values_list": [
            "circuits.name.circuit_de_monaco"
        ],
        "original_question": "In which location does the Hungaroring circuit located? Also, find the country and coordinates of this circuit?",
        "question": "In which location does the Circuit de Monsco circuit located? Also, find the country and coordinates of this circuit?",
        "original_SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Hungaroring'",
        "changes_information": {
            "original_value": "Circuit de Monaco",
            "typo_substitution": "Circuit de Monsco"
        }
    },
    {
        "SQL": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Vincent'",
        "tables": [
            "agencies",
            "clients"
        ],
        "columns": [
            "clients.agency_id",
            "agencies.agency_id",
            "clients.client_details",
            "agencies.agency_details"
        ],
        "values": [
            {
                "table": "clients",
                "column": "client_details",
                "value": "Vincent",
                "condition": "="
            }
        ],
        "db_id": "advertising_agencies",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "clients.client_details.vincent"
        ],
        "original_question": "Show agency details for client with detail 'Mac'.",
        "question": "Show agency details for client with detail 'Vincenr'.",
        "original_SQL": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Mac'",
        "changes_information": {
            "original_value": "Vincent",
            "typo_substitution": "Vincenr"
        }
    },
    {
        "SQL": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Vincent'",
        "tables": [
            "agencies",
            "clients"
        ],
        "columns": [
            "clients.agency_id",
            "agencies.agency_id",
            "clients.client_details",
            "agencies.agency_details"
        ],
        "values": [
            {
                "table": "clients",
                "column": "client_details",
                "value": "Vincent",
                "condition": "="
            }
        ],
        "db_id": "advertising_agencies",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "clients.client_details.vincent"
        ],
        "original_question": "What are the agency details for clients with the detail Mac?",
        "question": "What are the agency details for clients with the detail Vincenr?",
        "original_SQL": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Mac'",
        "changes_information": {
            "original_value": "Vincent",
            "typo_substitution": "Vincenr"
        }
    },
    {
        "SQL": "SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Indigo'",
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "colour.id",
            "superhero.eye_colour_id",
            "colour.colour",
            "superhero.height_cm"
        ],
        "values": [
            {
                "table": "colour",
                "column": "colour",
                "value": "Indigo",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "heights of the heroes refers to height_cm; eye colours are amber refers to colour.colour = 'Amber' WHERE eye_colour_id = colour.id;",
        "values_list": [
            "colour.colour.indigo"
        ],
        "original_question": "Provide the heights of the heroes whose eye colours are amber.",
        "question": "Provide the heights of the heroes whose eye colours are Indifo.",
        "original_SQL": "SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Amber'",
        "changes_information": {
            "original_value": "Indigo",
            "typo_substitution": "Indifo"
        }
    },
    {
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Indigo' LIMIT 5",
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "superhero.superhero_name",
            "superhero.eye_colour_id",
            "colour.id",
            "colour.colour"
        ],
        "values": [
            {
                "table": "colour",
                "column": "colour",
                "value": "Indigo",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "blue eyes refers to colour.colour = 'Blue' WHERE eye_colour_id = colour.id; Name of superheroes refers to superhero_name;",
        "values_list": [
            "colour.colour.indigo"
        ],
        "original_question": "List down at least five full names of superheroes with blue eyes.",
        "question": "List down at least five full names of superheroes with Indifo eyes.",
        "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue' LIMIT 5",
        "changes_information": {
            "original_value": "Indigo",
            "typo_substitution": "Indifo"
        }
    },
    {
        "SQL": "SELECT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T2.colour = 'Indigo' AND T4.gender = 'Male'",
        "tables": [
            "race",
            "superhero",
            "gender",
            "colour"
        ],
        "columns": [
            "gender.gender",
            "race.id",
            "superhero.hair_colour_id",
            "gender.id",
            "superhero.gender_id",
            "colour.colour",
            "superhero.race_id",
            "colour.id",
            "race.race"
        ],
        "values": [
            {
                "table": "colour",
                "column": "colour",
                "value": "Indigo",
                "condition": "="
            },
            {
                "table": "gender",
                "column": "gender",
                "value": "Male",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "blue-haired refers to colour.colour = 'blue' WHERE hair_colour_id = colour.id; male refers to gender = 'male';",
        "values_list": [
            "colour.colour.indigo",
            "gender.gender.male"
        ],
        "original_question": "Give the race of the blue-haired male superhero.",
        "question": "Give the race of the Indifo-haired male superhero.",
        "original_SQL": "SELECT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T2.colour = 'Blue' AND T4.gender = 'Male'",
        "changes_information": {
            "original_value": "Indigo",
            "typo_substitution": "Indifo"
        }
    },
    {
        "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg < 100 AND T2.colour = 'Indigo'",
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "superhero.weight_kg",
            "superhero.full_name",
            "colour.colour",
            "colour.id",
            "superhero.eye_colour_id"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "weight_kg",
                "value": "100",
                "condition": "<"
            },
            {
                "table": "colour",
                "column": "colour",
                "value": "Indigo",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "weight less than 100 refers to weight_kg < 100",
        "values_list": [
            "superhero.weight_kg.100",
            "colour.colour.indigo"
        ],
        "original_question": "In superheroes with weight less than 100, list the full name of the superheroes with brown eyes.",
        "question": "In superheroes with weight less than 100, list the full name of the superheroes with Indifo eyes.",
        "original_SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg < 100 AND T2.colour = 'Brown'",
        "changes_information": {
            "original_value": "Indigo",
            "typo_substitution": "Indifo"
        }
    },
    {
        "SQL": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Palm reading'",
        "tables": [
            "documents",
            "paragraphs"
        ],
        "columns": [
            "documents.document_name",
            "documents.document_id",
            "paragraphs.paragraph_text",
            "paragraphs.paragraph_id",
            "paragraphs.document_id"
        ],
        "values": [
            {
                "table": "documents",
                "column": "document_name",
                "value": "Palm reading",
                "condition": "="
            }
        ],
        "db_id": "cre_Doc_Template_Mgt",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "documents.document_name.welcome to ny"
        ],
        "original_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "question": "Show all paragraph ids and texts for the document with name 'Paln reading'.",
        "original_SQL": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
        "changes_information": {
            "original_value": "Palm reading",
            "typo_substitution": "Paln reading"
        }
    },
    {
        "SQL": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Palm reading'",
        "tables": [
            "documents",
            "paragraphs"
        ],
        "columns": [
            "documents.document_name",
            "documents.document_id",
            "paragraphs.paragraph_text",
            "paragraphs.paragraph_id",
            "paragraphs.document_id"
        ],
        "values": [
            {
                "table": "documents",
                "column": "document_name",
                "value": "Palm reading",
                "condition": "="
            }
        ],
        "db_id": "cre_Doc_Template_Mgt",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "documents.document_name.welcome to ny"
        ],
        "original_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
        "question": "What are the ids and texts of paragraphs in the document titled 'Paln reading'?",
        "original_SQL": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
        "changes_information": {
            "original_value": "Palm reading",
            "typo_substitution": "Paln reading"
        }
    },
    {
        "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Fall Budget Review'",
        "tables": [
            "member",
            "event",
            "attendance"
        ],
        "columns": [
            "attendance.link_to_event",
            "event.event_name",
            "member.member_id",
            "member.first_name",
            "attendance.link_to_member",
            "event.event_id",
            "member.last_name"
        ],
        "values": [
            {
                "table": "event",
                "column": "event_name",
                "value": "Fall Budget Review",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "full name of members refers to first_name, last_name; 'Laugh Out Loud' is an event name;",
        "values_list": [
            "event.event_name.laugh out loud"
        ],
        "original_question": "List the full name of all the members of the Student_Club who attended the \"Laugh Out Loud\" event.",
        "question": "List the full name of all the members of the Student_Club who attended the \"Fall Budgef Review\" event.",
        "original_SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Laugh Out Loud'",
        "changes_information": {
            "original_value": "Fall Budget Review",
            "typo_substitution": "Fall Budgef Review"
        }
    },
    {
        "SQL": "SELECT location FROM event WHERE event_name = 'Fall Budget Review'",
        "tables": [
            "event"
        ],
        "columns": [
            "event.location",
            "event.event_name"
        ],
        "values": [
            {
                "table": "event",
                "column": "event_name",
                "value": "Fall Budget Review",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "'Spring Budget Review' is an event name;",
        "values_list": [
            "event.event_name.spring budget review"
        ],
        "original_question": "Give the location for \"Spring Budget Review\".",
        "question": "Give the location for \"Fall Budgef Review\".",
        "original_SQL": "SELECT location FROM event WHERE event_name = 'Spring Budget Review'",
        "changes_information": {
            "original_value": "Fall Budget Review",
            "typo_substitution": "Fall Budgef Review"
        }
    },
    {
        "SQL": "SELECT DISTINCT T3.member_id FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Fall Budget Review'",
        "tables": [
            "member",
            "event",
            "attendance"
        ],
        "columns": [
            "attendance.link_to_event",
            "event.event_name",
            "member.member_id",
            "attendance.link_to_member",
            "event.event_id"
        ],
        "values": [
            {
                "table": "event",
                "column": "event_name",
                "value": "Fall Budget Review",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "'October Meeting' is an event name;",
        "values_list": [
            "event.event_name.october meeting"
        ],
        "original_question": "List all the members who attended the event \"October Meeting\".",
        "question": "List all the members who attended the event \"Fall Budgef Review\".",
        "original_SQL": "SELECT DISTINCT T3.member_id FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'October Meeting'",
        "changes_information": {
            "original_value": "Fall Budget Review",
            "typo_substitution": "Fall Budgef Review"
        }
    },
    {
        "SQL": "SELECT T2.first_name, T2.last_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T4.event_name = 'Fall Budget Review' AND T1.major_name = 'Interior Design'",
        "tables": [
            "member",
            "event",
            "major",
            "attendance"
        ],
        "columns": [
            "attendance.link_to_event",
            "event.event_name",
            "member.member_id",
            "member.link_to_major",
            "member.first_name",
            "attendance.link_to_member",
            "major.major_id",
            "major.major_name",
            "event.event_id",
            "member.last_name"
        ],
        "values": [
            {
                "table": "event",
                "column": "event_name",
                "value": "Fall Budget Review",
                "condition": "="
            },
            {
                "table": "major",
                "column": "major_name",
                "value": "Interior Design",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "majored in music refers to major_name = 'Interior Design'; 'Community Theater' is the event name;",
        "values_list": [
            "event.event_name.community theater",
            "major.major_name.interior design"
        ],
        "original_question": "Among the students majored in interior design, who have attended the Community Theater event?",
        "question": "Among the students majored in interior design, who have attended the Fall Budgef Review event?",
        "original_SQL": "SELECT T2.first_name, T2.last_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T4.event_name = 'Community Theater' AND T1.major_name = 'Interior Design'",
        "changes_information": {
            "original_value": "Fall Budget Review",
            "typo_substitution": "Fall Budgef Review"
        }
    },
    {
        "SQL": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'Bleeding Colitis' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1",
        "tables": [
            "examination"
        ],
        "columns": [
            "examination.symptoms",
            "examination.diagnosis"
        ],
        "values": [
            {
                "table": "examination",
                "column": "diagnosis",
                "value": "Bleeding Colitis",
                "condition": "="
            }
        ],
        "db_id": "thrombosis_prediction",
        "source": "bird_dev",
        "evidence": "the most common sign refers to MAX(symptoms); 'SLE' refers to diagnosis",
        "values_list": [
            "examination.diagnosis.bleeding_colitis"
        ],
        "original_question": "What is the most common sign of patients with SLE disease?",
        "question": "What is the most common sign of patients with Bleeding Colitus disease?",
        "original_SQL": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1",
        "changes_information": {
            "original_value": "Bleeding Colitis",
            "typo_substitution": "Bleeding Colitus"
        }
    },
    {
        "SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'Remover a Alma'",
        "tables": [
            "foreign_data"
        ],
        "columns": [
            "foreign_data.language",
            "foreign_data.name"
        ],
        "values": [
            {
                "table": "foreign_data",
                "column": "name",
                "value": "Remover a Alma",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "\"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
        "values_list": [
            "foreign_data.name.a pedra fellwar"
        ],
        "original_question": "Which foreign language used by \"A Pedra Fellwar\"?",
        "question": "Which foreign language used by \"Remover a Alna\"?",
        "original_SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar'",
        "changes_information": {
            "original_value": "Remover a Alma",
            "typo_substitution": "Remover a Alna"
        }
    },
    {
        "SQL": "SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` FROM frpm WHERE `County Name` = 'Orange' ORDER BY (CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)`) DESC LIMIT 1",
        "tables": [
            "frpm"
        ],
        "columns": [
            "frpm.county name",
            "frpm.free meal count (k-12)",
            "frpm.enrollment (k-12)"
        ],
        "values": [
            {
                "table": "frpm",
                "column": "county name",
                "value": "Orange",
                "condition": "="
            }
        ],
        "db_id": "california_schools",
        "source": "bird_dev",
        "evidence": "Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`",
        "values_list": [
            "frpm.county name.orange"
        ],
        "original_question": "What is the highest eligible free rate for K-12 students in the schools in Alameda County?",
        "question": "What is the highest eligible free rate for K-12 students in the schools in Oranze County?",
        "original_SQL": "SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` FROM frpm WHERE `County Name` = 'Alameda' ORDER BY (CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)`) DESC LIMIT 1",
        "changes_information": {
            "original_value": "Orange",
            "typo_substitution": "Oranze"
        }
    },
    {
        "SQL": "SELECT department FROM major WHERE college = 'College of Science'",
        "tables": [
            "major"
        ],
        "columns": [
            "major.department",
            "major.college"
        ],
        "values": [
            {
                "table": "major",
                "column": "college",
                "value": "College of Science",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "major.college.college of humanities and social sciences"
        ],
        "original_question": "List all of the College of Humanities and Social Sciences' departments.",
        "question": "List all of the Collefe of Science' departments.",
        "original_SQL": "SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences'",
        "changes_information": {
            "original_value": "College of Science",
            "typo_substitution": "Collefe of Science"
        }
    },
    {
        "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Katowice' ORDER BY winner_rank_points DESC LIMIT 1",
        "tables": [
            "matches"
        ],
        "columns": [
            "matches.tourney_name",
            "matches.winner_rank_points",
            "matches.winner_name"
        ],
        "values": [
            {
                "table": "matches",
                "column": "tourney_name",
                "value": "Katowice",
                "condition": "="
            }
        ],
        "db_id": "wta_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "matches.tourney_name.australian open"
        ],
        "original_question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "question": "Find the name of the winner who has the highest rank points and participated in the Katowica tourney.",
        "original_SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "changes_information": {
            "original_value": "Katowice",
            "typo_substitution": "Katowica"
        }
    },
    {
        "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Katowice' ORDER BY winner_rank_points DESC LIMIT 1",
        "tables": [
            "matches"
        ],
        "columns": [
            "matches.tourney_name",
            "matches.winner_rank_points",
            "matches.winner_name"
        ],
        "values": [
            {
                "table": "matches",
                "column": "tourney_name",
                "value": "Katowice",
                "condition": "="
            }
        ],
        "db_id": "wta_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "matches.tourney_name.australian open"
        ],
        "original_question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "question": "What is the name of the winner with the most rank points who participated in the Katowica tournament?",
        "original_SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "changes_information": {
            "original_value": "Katowice",
            "typo_substitution": "Katowica"
        }
    },
    {
        "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Maya' AND T3.last_name = 'Mclean'",
        "tables": [
            "member",
            "event",
            "attendance"
        ],
        "columns": [
            "attendance.link_to_event",
            "event.event_name",
            "member.member_id",
            "member.first_name",
            "attendance.link_to_member",
            "event.event_id",
            "member.last_name"
        ],
        "values": [
            {
                "table": "member",
                "column": "first_name",
                "value": "Maya",
                "condition": "="
            },
            {
                "table": "member",
                "column": "last_name",
                "value": "Mclean",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "member.first_name.maya",
            "member.last_name.mclean"
        ],
        "original_question": "Please list the event names of all the events attended by Maya Mclean.",
        "question": "Please list the event names of all the events attended by Maya Mcleen.",
        "original_SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Maya' AND T3.last_name = 'Mclean'",
        "changes_information": {
            "original_value": "Mclean",
            "typo_substitution": "Mcleen"
        }
    },
    {
        "SQL": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Capital Plaza Museum'",
        "tables": [
            "museum"
        ],
        "columns": [
            "museum.num_of_staff",
            "museum.name",
            "museum.open_year"
        ],
        "values": [
            {
                "table": "museum",
                "column": "name",
                "value": "Capital Plaza Museum",
                "condition": "="
            }
        ],
        "db_id": "museum_visit",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "museum.name.plaza museum"
        ],
        "original_question": "What are the opening year and staff number of the museum named Plaza Museum?",
        "question": "What are the opening year and staff number of the museum named Capitel Plaza Museum?",
        "original_SQL": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
        "changes_information": {
            "original_value": "Capital Plaza Museum",
            "typo_substitution": "Capitel Plaza Museum"
        }
    },
    {
        "SQL": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Wisconsin'",
        "tables": [
            "owners",
            "dogs"
        ],
        "columns": [
            "owners.state",
            "dogs.owner_id",
            "dogs.name",
            "owners.first_name",
            "owners.owner_id"
        ],
        "values": [
            {
                "table": "owners",
                "column": "state",
                "value": "Wisconsin",
                "condition": "="
            }
        ],
        "db_id": "dog_kennels",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "owners.state.wisconsin"
        ],
        "original_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "question": "Which dogs are owned by someone who lives in Wiscansin? List the owner's first name and the dog's name.",
        "original_SQL": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "changes_information": {
            "original_value": "Wisconsin",
            "typo_substitution": "Wiscansin"
        }
    },
    {
        "SQL": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Wisconsin'",
        "tables": [
            "owners",
            "dogs"
        ],
        "columns": [
            "owners.state",
            "dogs.owner_id",
            "dogs.name",
            "owners.first_name",
            "owners.owner_id"
        ],
        "values": [
            {
                "table": "owners",
                "column": "state",
                "value": "Wisconsin",
                "condition": "="
            }
        ],
        "db_id": "dog_kennels",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "owners.state.wisconsin"
        ],
        "original_question": "Find the first names of owners living in Virginia and the names of dogs they own.",
        "question": "Find the first names of owners living in Wiscansin and the names of dogs they own.",
        "original_SQL": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "changes_information": {
            "original_value": "Wisconsin",
            "typo_substitution": "Wiscansin"
        }
    },
    {
        "SQL": "select other_details from paragraphs where paragraph_text like 'Somalia'",
        "tables": [
            "paragraphs"
        ],
        "columns": [
            "paragraphs.other_details",
            "paragraphs.paragraph_text"
        ],
        "values": [
            {
                "table": "paragraphs",
                "column": "paragraph_text",
                "value": "Somalia",
                "condition": "LIKE"
            }
        ],
        "db_id": "cre_Doc_Template_Mgt",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "paragraphs.paragraph_text.somalia"
        ],
        "original_question": "Show paragraph details for paragraph with text 'Korea ' .",
        "question": "Show paragraph details for paragraph with text 'Sonalia ' .",
        "original_SQL": "select other_details from paragraphs where paragraph_text like 'korea'",
        "changes_information": {
            "original_value": "Somalia",
            "typo_substitution": "Sonalia"
        }
    },
    {
        "SQL": "select other_details from paragraphs where paragraph_text like 'Somalia'",
        "tables": [
            "paragraphs"
        ],
        "columns": [
            "paragraphs.other_details",
            "paragraphs.paragraph_text"
        ],
        "values": [
            {
                "table": "paragraphs",
                "column": "paragraph_text",
                "value": "Somalia",
                "condition": "LIKE"
            }
        ],
        "db_id": "cre_Doc_Template_Mgt",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "paragraphs.paragraph_text.somalia"
        ],
        "original_question": "What are the details for the paragraph that includes the text 'Korea ' ?",
        "question": "What are the details for the paragraph that includes the text 'Sonalia ' ?",
        "original_SQL": "select other_details from paragraphs where paragraph_text like 'korea'",
        "changes_information": {
            "original_value": "Somalia",
            "typo_substitution": "Sonalia"
        }
    },
    {
        "SQL": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abraham Gonzalez'",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player.player_name",
            "player_attributes.player_api_id",
            "player_attributes.attacking_work_rate",
            "player.player_api_id"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Abraham Gonzalez",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "player.player_name.franco zennaro"
        ],
        "original_question": "What is the attacking work rate of the football playerr Franco Zennaro?",
        "question": "What is the attacking work rate of the football playerr Abrahim Gonzalez?",
        "original_SQL": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Franco Zennaro'",
        "changes_information": {
            "original_value": "Abraham Gonzalez",
            "typo_substitution": "Abrahim Gonzalez"
        }
    },
    {
        "SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abraham Gonzalez' AND SUBSTR(t2.`date`, 1, 10) = '2014-09-18'",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player.player_name",
            "player_attributes.player_api_id",
            "player_attributes.heading_accuracy",
            "player_attributes.date",
            "player.player_api_id"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Abraham Gonzalez",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "header's finishing rate refers to heading_accuracy; on 18/09/2014 refers to date = '2014-09-18 00:00:00';",
        "values_list": [
            "player.player_name.francois affolter"
        ],
        "original_question": "What is the football player Francois Affolter header's finishing rate on 18/09/2014?",
        "question": "What is the football player Abrahim Gonzalez header's finishing rate on 18/09/2014?",
        "original_SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Francois Affolter' AND SUBSTR(t2.`date`, 1, 10) = '2014-09-18'",
        "changes_information": {
            "original_value": "Abraham Gonzalez",
            "typo_substitution": "Abrahim Gonzalez"
        }
    },
    {
        "SQL": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abraham Gonzalez' AND strftime('%Y', t2.date) = '2011'",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player.player_name",
            "player_attributes.player_api_id",
            "player_attributes.overall_rating",
            "player_attributes.date",
            "player.player_api_id"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Abraham Gonzalez",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "in year 2011 refers to strftime('%Y', date) = '2011';",
        "values_list": [
            "player.player_name.gabriel tamas"
        ],
        "original_question": "What is the overall rating of the football player Gabriel Tamas in year 2011?",
        "question": "What is the overall rating of the football player Abrahim Gonzalez in year 2011?",
        "original_SQL": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Gabriel Tamas' AND strftime('%Y', t2.date) = '2011'",
        "changes_information": {
            "original_value": "Abraham Gonzalez",
            "typo_substitution": "Abrahim Gonzalez"
        }
    },
    {
        "SQL": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abraham Gonzalez'",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player.player_name",
            "player_attributes.player_api_id",
            "player_attributes.defensive_work_rate",
            "player.player_api_id"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Abraham Gonzalez",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "player.player_name.david wilson"
        ],
        "original_question": "What is the defensive work rate of the football player David Wilson\n?",
        "question": "What is the defensive work rate of the football player Abrahim Gonzalez\n?",
        "original_SQL": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'David Wilson'",
        "changes_information": {
            "original_value": "Abraham Gonzalez",
            "typo_substitution": "Abrahim Gonzalez"
        }
    },
    {
        "SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abraham Gonzalez'",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player.player_name",
            "player_attributes.player_api_id",
            "player_attributes.potential",
            "player.player_api_id"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Abraham Gonzalez",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "potential score refers to potential;",
        "values_list": [
            "player.player_name.aaron doran"
        ],
        "original_question": "What is Aaron Doran's potential score?",
        "question": "What is Abrahim Gonzalez's potential score?",
        "original_SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran'",
        "changes_information": {
            "original_value": "Abraham Gonzalez",
            "typo_substitution": "Abrahim Gonzalez"
        }
    },
    {
        "SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abraham Gonzalez'",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player_attributes.heading_accuracy",
            "player_attributes.player_api_id",
            "player.player_api_id",
            "player.player_name"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Abraham Gonzalez",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "player.player_name.ariel borysiuk"
        ],
        "original_question": "What's the heading accuracy of Ariel Borysiuk?",
        "question": "What's the heading accuracy of Abrahim Gonzalez?",
        "original_SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ariel Borysiuk'",
        "changes_information": {
            "original_value": "Abraham Gonzalez",
            "typo_substitution": "Abrahim Gonzalez"
        }
    },
    {
        "SQL": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abraham Gonzalez'",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player.player_name",
            "player_attributes.player_api_id",
            "player.player_api_id",
            "player_attributes.preferred_foot"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Abraham Gonzalez",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "Abdou Diallo refers to player_name = 'Abdou Diallo'; foot is preferred refers to preferred_foot",
        "values_list": [
            "player.player_name.abdou diallo"
        ],
        "original_question": "Which foot is preferred by Abdou Diallo?",
        "question": "Which foot is preferred by Abrahim Gonzalez?",
        "original_SQL": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abdou Diallo'",
        "changes_information": {
            "original_value": "Abraham Gonzalez",
            "typo_substitution": "Abrahim Gonzalez"
        }
    },
    {
        "SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2010-08-30' AND t1.player_name = 'Abraham Gonzalez'",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player.player_name",
            "player_attributes.player_api_id",
            "player_attributes.potential",
            "player_attributes.date",
            "player.player_api_id"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Abraham Gonzalez",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "Francesco Parravicini refers to player_name = 'Francesco Parravicini'; on 2010/8/30 refers to date = '2010-08-30 00:00:00'",
        "values_list": [
            "player.player_name.francesco parravicini"
        ],
        "original_question": "What was the potiential for Francesco Parravicini on 2010/8/30?",
        "question": "What was the potiential for Abrahim Gonzalez on 2010/8/30?",
        "original_SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2010-08-30' AND t1.player_name = 'Francesco Parravicini'",
        "changes_information": {
            "original_value": "Abraham Gonzalez",
            "typo_substitution": "Abrahim Gonzalez"
        }
    },
    {
        "SQL": "SELECT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2013-02-22' AND t1.player_name = 'Abraham Gonzalez'",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player.player_name",
            "player.player_fifa_api_id",
            "player_attributes.defensive_work_rate",
            "player_attributes.date",
            "player_attributes.player_fifa_api_id"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Abraham Gonzalez",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "Kevin Berigaud refers to player_name = 'Kevin Berigaud'; on 2013/2/22 refers to date = '2013-02-22 00:00:00'",
        "values_list": [
            "player.player_name.kevin berigaud"
        ],
        "original_question": "Tell the defensive work rate for Kevin Berigaud on 2013/2/22.",
        "question": "Tell the defensive work rate for Abrahim Gonzalez on 2013/2/22.",
        "original_SQL": "SELECT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2013-02-22' AND t1.player_name = 'Kevin Berigaud'",
        "changes_information": {
            "original_value": "Abraham Gonzalez",
            "typo_substitution": "Abrahim Gonzalez"
        }
    },
    {
        "SQL": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Abraham Gonzalez' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player.player_name",
            "player.player_fifa_api_id",
            "player_attributes.crossing",
            "player_attributes.date",
            "player_attributes.player_fifa_api_id"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Abraham Gonzalez",
                "condition": "="
            },
            {
                "table": "player",
                "column": "player_name",
                "value": "Kevin Constant",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)",
        "values_list": [
            "player.player_name.kevin constant",
            "player.player_name.kevin constant"
        ],
        "original_question": "When was the first time did Kevin Constant have his highest crossing score? Give the date.",
        "question": "When was the first time did Abrahim Gonzalez have his highest crossing score? Give the date.",
        "original_SQL": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Kevin Constant' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
        "changes_information": {
            "original_value": "Abraham Gonzalez",
            "typo_substitution": "Abrahim Gonzalez"
        }
    },
    {
        "SQL": "SELECT t2.name FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id WHERE t1.title  =  'Cyrano de Bergerac'",
        "tables": [
            "program",
            "director"
        ],
        "columns": [
            "program.title",
            "program.director_id",
            "director.director_id",
            "director.name"
        ],
        "values": [
            {
                "table": "program",
                "column": "title",
                "value": "Cyrano de Bergerac",
                "condition": "="
            }
        ],
        "db_id": "bbc_channels",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "program.title.cyrano_de_bergerac"
        ],
        "original_question": "What is the name of the director who is in the \"Dracula\" program?",
        "question": "What is the name of the director who is in the \"Cyrano de Bergerad\" program?",
        "original_SQL": "SELECT t2.name FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id WHERE t1.title  =  'Dracula'",
        "changes_information": {
            "original_value": "Cyrano de Bergerac",
            "typo_substitution": "Cyrano de Bergerad"
        }
    },
    {
        "SQL": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Titan Books'",
        "tables": [
            "publisher",
            "superhero"
        ],
        "columns": [
            "publisher.id",
            "superhero.publisher_id",
            "publisher.publisher_name"
        ],
        "values": [
            {
                "table": "publisher",
                "column": "publisher_name",
                "value": "Titan Books",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "name refers to superhero_name; the tallest hero refers to MAX(height_cm); published by Marvel Comics refers to publisher_name = 'Marvel Comics'",
        "values_list": [
            "publisher.publisher_name.marvel comics"
        ],
        "original_question": "Rank heroes published by Marvel Comics by their height in descending order.",
        "question": "Rank heroes published by Titen Books by their height in descending order.",
        "original_SQL": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
        "changes_information": {
            "original_value": "Titan Books",
            "typo_substitution": "Titen Books"
        }
    },
    {
        "SQL": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Titan Books' GROUP BY colour.colour",
        "tables": [
            "publisher",
            "superhero",
            "colour"
        ],
        "columns": [
            "superhero.id",
            "colour.colour",
            "publisher.publisher_name",
            "colour.id",
            "publisher.id",
            "superhero.eye_colour_id",
            "superhero.publisher_id"
        ],
        "values": [
            {
                "table": "publisher",
                "column": "publisher_name",
                "value": "Titan Books",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; most common color refers to COUNT(superhero.id) DESC;",
        "values_list": [
            "publisher.publisher_name.marvel comics"
        ],
        "original_question": "Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color.",
        "question": "Rank superheroes from Titen Books by their eye color popularity, starting with the most common color.",
        "original_SQL": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY colour.colour",
        "changes_information": {
            "original_value": "Titan Books",
            "typo_substitution": "Titen Books"
        }
    },
    {
        "SQL": "SELECT id FROM publisher WHERE publisher_name = 'Titan Books'",
        "tables": [
            "publisher"
        ],
        "columns": [
            "publisher.id",
            "publisher.publisher_name"
        ],
        "values": [
            {
                "table": "publisher",
                "column": "publisher_name",
                "value": "Titan Books",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "Star Trek is the publisher_name;",
        "values_list": [
            "publisher.publisher_name.star trek"
        ],
        "original_question": "Give the publisher ID of Star Trek.",
        "question": "Give the publisher ID of Titen Books.",
        "original_SQL": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'",
        "changes_information": {
            "original_value": "Titan Books",
            "typo_substitution": "Titen Books"
        }
    },
    {
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Titan Books' ORDER BY T1.weight_kg DESC LIMIT 1",
        "tables": [
            "publisher",
            "superhero"
        ],
        "columns": [
            "superhero.weight_kg",
            "superhero.superhero_name",
            "publisher.publisher_name",
            "publisher.id",
            "superhero.publisher_id"
        ],
        "values": [
            {
                "table": "publisher",
                "column": "publisher_name",
                "value": "Titan Books",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "heaviest refers to MAX(weight_kg); DC Comics refers to publisher_name = 'DC Comics'; superhero refers to superhero_name;",
        "values_list": [
            "publisher.publisher_name.dc comics"
        ],
        "original_question": "Identify the heaviest superhero in DC Comics.",
        "question": "Identify the heaviest superhero in Titen Books.",
        "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics' ORDER BY T1.weight_kg DESC LIMIT 1",
        "changes_information": {
            "original_value": "Titan Books",
            "typo_substitution": "Titen Books"
        }
    },
    {
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Flora Colossus'",
        "tables": [
            "race",
            "superhero"
        ],
        "columns": [
            "superhero.superhero_name",
            "race.race",
            "superhero.race_id",
            "race.id"
        ],
        "values": [
            {
                "table": "race",
                "column": "race",
                "value": "Flora Colossus",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "alien superheroes refers to race = 'Alien'; name of superhero refers to superhero_name;",
        "values_list": [
            "race.race.flora_colossus"
        ],
        "original_question": "Give the name of the alien superheroes.",
        "question": "Give the name of the Flora Colussus superheroes.",
        "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'",
        "changes_information": {
            "original_value": "Flora Colossus",
            "typo_substitution": "Flora Colussus"
        }
    },
    {
        "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Flora Colossus'",
        "tables": [
            "race",
            "superhero"
        ],
        "columns": [
            "race.race",
            "superhero.full_name",
            "superhero.race_id",
            "race.id"
        ],
        "values": [
            {
                "table": "race",
                "column": "race",
                "value": "Flora Colossus",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "Demi-God superheroes refers to race = 'Demi-God'",
        "values_list": [
            "race.race.flora_colossus"
        ],
        "original_question": "List down at least five full name of Demi-God superheroes.",
        "question": "List down at least five full name of Flora Colussus superheroes.",
        "original_SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God'",
        "changes_information": {
            "original_value": "Flora Colossus",
            "typo_substitution": "Flora Colussus"
        }
    },
    {
        "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Flora Colossus'",
        "tables": [
            "race",
            "superhero"
        ],
        "columns": [
            "race.race",
            "superhero.full_name",
            "superhero.race_id",
            "race.id"
        ],
        "values": [
            {
                "table": "race",
                "column": "race",
                "value": "Flora Colossus",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "vampire heroes refers to race = 'Vampire';",
        "values_list": [
            "race.race.flora_colossus"
        ],
        "original_question": "Provide the full names of vampire heroes.",
        "question": "Provide the full names of Flora Colussus heroes.",
        "original_SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'",
        "changes_information": {
            "original_value": "Flora Colossus",
            "typo_substitution": "Flora Colussus"
        }
    },
    {
        "SQL": "SELECT name FROM Sailors WHERE rating  >  (SELECT min(rating) FROM Sailors WHERE name  =  'Eugene')",
        "tables": [
            "sailors"
        ],
        "columns": [
            "sailors.rating",
            "sailors.name"
        ],
        "values": [
            {
                "table": "sailors",
                "column": "name",
                "value": "Eugene",
                "condition": "="
            },
            {
                "table": "",
                "column": "name",
                "value": "Luis",
                "condition": "="
            }
        ],
        "db_id": "boat_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "sailors.name.eugene",
            ".name.luis"
        ],
        "original_question": "What is the name of all sailors whose rating is higher than any sailor named Luis?",
        "question": "What is the name of all sailors whose rating is higher than any sailor named Eugena?",
        "original_SQL": "SELECT name FROM Sailors WHERE rating  >  (SELECT min(rating) FROM Sailors WHERE name  =  'Luis')",
        "changes_information": {
            "original_value": "Eugene",
            "typo_substitution": "Eugena"
        }
    },
    {
        "SQL": "SELECT name FROM Sailors WHERE rating  >  (SELECT min(rating) FROM Sailors WHERE name  =  'Eugene')",
        "tables": [
            "sailors"
        ],
        "columns": [
            "sailors.rating",
            "sailors.name"
        ],
        "values": [
            {
                "table": "sailors",
                "column": "name",
                "value": "Eugene",
                "condition": "="
            },
            {
                "table": "",
                "column": "name",
                "value": "Luis",
                "condition": "="
            }
        ],
        "db_id": "boat_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "sailors.name.eugene",
            ".name.luis"
        ],
        "original_question": "What are the sailors' names, the ones whose rating is higher than any sailor named Luis?",
        "question": "What are the sailors' names, the ones whose rating is higher than any sailor named Eugena?",
        "original_SQL": "SELECT name FROM Sailors WHERE rating  >  (SELECT min(rating) FROM Sailors WHERE name  =  'Luis')",
        "changes_information": {
            "original_value": "Eugene",
            "typo_substitution": "Eugena"
        }
    },
    {
        "SQL": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(rating) FROM Sailors WHERE name  =  'Eugene')",
        "tables": [
            "sailors"
        ],
        "columns": [
            "sailors.rating",
            "sailors.name"
        ],
        "values": [
            {
                "table": "sailors",
                "column": "name",
                "value": "Eugene",
                "condition": "="
            },
            {
                "table": "",
                "column": "name",
                "value": "Luis",
                "condition": "="
            }
        ],
        "db_id": "boat_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "sailors.name.eugene",
            ".name.luis"
        ],
        "original_question": "What is the name of all sailors whose rating is higher than all sailors named Luis?",
        "question": "What is the name of all sailors whose rating is higher than all sailors named Eugena?",
        "original_SQL": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(rating) FROM Sailors WHERE name  =  'Luis')",
        "changes_information": {
            "original_value": "Eugene",
            "typo_substitution": "Eugena"
        }
    },
    {
        "SQL": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(rating) FROM Sailors WHERE name  =  'Eugene')",
        "tables": [
            "sailors"
        ],
        "columns": [
            "sailors.rating",
            "sailors.name"
        ],
        "values": [
            {
                "table": "sailors",
                "column": "name",
                "value": "Eugene",
                "condition": "="
            },
            {
                "table": "",
                "column": "name",
                "value": "Luis",
                "condition": "="
            }
        ],
        "db_id": "boat_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "sailors.name.eugene",
            ".name.luis"
        ],
        "original_question": "What are the names of all sailors with a higher rating than every sailor named Luis?",
        "question": "What are the names of all sailors with a higher rating than every sailor named Eugena?",
        "original_SQL": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(rating) FROM Sailors WHERE name  =  'Luis')",
        "changes_information": {
            "original_value": "Eugene",
            "typo_substitution": "Eugena"
        }
    },
    {
        "SQL": "SELECT sname FROM satscores WHERE cname = 'Santa Cruz' AND sname IS NOT NULL ORDER BY NumTstTakr DESC LIMIT 1",
        "tables": [
            "satscores"
        ],
        "columns": [
            "satscores.cname",
            "satscores.numtsttakr",
            "satscores.sname"
        ],
        "values": [
            {
                "table": "satscores",
                "column": "cname",
                "value": "Santa Cruz",
                "condition": "="
            }
        ],
        "db_id": "california_schools",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "satscores.cname.contra costa"
        ],
        "original_question": "Which school in Contra Costa has the highest number of test takers?",
        "question": "Which school in Senta Cruz has the highest number of test takers?",
        "original_SQL": "SELECT sname FROM satscores WHERE cname = 'Contra Costa' AND sname IS NOT NULL ORDER BY NumTstTakr DESC LIMIT 1",
        "changes_information": {
            "original_value": "Santa Cruz",
            "typo_substitution": "Senta Cruz"
        }
    },
    {
        "SQL": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Douglas'",
        "tables": [
            "frpm",
            "schools"
        ],
        "columns": [
            "frpm.district code",
            "frpm.cdscode",
            "frpm.free meal count (k-12)",
            "schools.admfname1",
            "schools.cdscode",
            "frpm.enrollment (k-12)"
        ],
        "values": [
            {
                "table": "schools",
                "column": "admfname1",
                "value": "Douglas",
                "condition": "="
            }
        ],
        "db_id": "california_schools",
        "source": "bird_dev",
        "evidence": "Percent (%) Eligible Free (K-12) = `Free Meal Count (K-12)` / `Enrollment (K-12)` * 100%",
        "values_list": [
            "schools.admfname1.douglas"
        ],
        "original_question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Alusine. List the district code of the school.",
        "question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Dougles. List the district code of the school.",
        "original_SQL": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Alusine'",
        "changes_information": {
            "original_value": "Douglas",
            "typo_substitution": "Dougles"
        }
    },
    {
        "SQL": "SELECT GSserved FROM schools WHERE City = 'Valley Springs' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1",
        "tables": [
            "schools"
        ],
        "columns": [
            "schools.city",
            "schools.gsserved"
        ],
        "values": [
            {
                "table": "schools",
                "column": "city",
                "value": "Valley Springs",
                "condition": "="
            }
        ],
        "db_id": "california_schools",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "schools.city.valley_springs"
        ],
        "original_question": "What is the most common type of grade span served in the city of Adelanto?",
        "question": "What is the most common type of grade span served in the city of Vallet Springs?",
        "original_SQL": "SELECT GSserved FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1",
        "changes_information": {
            "original_value": "Valley Springs",
            "typo_substitution": "Vallet Springs"
        }
    },
    {
        "SQL": "SELECT name ,  original_artist FROM songs WHERE english_translation  =  'Dance from Moldova'",
        "tables": [
            "songs"
        ],
        "columns": [
            "songs.english_translation",
            "songs.original_artist",
            "songs.name"
        ],
        "values": [
            {
                "table": "songs",
                "column": "english_translation",
                "value": "Dance from Moldova",
                "condition": "="
            }
        ],
        "db_id": "sing_contest",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "songs.english_translation.all the streets of love"
        ],
        "original_question": "What are the names and original artists of the song whose English translation is 'All the streets of love'?",
        "question": "What are the names and original artists of the song whose English translation is 'Dance from Moldava'?",
        "original_SQL": "SELECT name ,  original_artist FROM songs WHERE english_translation  =  'All the streets of love'",
        "changes_information": {
            "original_value": "Dance from Moldova",
            "typo_substitution": "Dance from Moldava"
        }
    },
    {
        "SQL": "SELECT name ,  parking FROM store WHERE neighborhood  =  'Valley Village'",
        "tables": [
            "store"
        ],
        "columns": [
            "store.parking",
            "store.neighborhood",
            "store.name"
        ],
        "values": [
            {
                "table": "store",
                "column": "neighborhood",
                "value": "Valley Village",
                "condition": "="
            }
        ],
        "db_id": "headphone_store",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "store.neighborhood.valley_village"
        ],
        "original_question": "List name and parking info for the stores in the Tarzana neighborhood.",
        "question": "List name and parking info for the stores in the Vallet Village neighborhood.",
        "original_SQL": "SELECT name ,  parking FROM store WHERE neighborhood  =  'Tarzana'",
        "changes_information": {
            "original_value": "Valley Village",
            "typo_substitution": "Vallet Village"
        }
    },
    {
        "SQL": "SELECT name ,  parking FROM store WHERE neighborhood  =  'Valley Village'",
        "tables": [
            "store"
        ],
        "columns": [
            "store.parking",
            "store.neighborhood",
            "store.name"
        ],
        "values": [
            {
                "table": "store",
                "column": "neighborhood",
                "value": "Valley Village",
                "condition": "="
            }
        ],
        "db_id": "headphone_store",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "store.neighborhood.valley_village"
        ],
        "original_question": "Which stores are located in the \"Tarzana\" neighborhood? Return their names and parking information.",
        "question": "Which stores are located in the \"Vallet Village\" neighborhood? Return their names and parking information.",
        "original_SQL": "SELECT name ,  parking FROM store WHERE neighborhood  =  'Tarzana'",
        "changes_information": {
            "original_value": "Valley Village",
            "typo_substitution": "Vallet Village"
        }
    },
    {
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Bernhard Baker'",
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "colour.id",
            "superhero.eye_colour_id",
            "superhero.full_name",
            "colour.colour"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "full_name",
                "value": "Bernhard Baker",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Abraham Sapien is the full name of superhero;",
        "values_list": [
            "superhero.full_name.abraham sapien"
        ],
        "original_question": "What is the eyes colour of Abraham Sapien?",
        "question": "What is the eyes colour of Bernhard Bazer?",
        "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraham Sapien'",
        "changes_information": {
            "original_value": "Bernhard Baker",
            "typo_substitution": "Bernhard Bazer"
        }
    },
    {
        "SQL": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Bernhard Baker'",
        "tables": [
            "race",
            "superhero"
        ],
        "columns": [
            "race.id",
            "superhero.superhero_name",
            "superhero.full_name",
            "superhero.race_id",
            "race.race"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "full_name",
                "value": "Bernhard Baker",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "hero name refers to superhero_name; Charles Chandler is the full name of superhero;",
        "values_list": [
            "superhero.full_name.charles chandler"
        ],
        "original_question": "Provide the hero name and race of Charles Chandler.",
        "question": "Provide the hero name and race of Bernhard Bazer.",
        "original_SQL": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Charles Chandler'",
        "changes_information": {
            "original_value": "Bernhard Baker",
            "typo_substitution": "Bernhard Bazer"
        }
    },
    {
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Bernhard Baker'",
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "hero_power.power_id",
            "superhero.id",
            "superpower.id",
            "superhero.full_name",
            "hero_power.hero_id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "full_name",
                "value": "Bernhard Baker",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "Hunter Zolomon is the full name of superhero; list the powers refers to power_name;",
        "values_list": [
            "superhero.full_name.hunter zolomon"
        ],
        "original_question": "List the powers of Hunter Zolomon.",
        "question": "List the powers of Bernhard Bazer.",
        "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Hunter Zolomon'",
        "changes_information": {
            "original_value": "Bernhard Baker",
            "typo_substitution": "Bernhard Bazer"
        }
    },
    {
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Bernhard Baker'",
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "colour.id",
            "superhero.eye_colour_id",
            "superhero.full_name",
            "colour.colour"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "full_name",
                "value": "Bernhard Baker",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Karen Beecher-Duncan is the full name of superhero;",
        "values_list": [
            "superhero.full_name.karen beecher-duncan"
        ],
        "original_question": "Provide the eye colour of the superhero who has Karen Beecher-Duncan as their full name.",
        "question": "Provide the eye colour of the superhero who has Bernhard Bazer as their full name.",
        "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan'",
        "changes_information": {
            "original_value": "Bernhard Baker",
            "typo_substitution": "Bernhard Bazer"
        }
    },
    {
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Bernhard Baker'",
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "hero_power.power_id",
            "superhero.id",
            "superpower.id",
            "superhero.full_name",
            "hero_power.hero_id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "full_name",
                "value": "Bernhard Baker",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "superpowers refers to power_name; Helen Parr is the full name of superhero;",
        "values_list": [
            "superhero.full_name.helen parr"
        ],
        "original_question": "What is the superpowers of the superhero has Helen Parr as their full name?",
        "question": "What is the superpowers of the superhero has Bernhard Bazer as their full name?",
        "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Helen Parr'",
        "changes_information": {
            "original_value": "Bernhard Baker",
            "typo_substitution": "Bernhard Bazer"
        }
    },
    {
        "SQL": "SELECT superhero_name FROM superhero WHERE full_name = 'Bernhard Baker'",
        "tables": [
            "superhero"
        ],
        "columns": [
            "superhero.superhero_name",
            "superhero.full_name"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "full_name",
                "value": "Bernhard Baker",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "name the superhero refers to superhero_name; Charles Chandler is the full name of superhero;",
        "values_list": [
            "superhero.full_name.charles chandler"
        ],
        "original_question": "Name the superhero, otherwise known as Charles Chandler.",
        "question": "Name the superhero, otherwise known as Bernhard Bazer.",
        "original_SQL": "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'",
        "changes_information": {
            "original_value": "Bernhard Baker",
            "typo_substitution": "Bernhard Bazer"
        }
    },
    {
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Azazel'",
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "hero_power.power_id",
            "superhero.id",
            "superpower.id",
            "superhero.superhero_name",
            "hero_power.hero_id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Azazel",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "3-D Man refers to superhero_name = '3-D Man'; superpowers refers to power_name",
        "values_list": [
            "superhero.superhero_name.3-d man"
        ],
        "original_question": "Please list all the superpowers of 3-D Man.",
        "question": "Please list all the superpowers of Azazei.",
        "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = '3-D Man'",
        "changes_information": {
            "original_value": "Azazel",
            "typo_substitution": "Azazei"
        }
    },
    {
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Azazel'",
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "colour.id",
            "superhero.superhero_name",
            "superhero.skin_colour_id",
            "colour.colour"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Azazel",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "Apocalypse refers to superhero_name = 'Apocalypse'; colour of skin refers to colour where skin_colour_id = colour.id",
        "values_list": [
            "superhero.superhero_name.azazel"
        ],
        "original_question": "What is the colour of Apocalypse's skin?",
        "question": "What is the colour of Azazei's skin?",
        "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse'",
        "changes_information": {
            "original_value": "Azazel",
            "typo_substitution": "Azazei"
        }
    },
    {
        "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Azazel'",
        "tables": [
            "publisher",
            "superhero"
        ],
        "columns": [
            "superhero.superhero_name",
            "publisher.id",
            "superhero.publisher_id",
            "publisher.publisher_name"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Azazel",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "the publisher refers to publisher_name; Sauron refers to superhero_name = 'Sauron'",
        "values_list": [
            "superhero.superhero_name.azazel"
        ],
        "original_question": "Who is the publisher of Sauron?",
        "question": "Who is the publisher of Azazei?",
        "original_SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron'",
        "changes_information": {
            "original_value": "Azazel",
            "typo_substitution": "Azazei"
        }
    },
    {
        "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Azazel'",
        "tables": [
            "publisher",
            "superhero"
        ],
        "columns": [
            "superhero.superhero_name",
            "publisher.id",
            "superhero.publisher_id",
            "publisher.publisher_name"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Azazel",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "Blue Beetle II refers to superhero_name = 'Blue Beetle II'",
        "values_list": [
            "superhero.superhero_name.blue beetle ii"
        ],
        "original_question": "What is the publisher's name of Blue Beetle II?",
        "question": "What is the publisher's name of Azazei?",
        "original_SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Blue Beetle II'",
        "changes_information": {
            "original_value": "Azazel",
            "typo_substitution": "Azazei"
        }
    },
    {
        "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Azazel'",
        "tables": [
            "race",
            "superhero"
        ],
        "columns": [
            "superhero.superhero_name",
            "superhero.race_id",
            "race.race",
            "race.id"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Azazel",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "Copycat is the superhero_name;",
        "values_list": [
            "superhero.superhero_name.azazel"
        ],
        "original_question": "What is Copycat's race?",
        "question": "What is Azazei's race?",
        "original_SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'",
        "changes_information": {
            "original_value": "Azazel",
            "typo_substitution": "Azazei"
        }
    },
    {
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Azazel'",
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "hero_power.power_id",
            "superhero.id",
            "superpower.id",
            "superhero.superhero_name",
            "hero_power.hero_id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Azazel",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "superpowers refers to power_name; Deathlok refers to superhero_name = 'Deathlok'",
        "values_list": [
            "superhero.superhero_name.azazel"
        ],
        "original_question": "Provide the superpowers of the superhero called Deathlok.",
        "question": "Provide the superpowers of the superhero called Azazei.",
        "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Deathlok'",
        "changes_information": {
            "original_value": "Azazel",
            "typo_substitution": "Azazei"
        }
    },
    {
        "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Azazel'",
        "tables": [
            "hero_attribute",
            "superhero"
        ],
        "columns": [
            "superhero.superhero_name",
            "hero_attribute.hero_id",
            "hero_attribute.attribute_value",
            "superhero.id"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Azazel",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "Abomination refers to superhero_name = 'Abomination';",
        "values_list": [
            "superhero.superhero_name.azazel"
        ],
        "original_question": "Indicate the attribute value of superhero Abomination.",
        "question": "Indicate the attribute value of superhero Azazei.",
        "original_SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Abomination'",
        "changes_information": {
            "original_value": "Azazel",
            "typo_substitution": "Azazei"
        }
    },
    {
        "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Azazel'",
        "tables": [
            "race",
            "superhero"
        ],
        "columns": [
            "superhero.superhero_name",
            "superhero.race_id",
            "race.race",
            "race.id"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Azazel",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "group refers to race; A-Bomb refers to superhero_name = 'A-Bomb';",
        "values_list": [
            "superhero.superhero_name.azazel"
        ],
        "original_question": "Which group does superhero A-Bomb belong to?",
        "question": "Which group does superhero Azazei belong to?",
        "original_SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
        "changes_information": {
            "original_value": "Azazel",
            "typo_substitution": "Azazei"
        }
    },
    {
        "SQL": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Azazel'",
        "tables": [
            "superhero",
            "gender"
        ],
        "columns": [
            "gender.gender",
            "gender.id",
            "superhero.gender_id",
            "superhero.superhero_name"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Azazel",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "Agent 13 hero refers to superhero_name = 'Agent 13';",
        "values_list": [
            "superhero.superhero_name.agent 13"
        ],
        "original_question": "What is the gender of Agent 13 hero?",
        "question": "What is the gender of Azazei hero?",
        "original_SQL": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent 13'",
        "changes_information": {
            "original_value": "Azazel",
            "typo_substitution": "Azazei"
        }
    },
    {
        "SQL": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Azazel'",
        "tables": [
            "race",
            "superhero",
            "alignment"
        ],
        "columns": [
            "alignment.alignment",
            "superhero.alignment_id",
            "race.id",
            "superhero.superhero_name",
            "superhero.race_id",
            "race.race",
            "alignment.id"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Azazel",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "Cameron Hicks refers to superhero_name = 'Cameron Hicks';",
        "values_list": [
            "superhero.superhero_name.cameron hicks"
        ],
        "original_question": "What are the race and alignment of Cameron Hicks?",
        "question": "What are the race and alignment of Azazei?",
        "original_SQL": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Cameron Hicks'",
        "changes_information": {
            "original_value": "Azazel",
            "typo_substitution": "Azazei"
        }
    },
    {
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Azazel'",
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "hero_power.power_id",
            "superhero.id",
            "superpower.id",
            "superhero.superhero_name",
            "hero_power.hero_id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Azazel",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "Abomination refers to superhero_name = 'Abomination'; superpower refers to power_name;",
        "values_list": [
            "superhero.superhero_name.azazel"
        ],
        "original_question": "What is Abomination's superpower?",
        "question": "What is Azazei's superpower?",
        "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Abomination'",
        "changes_information": {
            "original_value": "Azazel",
            "typo_substitution": "Azazei"
        }
    },
    {
        "SQL": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Azazel'",
        "tables": [
            "hero_attribute",
            "superhero",
            "attribute"
        ],
        "columns": [
            "hero_attribute.attribute_value",
            "superhero.id",
            "superhero.superhero_name",
            "attribute.id",
            "hero_attribute.hero_id",
            "attribute.attribute_name",
            "hero_attribute.attribute_id"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Azazel",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "3-D Man is the superhero_name. attributes refers to attribute_name; values refers to attribute_value;",
        "values_list": [
            "superhero.superhero_name.3-d man"
        ],
        "original_question": "State all of 3-D Man's attributes along with their values.",
        "question": "State all of Azazei's attributes along with their values.",
        "original_SQL": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = '3-D Man'",
        "changes_information": {
            "original_value": "Azazel",
            "typo_substitution": "Azazei"
        }
    },
    {
        "SQL": "SELECT T4.alignment, T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'Azazel'",
        "tables": [
            "superhero",
            "hero_power",
            "superpower",
            "alignment"
        ],
        "columns": [
            "alignment.alignment",
            "superhero.alignment_id",
            "superhero.id",
            "hero_power.power_id",
            "superpower.id",
            "superhero.superhero_name",
            "hero_power.hero_id",
            "alignment.id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Azazel",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "superpowers refers to power_name;",
        "values_list": [
            "superhero.superhero_name.atom iv"
        ],
        "original_question": "Give the alignment and superpowers of the superhero named Atom IV.",
        "question": "Give the alignment and superpowers of the superhero named Azazei.",
        "original_SQL": "SELECT T4.alignment, T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'Atom IV'",
        "changes_information": {
            "original_value": "Azazel",
            "typo_substitution": "Azazei"
        }
    },
    {
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Azazel'",
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "hero_power.power_id",
            "superhero.id",
            "superpower.id",
            "superhero.superhero_name",
            "hero_power.hero_id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Azazel",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "Ajax refers to superhero_name = 'Ajax'; superpowers refers to power_name;",
        "values_list": [
            "superhero.superhero_name.azazel"
        ],
        "original_question": "List down Ajax's superpowers.",
        "question": "List down Azazei's superpowers.",
        "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Ajax'",
        "changes_information": {
            "original_value": "Azazel",
            "typo_substitution": "Azazei"
        }
    },
    {
        "SQL": "SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Azazel' ORDER BY T2.attribute_value ASC LIMIT 1",
        "tables": [
            "hero_attribute",
            "superhero",
            "attribute"
        ],
        "columns": [
            "hero_attribute.attribute_value",
            "superhero.id",
            "superhero.superhero_name",
            "attribute.id",
            "hero_attribute.hero_id",
            "attribute.attribute_name",
            "hero_attribute.attribute_id"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Azazel",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "weakest attribute refers to attribute_name WHERE MIN(attribute_value); Black Panther refers to superhero_name = 'Black Panther';",
        "values_list": [
            "superhero.superhero_name.black panther"
        ],
        "original_question": "Identify the weakest attribute of the Black Panther.",
        "question": "Identify the weakest attribute of the Azazei.",
        "original_SQL": "SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Black Panther' ORDER BY T2.attribute_value ASC LIMIT 1",
        "changes_information": {
            "original_value": "Azazel",
            "typo_substitution": "Azazei"
        }
    },
    {
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Azazel'",
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "colour.id",
            "superhero.eye_colour_id",
            "superhero.superhero_name",
            "colour.colour"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Azazel",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "Abomination refers to superhero_name = 'Abomination'; eye colour refers to colour.colour where eye_colour_id = colour.id;",
        "values_list": [
            "superhero.superhero_name.azazel"
        ],
        "original_question": "What is Abomination's eye colour?",
        "question": "What is Azazei's eye colour?",
        "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Abomination'",
        "changes_information": {
            "original_value": "Azazel",
            "typo_substitution": "Azazei"
        }
    },
    {
        "SQL": "SELECT full_name FROM superhero WHERE superhero_name = 'Azazel'",
        "tables": [
            "superhero"
        ],
        "columns": [
            "superhero.superhero_name",
            "superhero.full_name"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Azazel",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "superhero.superhero_name.azazel"
        ],
        "original_question": "Provide the full name of the superhero named Alien.",
        "question": "Provide the full name of the superhero named Azazei.",
        "original_SQL": "SELECT full_name FROM superhero WHERE superhero_name = 'Alien'",
        "changes_information": {
            "original_value": "Azazel",
            "typo_substitution": "Azazei"
        }
    },
    {
        "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Azazel'",
        "tables": [
            "hero_attribute",
            "superhero"
        ],
        "columns": [
            "superhero.superhero_name",
            "hero_attribute.hero_id",
            "hero_attribute.attribute_value",
            "superhero.id"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Azazel",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "superhero.superhero_name.azazel"
        ],
        "original_question": "List the attribute value of the superhero named Aquababy.",
        "question": "List the attribute value of the superhero named Azazei.",
        "original_SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Aquababy'",
        "changes_information": {
            "original_value": "Azazel",
            "typo_substitution": "Azazei"
        }
    },
    {
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Azazel'",
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "colour.id",
            "superhero.eye_colour_id",
            "superhero.superhero_name",
            "colour.colour"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Azazel",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Blackwulf refers to superhero_name = 'Blackwulf';",
        "values_list": [
            "superhero.superhero_name.azazel"
        ],
        "original_question": "Give the eye colour of Blackwulf.",
        "question": "Give the eye colour of Azazei.",
        "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Blackwulf'",
        "changes_information": {
            "original_value": "Azazel",
            "typo_substitution": "Azazei"
        }
    },
    {
        "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Elemental Transmogrification' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
        "tables": [
            "publisher",
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "superhero.id",
            "hero_power.power_id",
            "superpower.id",
            "publisher.publisher_name",
            "publisher.id",
            "hero_power.hero_id",
            "superpower.power_name",
            "superhero.publisher_id"
        ],
        "values": [
            {
                "table": "superpower",
                "column": "power_name",
                "value": "Elemental Transmogrification",
                "condition": "="
            },
            {
                "table": "publisher",
                "column": "publisher_name",
                "value": "Marvel Comics",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
        "values_list": [
            "superpower.power_name.super strength",
            "publisher.publisher_name.marvel comics"
        ],
        "original_question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
        "question": "List the superheroes from Marvel Comics who have the super power of 'Elementel Transmogrification'.",
        "original_SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
        "changes_information": {
            "original_value": "Elemental Transmogrification",
            "typo_substitution": "Elementel Transmogrification"
        }
    },
    {
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Elemental Transmogrification'",
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "hero_power.power_id",
            "superhero.id",
            "superpower.id",
            "superhero.superhero_name",
            "hero_power.hero_id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "superpower",
                "column": "power_name",
                "value": "Elemental Transmogrification",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
        "values_list": [
            "superpower.power_name.death touch"
        ],
        "original_question": "What are the names of the superheroes with the power of death touch?",
        "question": "What are the names of the superheroes with the power of Elementel Transmogrification?",
        "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
        "changes_information": {
            "original_value": "Elemental Transmogrification",
            "typo_substitution": "Elementel Transmogrification"
        }
    },
    {
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Elemental Transmogrification'",
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "hero_power.power_id",
            "superhero.id",
            "superpower.id",
            "superhero.superhero_name",
            "hero_power.hero_id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "superpower",
                "column": "power_name",
                "value": "Elemental Transmogrification",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
        "values_list": [
            "superpower.power_name.elemental_transmogrification"
        ],
        "original_question": "List the name of superheroes with flight power.",
        "question": "List the name of superheroes with Elementel Transmogrification power.",
        "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'",
        "changes_information": {
            "original_value": "Elemental Transmogrification",
            "typo_substitution": "Elementel Transmogrification"
        }
    },
    {
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Elemental Transmogrification'",
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "hero_power.power_id",
            "superhero.id",
            "superpower.id",
            "superhero.superhero_name",
            "hero_power.hero_id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "superpower",
                "column": "power_name",
                "value": "Elemental Transmogrification",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "adaptation power refers to power_name = 'Adaptation';",
        "values_list": [
            "superpower.power_name.elemental_transmogrification"
        ],
        "original_question": "Provide superheroes' names who have the adaptation power.",
        "question": "Provide superheroes' names who have the Elementel Transmogrification power.",
        "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'",
        "changes_information": {
            "original_value": "Elemental Transmogrification",
            "typo_substitution": "Elementel Transmogrification"
        }
    },
    {
        "SQL": "SELECT id FROM superpower WHERE power_name = 'Elemental Transmogrification'",
        "tables": [
            "superpower"
        ],
        "columns": [
            "superpower.power_name",
            "superpower.id"
        ],
        "values": [
            {
                "table": "superpower",
                "column": "power_name",
                "value": "Elemental Transmogrification",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
        "values_list": [
            "superpower.power_name.elemental_transmogrification"
        ],
        "original_question": "What is the power ID of cryokinesis?",
        "question": "What is the power ID of Elementel Transmogrification?",
        "original_SQL": "SELECT id FROM superpower WHERE power_name = 'Cryokinesis'",
        "changes_information": {
            "original_value": "Elemental Transmogrification",
            "typo_substitution": "Elementel Transmogrification"
        }
    },
    {
        "SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Elemental Transmogrification'",
        "tables": [
            "superhero",
            "gender",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "gender.gender",
            "hero_power.power_id",
            "superhero.id",
            "superpower.id",
            "gender.id",
            "superhero.gender_id",
            "hero_power.hero_id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "superpower",
                "column": "power_name",
                "value": "Elemental Transmogrification",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "ability of Phoenix Force refers to power_name = 'Phoenix Force';",
        "values_list": [
            "superpower.power_name.phoenix force"
        ],
        "original_question": "Identify the gender of the superhero who has the ability of Phoenix Force.",
        "question": "Identify the gender of the superhero who has the ability of Elementel Transmogrification.",
        "original_SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force'",
        "changes_information": {
            "original_value": "Elemental Transmogrification",
            "typo_substitution": "Elementel Transmogrification"
        }
    },
    {
        "SQL": "SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.ExcerptPostId WHERE T1.TagName = 'independence'",
        "tables": [
            "tags",
            "posts"
        ],
        "columns": [
            "posts.id",
            "tags.tagname",
            "posts.body",
            "tags.excerptpostid"
        ],
        "values": [
            {
                "table": "tags",
                "column": "tagname",
                "value": "independence",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"bayesian\" is the TagName; excerpt from refers to ExcerptPostId",
        "values_list": [
            "tags.tagname.independence"
        ],
        "original_question": "From which post is the tag \"bayesian\" excerpted from? Please give the body of the post.",
        "question": "From which post is the tag \"independance\" excerpted from? Please give the body of the post.",
        "original_SQL": "SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.ExcerptPostId WHERE T1.TagName = 'bayesian'",
        "changes_information": {
            "original_value": "independence",
            "typo_substitution": "independance"
        }
    },
    {
        "SQL": "SELECT T3.DisplayName, T3.Location FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id INNER JOIN users AS T3 ON T3.Id = T2.OwnerUserId WHERE T1.TagName = 'independence'",
        "tables": [
            "tags",
            "users",
            "posts"
        ],
        "columns": [
            "posts.id",
            "tags.excerptpostid",
            "posts.owneruserid",
            "users.location",
            "users.id",
            "users.displayname",
            "tags.tagname"
        ],
        "values": [
            {
                "table": "tags",
                "column": "tagname",
                "value": "independence",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "user who owned the excerpt post with hypothesis-testing tag refers to OwnerUserId WHERE TagName = 'hypothesis-testing';",
        "values_list": [
            "tags.tagname.independence"
        ],
        "original_question": "Mention the display name and location of the user who owned the excerpt post with hypothesis-testing tag.",
        "question": "Mention the display name and location of the user who owned the excerpt post with independance tag.",
        "original_SQL": "SELECT T3.DisplayName, T3.Location FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id INNER JOIN users AS T3 ON T3.Id = T2.OwnerUserId WHERE T1.TagName = 'hypothesis-testing'",
        "changes_information": {
            "original_value": "independence",
            "typo_substitution": "independance"
        }
    },
    {
        "SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'independence'",
        "tables": [
            "tags"
        ],
        "columns": [
            "tags.tagname",
            "tags.wikipostid",
            "tags.excerptpostid"
        ],
        "values": [
            {
                "table": "tags",
                "column": "tagname",
                "value": "independence",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "tag named sample refers to TagName = 'sample';",
        "values_list": [
            "tags.tagname.independence"
        ],
        "original_question": "What is the excerpt post ID and wiki post ID of the tag named sample?",
        "question": "What is the excerpt post ID and wiki post ID of the tag named independance?",
        "original_SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'",
        "changes_information": {
            "original_value": "independence",
            "typo_substitution": "independance"
        }
    },
    {
        "SQL": "SELECT team_short_name FROM Team WHERE team_long_name = 'AC Ajaccio'",
        "tables": [
            "team"
        ],
        "columns": [
            "team.team_short_name",
            "team.team_long_name"
        ],
        "values": [
            {
                "table": "team",
                "column": "team_long_name",
                "value": "AC Ajaccio",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "short name of the football team refers to team_short_name; Queens Park Rangers refers to team_long_name = 'Queens Park Rangers';",
        "values_list": [
            "team.team_long_name.queens park rangers"
        ],
        "original_question": "What is the short name of the football team Queens Park Rangers?",
        "question": "What is the short name of the football team AC Ajacclo?",
        "original_SQL": "SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers'",
        "changes_information": {
            "original_value": "AC Ajaccio",
            "typo_substitution": "AC Ajacclo"
        }
    },
    {
        "SQL": "SELECT DISTINCT t2.buildUpPlayPositioningClass FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.team_long_name = 'AC Ajaccio'",
        "tables": [
            "team_attributes",
            "team"
        ],
        "columns": [
            "team_attributes.team_fifa_api_id",
            "team.team_fifa_api_id",
            "team_attributes.buildupplaypositioningclass",
            "team.team_long_name"
        ],
        "values": [
            {
                "table": "team",
                "column": "team_long_name",
                "value": "AC Ajaccio",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "ADO Den Haag refers to team_long_name = 'ADO Den Haag'; freedom of movement in the 1st two thirds of the pitch refers to buildUpPlayPositioningClass;",
        "values_list": [
            "team.team_long_name.ado den haag"
        ],
        "original_question": "What is the ADO Den Haag team freedom of movement in the 1st two thirds of the pitch?",
        "question": "What is the AC Ajacclo team freedom of movement in the 1st two thirds of the pitch?",
        "original_SQL": "SELECT DISTINCT t2.buildUpPlayPositioningClass FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.team_long_name = 'ADO Den Haag'",
        "changes_information": {
            "original_value": "AC Ajaccio",
            "typo_substitution": "AC Ajacclo"
        }
    },
    {
        "SQL": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'AC Ajaccio' ORDER BY t2.chanceCreationPassing DESC LIMIT 1",
        "tables": [
            "team_attributes",
            "team"
        ],
        "columns": [
            "team.team_api_id",
            "team_attributes.chancecreationpassing",
            "team_attributes.team_api_id",
            "team_attributes.chancecreationpassingclass",
            "team.team_long_name"
        ],
        "values": [
            {
                "table": "team",
                "column": "team_long_name",
                "value": "AC Ajaccio",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "Ajax's refers to team_long_name = 'Ajax'; chance creation passing score refers to MAX(chanceCreationPassing); classified refer to chanceCreationPassingClass",
        "values_list": [
            "team.team_long_name.ac_ajaccio"
        ],
        "original_question": "What is Ajax's highest chance creation passing score and what is it classified as?",
        "question": "What is AC Ajacclo's highest chance creation passing score and what is it classified as?",
        "original_SQL": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Ajax' ORDER BY t2.chanceCreationPassing DESC LIMIT 1",
        "changes_information": {
            "original_value": "AC Ajaccio",
            "typo_substitution": "AC Ajacclo"
        }
    },
    {
        "SQL": "SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'AC Ajaccio' AND SUBSTR(t2.`date`, 1, 10) = '2011-02-22'",
        "tables": [
            "team_attributes",
            "team"
        ],
        "columns": [
            "team.team_api_id",
            "team_attributes.date",
            "team_attributes.team_api_id",
            "team_attributes.buildupplayspeedclass",
            "team.team_long_name"
        ],
        "values": [
            {
                "table": "team",
                "column": "team_long_name",
                "value": "AC Ajaccio",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "\"Willem II\" refers to team_long_name = 'Willem II'; on 2011/2/22 refers to date = '2012-02-22'",
        "values_list": [
            "team.team_long_name.willem ii"
        ],
        "original_question": "What was the build up play speed class for \"Willem II\" on 2011/2/22?",
        "question": "What was the build up play speed class for \"AC Ajacclo\" on 2011/2/22?",
        "original_SQL": "SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Willem II' AND SUBSTR(t2.`date`, 1, 10) = '2011-02-22'",
        "changes_information": {
            "original_value": "AC Ajaccio",
            "typo_substitution": "AC Ajacclo"
        }
    },
    {
        "SQL": "SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'AC Ajaccio' AND SUBSTR(t2.`date`, 1, 10) = '2013-09-20'",
        "tables": [
            "team_attributes",
            "team"
        ],
        "columns": [
            "team.team_api_id",
            "team_attributes.date",
            "team_attributes.team_api_id",
            "team_attributes.chancecreationpassingclass",
            "team.team_long_name"
        ],
        "values": [
            {
                "table": "team",
                "column": "team_long_name",
                "value": "AC Ajaccio",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "\"PEC Zwolle\" refers to team_long_name = 'PEC Zwolle'; on 2013/9/20 refers to date = '2013-09-20 00:00:00'",
        "values_list": [
            "team.team_long_name.pec zwolle"
        ],
        "original_question": "State the chance creation passing class for \"PEC Zwolle\" on 2013/9/20.",
        "question": "State the chance creation passing class for \"AC Ajacclo\" on 2013/9/20.",
        "original_SQL": "SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'PEC Zwolle' AND SUBSTR(t2.`date`, 1, 10) = '2013-09-20'",
        "changes_information": {
            "original_value": "AC Ajaccio",
            "typo_substitution": "AC Ajacclo"
        }
    },
    {
        "SQL": "SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'AC Ajaccio' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'",
        "tables": [
            "team_attributes",
            "team"
        ],
        "columns": [
            "team.team_api_id",
            "team_attributes.date",
            "team_attributes.team_api_id",
            "team.team_long_name",
            "team_attributes.chancecreationcrossingclass"
        ],
        "values": [
            {
                "table": "team",
                "column": "team_long_name",
                "value": "AC Ajaccio",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "\"Hull City\" refers to team_long_name = 'Hull City'; on 2010/2/22 refers to date = '2010-02-22 00:00:00'",
        "values_list": [
            "team.team_long_name.hull city"
        ],
        "original_question": "What was the chance creation crossing class for \"Hull City\" on 2010/2/22?",
        "question": "What was the chance creation crossing class for \"AC Ajacclo\" on 2010/2/22?",
        "original_SQL": "SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hull City' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'",
        "changes_information": {
            "original_value": "AC Ajaccio",
            "typo_substitution": "AC Ajacclo"
        }
    },
    {
        "SQL": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'AC Ajaccio'",
        "tables": [
            "team_attributes",
            "team"
        ],
        "columns": [
            "team.team_api_id",
            "team.team_long_name",
            "team_attributes.buildupplayspeedclass",
            "team_attributes.team_api_id"
        ],
        "values": [
            {
                "table": "team",
                "column": "team_long_name",
                "value": "AC Ajaccio",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "KSV Cercle Brugge refers to team_long_name = 'KSV Cercle Brugge'; speed class refers to buildUpPlaySpeedClass",
        "values_list": [
            "team.team_long_name.ksv cercle brugge"
        ],
        "original_question": "Does the KSV Cercle Brugge team have a slow, balanced or fast speed class?",
        "question": "Does the AC Ajacclo team have a slow, balanced or fast speed class?",
        "original_SQL": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'KSV Cercle Brugge'",
        "changes_information": {
            "original_value": "AC Ajaccio",
            "typo_substitution": "AC Ajacclo"
        }
    },
    {
        "SQL": "SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Aurora University'",
        "tables": [
            "major",
            "major_ranking",
            "university"
        ],
        "columns": [
            "major_ranking.university_id",
            "major_ranking.major_id",
            "major_ranking.rank",
            "university.university_name",
            "major.major_id",
            "major.major_name",
            "university.university_id"
        ],
        "values": [
            {
                "table": "university",
                "column": "university_name",
                "value": "Aurora University",
                "condition": "="
            }
        ],
        "db_id": "university_rank",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "university.university_name.augustana college"
        ],
        "original_question": "Show all majors and major ranks for the university with name Augustana College.",
        "question": "Show all majors and major ranks for the university with name Auroro University.",
        "original_SQL": "SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Augustana College'",
        "changes_information": {
            "original_value": "Aurora University",
            "typo_substitution": "Auroro University"
        }
    },
    {
        "SQL": "SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Aurora University'",
        "tables": [
            "major",
            "major_ranking",
            "university"
        ],
        "columns": [
            "major_ranking.university_id",
            "major_ranking.major_id",
            "major_ranking.rank",
            "university.university_name",
            "major.major_id",
            "major.major_name",
            "university.university_id"
        ],
        "values": [
            {
                "table": "university",
                "column": "university_name",
                "value": "Aurora University",
                "condition": "="
            }
        ],
        "db_id": "university_rank",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "university.university_name.augustana college"
        ],
        "original_question": "What are the ranks and names of all majors at Augustana College?",
        "question": "What are the ranks and names of all majors at Auroro University?",
        "original_SQL": "SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Augustana College'",
        "changes_information": {
            "original_value": "Aurora University",
            "typo_substitution": "Auroro University"
        }
    },
    {
        "SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Bernie Perez'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "badges.userid",
            "users.displayname",
            "badges.name"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Bernie Perez",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"csgillespie\" is the DisplayName of user",
        "values_list": [
            "users.displayname.bernie_perez"
        ],
        "original_question": "Please list the names of the badges obtained by csgillespie.",
        "question": "Please list the names of the badges obtained by Bernie Perex.",
        "original_SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
        "changes_information": {
            "original_value": "Bernie Perez",
            "typo_substitution": "Bernie Perex"
        }
    },
    {
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Bernie Perez'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "badges.userid",
            "users.displayname",
            "badges.name"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Bernie Perez",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"DatEpicCoderGuyWhoPrograms\" is the DisplayName;",
        "values_list": [
            "users.displayname.bernie_perez"
        ],
        "original_question": "For the user whose display name is \"DatEpicCoderGuyWhoPrograms\", what is his/her badge's name?",
        "question": "For the user whose display name is \"Bernie Perex\", what is his/her badge's name?",
        "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms'",
        "changes_information": {
            "original_value": "Bernie Perez",
            "typo_substitution": "Bernie Perex"
        }
    },
    {
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Bernie Perez'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "badges.userid",
            "users.displayname",
            "badges.name"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Bernie Perez",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"SilentGhost\" is the DisplayName of user;",
        "values_list": [
            "users.displayname.bernie_perez"
        ],
        "original_question": "What is the badge name that user 'SilentGhost' obtained?",
        "question": "What is the badge name that user 'Bernie Perex' obtained?",
        "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'SilentGhost'",
        "changes_information": {
            "original_value": "Bernie Perez",
            "typo_substitution": "Bernie Perex"
        }
    },
    {
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Bernie Perez'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "badges.userid",
            "users.displayname",
            "badges.name"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Bernie Perez",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "users.displayname.bernie_perez"
        ],
        "original_question": "What is the name of badge that the user whose display name is \"Pierre\" obtained?",
        "question": "What is the name of badge that the user whose display name is \"Bernie Perex\" obtained?",
        "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Pierre'",
        "changes_information": {
            "original_value": "Bernie Perez",
            "typo_substitution": "Bernie Perex"
        }
    },
    {
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Bernie Perez'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "badges.userid",
            "users.displayname",
            "badges.name"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Bernie Perez",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Sharpie\" is the DisplayName of user; user refers to UserId",
        "values_list": [
            "users.displayname.bernie_perez"
        ],
        "original_question": "State the name of badge that the user whose display name is \"Sharpie\" obtained.",
        "question": "State the name of badge that the user whose display name is \"Bernie Perex\" obtained.",
        "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sharpie'",
        "changes_information": {
            "original_value": "Bernie Perez",
            "typo_substitution": "Bernie Perex"
        }
    },
    {
        "SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Bernie Perez' ORDER BY T1.Date DESC LIMIT 1",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "badges.userid",
            "badges.name",
            "users.id",
            "users.displayname",
            "badges.date"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Bernie Perez",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "the latest badge refers to Name FROM badges where MAX(Date);",
        "values_list": [
            "users.displayname.bernie_perez"
        ],
        "original_question": "Identify the latest badge awarded to the user with the display name Emmett.",
        "question": "Identify the latest badge awarded to the user with the display name Bernie Perex.",
        "original_SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ORDER BY T1.Date DESC LIMIT 1",
        "changes_information": {
            "original_value": "Bernie Perez",
            "typo_substitution": "Bernie Perex"
        }
    },
    {
        "SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Bernie Perez'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "badges.userid",
            "users.id",
            "users.displayname",
            "users.creationdate",
            "badges.date"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Bernie Perez",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';",
        "values_list": [
            "users.displayname.bernie_perez"
        ],
        "original_question": "How long did it take the user, known by his or her display name 'Zolomon' to get the badge? Count from the date the user's account was created.",
        "question": "How long did it take the user, known by his or her display name 'Bernie Perex' to get the badge? Count from the date the user's account was created.",
        "original_SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon'",
        "changes_information": {
            "original_value": "Bernie Perez",
            "typo_substitution": "Bernie Perex"
        }
    },
    {
        "SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Bernie Perez'",
        "tables": [
            "users"
        ],
        "columns": [
            "users.reputation",
            "users.views",
            "users.displayname"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Bernie Perez",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "users.displayname.jarrod dixon"
        ],
        "original_question": "What is the reputation and view count of the user, who is known by his or her display name 'Jarrod Dixon'?",
        "question": "What is the reputation and view count of the user, who is known by his or her display name 'Bernie Perex'?",
        "original_SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'",
        "changes_information": {
            "original_value": "Bernie Perez",
            "typo_substitution": "Bernie Perex"
        }
    },
    {
        "SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'Bernie Perez'",
        "tables": [
            "users"
        ],
        "columns": [
            "users.creationdate",
            "users.displayname"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Bernie Perez",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
        "values_list": [
            "users.displayname.bernie_perez"
        ],
        "original_question": "When did the user known as 'IrishStat' create his or her account?",
        "question": "When did the user known as 'Bernie Perex' create his or her account?",
        "original_SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'",
        "changes_information": {
            "original_value": "Bernie Perez",
            "typo_substitution": "Bernie Perex"
        }
    },
    {
        "SQL": "SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Antonio';",
        "tables": [
            "users",
            "addresses"
        ],
        "columns": [
            "users.first_name",
            "addresses.country",
            "users.user_address_id",
            "addresses.address_id"
        ],
        "values": [
            {
                "table": "users",
                "column": "first_name",
                "value": "Antonio",
                "condition": "="
            }
        ],
        "db_id": "real_estate_rentals",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "users.first_name.antonio"
        ],
        "original_question": "In which country does the user with first name Robbie live?",
        "question": "In which country does the user with first name Antinio live?",
        "original_SQL": "SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Robbie';",
        "changes_information": {
            "original_value": "Antonio",
            "typo_substitution": "Antinio"
        }
    },
    {
        "SQL": "SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Antonio';",
        "tables": [
            "users",
            "addresses"
        ],
        "columns": [
            "users.first_name",
            "addresses.country",
            "users.user_address_id",
            "addresses.address_id"
        ],
        "values": [
            {
                "table": "users",
                "column": "first_name",
                "value": "Antonio",
                "condition": "="
            }
        ],
        "db_id": "real_estate_rentals",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "users.first_name.antonio"
        ],
        "original_question": "Return the country in which the user with first name Robbie lives.",
        "question": "Return the country in which the user with first name Antinio lives.",
        "original_SQL": "SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Robbie';",
        "changes_information": {
            "original_value": "Antonio",
            "typo_substitution": "Antinio"
        }
    }
]