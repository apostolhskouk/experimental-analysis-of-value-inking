[
    {
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Autobiographer' LIMIT 10",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "badges.userid",
            "users.displayname",
            "badges.name"
        ],
        "values": [
            {
                "table": "badges",
                "column": "name",
                "value": "Autobiographer",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
        "values_list": [
            "badges.name.autobiographer"
        ],
        "original_question": "Name 10 users with the badge name 'Necromancer.'",
        "question": "Name 10 users with the badge name 'Auto biographer.'",
        "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10",
        "changes_information": {
            "original_value": "Autobiographer",
            "typo_space_addition": "Auto biographer"
        }
    },
    {
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "badges.userid",
            "users.displayname",
            "badges.name"
        ],
        "values": [
            {
                "table": "badges",
                "column": "name",
                "value": "Autobiographer",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "values_list": [
            "badges.name.autobiographer"
        ],
        "original_question": "List all the name of users that obtained the Organizer Badges.",
        "question": "List all the name of users that obtained the Auto biographer Badges.",
        "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'",
        "changes_information": {
            "original_value": "Autobiographer",
            "typo_space_addition": "Auto biographer"
        }
    },
    {
        "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Autobiographer'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.location",
            "badges.userid",
            "badges.name",
            "users.id",
            "users.lastaccessdate"
        ],
        "values": [
            {
                "table": "badges",
                "column": "name",
                "value": "Autobiographer",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "Outliers is the name of the badge;",
        "values_list": [
            "badges.name.autobiographer"
        ],
        "original_question": "Describe the last accessed date and location of the users who received the outliers badge.",
        "question": "Describe the last accessed date and location of the users who received the Auto biographer badge.",
        "original_SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
        "changes_information": {
            "original_value": "Autobiographer",
            "typo_space_addition": "Auto biographer"
        }
    },
    {
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "badges.userid",
            "badges.name",
            "users.id",
            "users.displayname",
            "badges.date"
        ],
        "values": [
            {
                "table": "badges",
                "column": "name",
                "value": "Autobiographer",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "values_list": [
            "badges.name.autobiographer"
        ],
        "original_question": "What is the display name of the user who acquired the first Autobiographer badge?",
        "question": "What is the display name of the user who acquired the first Auto biographer badge?",
        "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
        "changes_information": {
            "original_value": "Autobiographer",
            "typo_space_addition": "Auto biographer"
        }
    },
    {
        "SQL": "SELECT remaining FROM budget WHERE category = 'Parking' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Parking' )",
        "tables": [
            "budget"
        ],
        "columns": [
            "budget.amount",
            "budget.category"
        ],
        "values": [
            {
                "table": "budget",
                "column": "category",
                "value": "Parking",
                "condition": "="
            },
            {
                "table": "",
                "column": "category",
                "value": "Food",
                "condition": "="
            },
            {
                "table": "",
                "column": "category",
                "value": "Food",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "remaining of budget refers to remaining, biggest budget for 'Food' refers to MAX(budget.amount) where category = 'Food'",
        "values_list": [
            "budget.category.parking",
            ".category.food",
            ".category.food"
        ],
        "original_question": "With the biggest budget for the \"Food\", what was the remaining of it?",
        "question": "With the biggest budget for the \"Park ing\", what was the remaining of it?",
        "original_SQL": "SELECT remaining FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Food' )",
        "changes_information": {
            "original_value": "Parking",
            "typo_space_addition": "Park ing"
        }
    },
    {
        "SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Parking' ORDER BY T1.spent DESC LIMIT 1",
        "tables": [
            "budget",
            "event"
        ],
        "columns": [
            "event.event_name",
            "budget.category",
            "budget.link_to_event",
            "event.event_id",
            "budget.spent"
        ],
        "values": [
            {
                "table": "budget",
                "column": "category",
                "value": "Parking",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "Name of event refers to event_name; highest amount spent on advertisement refers to MAX(spent) where category = 'Advertisement'",
        "values_list": [
            "budget.category.parking"
        ],
        "original_question": "Name the event with the highest amount spent on advertisement.",
        "question": "Name the event with the highest amount spent on Park ing.",
        "original_SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1",
        "changes_information": {
            "original_value": "Parking",
            "typo_space_addition": "Park ing"
        }
    },
    {
        "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Parking' AND T3.cost < (SELECT AVG(cost) FROM expense)",
        "tables": [
            "budget",
            "event",
            "expense"
        ],
        "columns": [
            "event.event_name",
            "expense.cost",
            "budget.category",
            "budget.link_to_event",
            "budget.budget_id",
            "expense.link_to_budget",
            "event.event_id"
        ],
        "values": [
            {
                "table": "budget",
                "column": "category",
                "value": "Parking",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "name of events refers to event_name; less than average parking cost refers to cost < DIVIDE(SUM(cost), COUNT(event_id)) where category = 'Parking'",
        "values_list": [
            "budget.category.parking"
        ],
        "original_question": "List the name of events with less than average parking cost.",
        "question": "List the name of events with less than average Park ing cost.",
        "original_SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Parking' AND T3.cost < (SELECT AVG(cost) FROM expense)",
        "changes_information": {
            "original_value": "Parking",
            "typo_space_addition": "Park ing"
        }
    },
    {
        "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Parking'",
        "tables": [
            "budget",
            "event"
        ],
        "columns": [
            "event.event_id",
            "budget.link_to_event",
            "event.event_name",
            "budget.category"
        ],
        "values": [
            {
                "table": "budget",
                "column": "category",
                "value": "Parking",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "budgeted for food refers to category = 'Food'",
        "values_list": [
            "budget.category.parking"
        ],
        "original_question": "List the event names which were budgeted for the food.",
        "question": "List the event names which were budgeted for the Park ing.",
        "original_SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Food'",
        "changes_information": {
            "original_value": "Parking",
            "typo_space_addition": "Park ing"
        }
    },
    {
        "SQL": "SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Parking' GROUP BY T2.event_name",
        "tables": [
            "budget",
            "event"
        ],
        "columns": [
            "event.event_name",
            "budget.category",
            "budget.link_to_event",
            "event.event_id",
            "budget.spent"
        ],
        "values": [
            {
                "table": "budget",
                "column": "category",
                "value": "Parking",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "total amount spent = SUM(spent) where category = 'Speaker Gifts'",
        "values_list": [
            "budget.category.speaker gifts"
        ],
        "original_question": "Calculate the total amount spent on speaker gifts and list the name of the event they were spent on.",
        "question": "Calculate the total amount spent on Park ing and list the name of the event they were spent on.",
        "original_SQL": "SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Speaker Gifts' GROUP BY T2.event_name",
        "changes_information": {
            "original_value": "Parking",
            "typo_space_addition": "Park ing"
        }
    },
    {
        "SQL": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'plymouth' ORDER BY T1.accelerate ASC LIMIT 1;",
        "tables": [
            "car_names",
            "cars_data"
        ],
        "columns": [
            "cars_data.accelerate",
            "cars_data.id",
            "cars_data.cylinders",
            "car_names.model",
            "car_names.makeid"
        ],
        "values": [
            {
                "table": "car_names",
                "column": "model",
                "value": "plymouth",
                "condition": "="
            }
        ],
        "db_id": "car_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "car_names.model.plymouth"
        ],
        "original_question": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "question": "For model ply mouth, how many cylinders does the car with the least accelerate have?",
        "original_SQL": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "changes_information": {
            "original_value": "plymouth",
            "typo_space_addition": "ply mouth"
        }
    },
    {
        "SQL": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'plymouth' ORDER BY T1.accelerate ASC LIMIT 1;",
        "tables": [
            "car_names",
            "cars_data"
        ],
        "columns": [
            "cars_data.accelerate",
            "cars_data.id",
            "cars_data.cylinders",
            "car_names.model",
            "car_names.makeid"
        ],
        "values": [
            {
                "table": "car_names",
                "column": "model",
                "value": "plymouth",
                "condition": "="
            }
        ],
        "db_id": "car_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "car_names.model.plymouth"
        ],
        "original_question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "question": "For a ply mouth model, how many cylinders does the version with least accelerate have?",
        "original_SQL": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "changes_information": {
            "original_value": "plymouth",
            "typo_space_addition": "ply mouth"
        }
    },
    {
        "SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Chippy'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.artist",
            "cards.name"
        ],
        "values": [
            {
                "table": "cards",
                "column": "artist",
                "value": "Chippy",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Aaron Boyd' is artist;",
        "values_list": [
            "cards.artist.aaron boyd"
        ],
        "original_question": "Name the cards that were illustrated by Aaron Boyd.",
        "question": "Name the cards that were illustrated by Chip py.",
        "original_SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Aaron Boyd'",
        "changes_information": {
            "original_value": "Chippy",
            "typo_space_addition": "Chip py"
        }
    },
    {
        "SQL": "SELECT manaCost FROM cards WHERE artist = 'Chippy'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.artist",
            "cards.manacost"
        ],
        "values": [
            {
                "table": "cards",
                "column": "artist",
                "value": "Chippy",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "unconverted mana refer to manaCost; Rob Alexander refer to artist",
        "values_list": [
            "cards.artist.rob alexander"
        ],
        "original_question": "What is the  unconverted mana do all the cards created by Rob Alexander cost in total?",
        "question": "What is the  unconverted mana do all the cards created by Chip py cost in total?",
        "original_SQL": "SELECT manaCost FROM cards WHERE artist = 'Rob Alexander'",
        "changes_information": {
            "original_value": "Chippy",
            "typo_space_addition": "Chip py"
        }
    },
    {
        "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Chippy' AND T2.format = 'pauper' AND T1.availability = 'paper'",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.artist",
            "legalities.format",
            "cards.id",
            "legalities.uuid",
            "cards.uuid",
            "cards.availability"
        ],
        "values": [
            {
                "table": "cards",
                "column": "availability",
                "value": "paper",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "artist",
                "value": "Chippy",
                "condition": "="
            },
            {
                "table": "legalities",
                "column": "format",
                "value": "pauper",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "available in paper refers to availability = 'paper'",
        "values_list": [
            "cards.availability.paper",
            "cards.artist.erica yang",
            "legalities.format.pauper"
        ],
        "original_question": "Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its ID.",
        "question": "Is there any card from Chip py artist in pauper format and available in paper? If so, indicate its ID.",
        "original_SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'",
        "changes_information": {
            "original_value": "Chippy",
            "typo_space_addition": "Chip py"
        }
    },
    {
        "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Chippy'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.artist",
            "cards.availability"
        ],
        "values": [
            {
                "table": "cards",
                "column": "artist",
                "value": "Chippy",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
        "values_list": [
            "cards.artist.daren bader"
        ],
        "original_question": "What kind of printing is on the card that Daren Bader created?",
        "question": "What kind of printing is on the card that Chip py created?",
        "original_SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'",
        "changes_information": {
            "original_value": "Chippy",
            "typo_space_addition": "Chip py"
        }
    },
    {
        "SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE (T2.name = 'Coldsnap' AND T1.artist = 'Chippy') OR (T2.name = 'Coldsnap' AND T1.artist = 'Aaron Miller') OR (T2.name = 'Coldsnap' AND T1.artist = 'Chippy') GROUP BY T1.artist",
        "tables": [
            "sets",
            "cards"
        ],
        "columns": [
            "cards.artist",
            "sets.name",
            "cards.setcode",
            "sets.code"
        ],
        "values": [
            {
                "table": "sets",
                "column": "name",
                "value": "Coldsnap",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "artist",
                "value": "Chippy",
                "condition": "="
            },
            {
                "table": "sets",
                "column": "name",
                "value": "Coldsnap",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "artist",
                "value": "Chippy",
                "condition": "="
            },
            {
                "table": "sets",
                "column": "name",
                "value": "Coldsnap",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "artist",
                "value": "Aaron Miller",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Jeremy Jarvis, Aaron Miller or Chippy are the name of artists which refers to artist IN ('Jeremy Jarvis', 'Aaron Miller','Chippy');",
        "values_list": [
            "sets.name.coldsnap",
            "cards.artist.jeremy jarvis",
            "sets.name.coldsnap",
            "cards.artist.chippy",
            "sets.name.coldsnap",
            "cards.artist.aaron miller"
        ],
        "original_question": "Which of these artists have designed a card in the set Coldsnap, Jeremy Jarvis, Aaron Miller or Chippy?",
        "question": "Which of these artists have designed a card in the set Coldsnap, Chip py, Aaron Miller or Chippy?",
        "original_SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE (T2.name = 'Coldsnap' AND T1.artist = 'Chippy') OR (T2.name = 'Coldsnap' AND T1.artist = 'Aaron Miller') OR (T2.name = 'Coldsnap' AND T1.artist = 'Jeremy Jarvis') GROUP BY T1.artist",
        "changes_information": {
            "original_value": "Chippy",
            "typo_space_addition": "Chip py"
        }
    },
    {
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Chippy' ORDER BY T2.date DESC",
        "tables": [
            "rulings",
            "cards"
        ],
        "columns": [
            "cards.artist",
            "rulings.date",
            "rulings.text",
            "cards.uuid",
            "rulings.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "artist",
                "value": "Chippy",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
        "values_list": [
            "cards.artist.kev walker"
        ],
        "original_question": "What are the rulings for the card named and designed by Kev Walker? List them in descending order of dates.",
        "question": "What are the rulings for the card named and designed by Chip py? List them in descending order of dates.",
        "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Kev Walker' ORDER BY T2.date DESC",
        "changes_information": {
            "original_value": "Chippy",
            "typo_space_addition": "Chip py"
        }
    },
    {
        "SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Chippy'",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.artist",
            "legalities.status",
            "cards.name",
            "cards.frameversion",
            "legalities.uuid",
            "cards.uuid"
        ],
        "values": [
            {
                "table": "legalities",
                "column": "status",
                "value": "Banned",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "artist",
                "value": "Chippy",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
        "values_list": [
            "legalities.status.banned",
            "cards.artist.allen williams"
        ],
        "original_question": "List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.",
        "question": "List all the frame styles and cards Chip py worked on and find any banned cards if there are any.",
        "original_SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'",
        "changes_information": {
            "original_value": "Chippy",
            "typo_space_addition": "Chip py"
        }
    },
    {
        "SQL": "SELECT id FROM cards WHERE frameEffects = 'devoid' GROUP BY id",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.id",
            "cards.frameeffects"
        ],
        "values": [
            {
                "table": "cards",
                "column": "frameeffects",
                "value": "devoid",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "\nframe effect as extendedart refers to frameEffects = 'extendedart'\n",
        "values_list": [
            "cards.frameeffects.devoid"
        ],
        "original_question": "How many cards have frame effect as extendedart? List out the id of those cards.",
        "question": "How many cards have frame effect as de void? List out the id of those cards.",
        "original_SQL": "SELECT id FROM cards WHERE frameEffects = 'extendedart' GROUP BY id",
        "changes_information": {
            "original_value": "devoid",
            "typo_space_addition": "de void"
        }
    },
    {
        "SQL": "SELECT layout FROM cards WHERE keywords = 'Menace'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.keywords",
            "cards.layout"
        ],
        "values": [
            {
                "table": "cards",
                "column": "keywords",
                "value": "Menace",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "cards.keywords.menace"
        ],
        "original_question": "What are the card layout of cards with keyword of flying?",
        "question": "What are the card layout of cards with keyword of Men ace?",
        "original_SQL": "SELECT layout FROM cards WHERE keywords = 'Flying'",
        "changes_information": {
            "original_value": "Menace",
            "typo_space_addition": "Men ace"
        }
    },
    {
        "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Discombobulate'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.name",
            "cards.keywords"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Discombobulate",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Angel of Mercy' is the name of card;",
        "values_list": [
            "cards.name.angel of mercy"
        ],
        "original_question": "What is the keyword found on card 'Angel of Mercy'?",
        "question": "What is the keyword found on card 'Discom bobulate'?",
        "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
        "changes_information": {
            "original_value": "Discombobulate",
            "typo_space_addition": "Discom bobulate"
        }
    },
    {
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Discombobulate'",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "legalities.uuid",
            "legalities.status",
            "cards.name",
            "cards.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Discombobulate",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Cloudchaser Eagle is the name of card;",
        "values_list": [
            "cards.name.cloudchaser eagle"
        ],
        "original_question": "What is the status of card \"Cloudchaser Eagle\"?",
        "question": "What is the status of card \"Discom bobulate\"?",
        "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
        "changes_information": {
            "original_value": "Discombobulate",
            "typo_space_addition": "Discom bobulate"
        }
    },
    {
        "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Discombobulate'",
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.uuid",
            "cards.name",
            "foreign_data.uuid",
            "cards.type"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Discombobulate",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Benalish Knight' is the name of card;",
        "values_list": [
            "cards.name.benalish knight"
        ],
        "original_question": "What is the type of card \"Benalish Knight\"?",
        "question": "What is the type of card \"Discom bobulate\"?",
        "original_SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
        "changes_information": {
            "original_value": "Discombobulate",
            "typo_space_addition": "Discom bobulate"
        }
    },
    {
        "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Discombobulate'",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "legalities.uuid",
            "cards.uuid",
            "legalities.format",
            "cards.name"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Discombobulate",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
        "values_list": [
            "cards.name.benalish knight"
        ],
        "original_question": "What is the rule of playing card \"Benalish Knight\"?",
        "question": "What is the rule of playing card \"Discom bobulate\"?",
        "original_SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
        "changes_information": {
            "original_value": "Discombobulate",
            "typo_space_addition": "Discom bobulate"
        }
    },
    {
        "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Discombobulate'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.name",
            "cards.subtypes",
            "cards.supertypes"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Discombobulate",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "values_list": [
            "cards.name.molimo, maro-sorcerer"
        ],
        "original_question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
        "question": "What's the list of all types for the card \"Discom bobulate\"?",
        "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
        "changes_information": {
            "original_value": "Discombobulate",
            "typo_space_addition": "Discom bobulate"
        }
    },
    {
        "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Discombobulate'",
        "tables": [
            "sets",
            "cards"
        ],
        "columns": [
            "sets.mtgocode",
            "cards.name",
            "cards.setcode",
            "sets.code"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Discombobulate",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "values_list": [
            "cards.name.angel of mercy"
        ],
        "original_question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
        "question": "Did the set of cards with \"Discom bobulate\" appear on Magic: The Gathering Online?",
        "original_SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
        "changes_information": {
            "original_value": "Discombobulate",
            "typo_space_addition": "Discom bobulate"
        }
    },
    {
        "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Discombobulate'",
        "tables": [
            "sets",
            "cards"
        ],
        "columns": [
            "cards.name",
            "cards.setcode",
            "sets.code",
            "sets.releasedate"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Discombobulate",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "values_list": [
            "cards.name.discombobulate"
        ],
        "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
        "question": "What was the release date for the set which card \"Discom bobulate\" in it?",
        "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
        "changes_information": {
            "original_value": "Discombobulate",
            "typo_space_addition": "Discom bobulate"
        }
    },
    {
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Discombobulate' AND T2.language = 'French' AND T2.translation IS NOT NULL",
        "tables": [
            "set_translations",
            "cards"
        ],
        "columns": [
            "set_translations.language",
            "cards.name",
            "set_translations.setcode",
            "cards.setcode",
            "set_translations.translation"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Discombobulate",
                "condition": "="
            },
            {
                "table": "set_translations",
                "column": "language",
                "value": "French",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
        "values_list": [
            "cards.name.tendo ice bridge",
            "set_translations.language.french"
        ],
        "original_question": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in?",
        "question": "What's the French name of the set of cards with \"Discom bobulate\" is in?",
        "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL",
        "changes_information": {
            "original_value": "Discombobulate",
            "typo_space_addition": "Discom bobulate"
        }
    },
    {
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Discombobulate' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
        "tables": [
            "set_translations",
            "cards"
        ],
        "columns": [
            "set_translations.language",
            "cards.name",
            "set_translations.setcode",
            "cards.setcode",
            "set_translations.translation"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Discombobulate",
                "condition": "="
            },
            {
                "table": "set_translations",
                "column": "language",
                "value": "Japanese",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
        "values_list": [
            "cards.name.fellwar stone",
            "set_translations.language.japanese"
        ],
        "original_question": "Tell the Japanese name of the set which card \"Fellwar Stone\" is in it.",
        "question": "Tell the Japanese name of the set which card \"Discom bobulate\" is in it.",
        "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
        "changes_information": {
            "original_value": "Discombobulate",
            "typo_space_addition": "Discom bobulate"
        }
    },
    {
        "SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Sorcery'",
        "tables": [
            "rulings",
            "cards"
        ],
        "columns": [
            "cards.originaltype",
            "cards.id",
            "rulings.date",
            "cards.uuid",
            "rulings.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "originaltype",
                "value": "Sorcery",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Creature - Elf is the originalType;",
        "values_list": [
            "cards.originaltype.creature - elf"
        ],
        "original_question": "List down the name of cards with original types of Creature - Elf and the date of rulings for these cards.",
        "question": "List down the name of cards with original types of Sor cerry and the date of rulings for these cards.",
        "original_SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'",
        "changes_information": {
            "original_value": "Sorcery",
            "typo_space_addition": "Sor cerry"
        }
    },
    {
        "SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Sorcery' AND T1.colors = 'B'",
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.originaltype",
            "cards.name",
            "cards.colors",
            "foreign_data.uuid",
            "cards.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "originaltype",
                "value": "Sorcery",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "colors",
                "value": "B",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Artifact card refers to originalType = 'Artifact'; black color refers to colors = 'B'; foreign language refers to language in foreign_data",
        "values_list": [
            "cards.originaltype.sorcery",
            "cards.colors.b"
        ],
        "original_question": "Among the Artifact cards, which are black color and comes with foreign languague translation?",
        "question": "Among the Sor cerry cards, which are black color and comes with foreign languague translation?",
        "original_SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B'",
        "changes_information": {
            "original_value": "Sorcery",
            "typo_space_addition": "Sor cerry"
        }
    },
    {
        "SQL": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'prerelease'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.purchaseurls",
            "cards.promotypes"
        ],
        "values": [
            {
                "table": "cards",
                "column": "promotypes",
                "value": "prerelease",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "promotional type of \"bundle\" refers to promoTypes = 'bundle'; websites refers to purchaseUrls",
        "values_list": [
            "cards.promotypes.prerelease"
        ],
        "original_question": "Please list the websites where I can purchase the cards that have the promotional type of \"bundle\".",
        "question": "Please list the websites where I can purchase the cards that have the promotional type of \"pre release\".",
        "original_SQL": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'bundle'",
        "changes_information": {
            "original_value": "prerelease",
            "typo_space_addition": "pre release"
        }
    },
    {
        "SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Indianapolis'",
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "circuits.circuitid",
            "races.year",
            "races.circuitid",
            "circuits.location"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "location",
                "value": "Indianapolis",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "Shanghai is a name of location;",
        "values_list": [
            "circuits.location.indianapolis"
        ],
        "original_question": "Please list the year during which the race is held on circuits in Shanghai.",
        "question": "Please list the year during which the race is held on circuits in Indiana polis.",
        "original_SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Shanghai'",
        "changes_information": {
            "original_value": "Indianapolis",
            "typo_space_addition": "Indiana polis"
        }
    },
    {
        "SQL": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Eloise'",
        "tables": [
            "agencies",
            "clients"
        ],
        "columns": [
            "clients.agency_id",
            "agencies.agency_id",
            "clients.client_details",
            "agencies.agency_details"
        ],
        "values": [
            {
                "table": "clients",
                "column": "client_details",
                "value": "Eloise",
                "condition": "="
            }
        ],
        "db_id": "advertising_agencies",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "clients.client_details.eloise"
        ],
        "original_question": "Show agency details for client with detail 'Mac'.",
        "question": "Show agency details for client with detail 'Eloi se'.",
        "original_SQL": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Mac'",
        "changes_information": {
            "original_value": "Eloise",
            "typo_space_addition": "Eloi se"
        }
    },
    {
        "SQL": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Eloise'",
        "tables": [
            "agencies",
            "clients"
        ],
        "columns": [
            "clients.agency_id",
            "agencies.agency_id",
            "clients.client_details",
            "agencies.agency_details"
        ],
        "values": [
            {
                "table": "clients",
                "column": "client_details",
                "value": "Eloise",
                "condition": "="
            }
        ],
        "db_id": "advertising_agencies",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "clients.client_details.eloise"
        ],
        "original_question": "What are the agency details for clients with the detail Mac?",
        "question": "What are the agency details for clients with the detail Eloi se?",
        "original_SQL": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Mac'",
        "changes_information": {
            "original_value": "Eloise",
            "typo_space_addition": "Eloi se"
        }
    },
    {
        "SQL": "SELECT DISTINCT T1.position FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T2.name = 'Footwork'",
        "tables": [
            "constructors",
            "constructorstandings"
        ],
        "columns": [
            "constructorstandings.constructorid",
            "constructors.name",
            "constructorstandings.position",
            "constructors.constructorid"
        ],
        "values": [
            {
                "table": "constructors",
                "column": "name",
                "value": "Footwork",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "Renault is a name of constructor;",
        "values_list": [
            "constructors.name.footwork"
        ],
        "original_question": "Please list the positions of the circuits built by the constructor Renault.",
        "question": "Please list the positions of the circuits built by the constructor Foot work.",
        "original_SQL": "SELECT DISTINCT T1.position FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T2.name = 'Renault'",
        "changes_information": {
            "original_value": "Footwork",
            "typo_space_addition": "Foot work"
        }
    },
    {
        "SQL": "SELECT t2.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Scotland'",
        "tables": [
            "league",
            "country"
        ],
        "columns": [
            "country.name",
            "country.id",
            "league.country_id",
            "league.name"
        ],
        "values": [
            {
                "table": "country",
                "column": "name",
                "value": "Scotland",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "name of the football league refers to League.name;",
        "values_list": [
            "country.name.scotland"
        ],
        "original_question": "What is the name of the football league in the country of Netherlands?",
        "question": "What is the name of the football league in the country of Scot land?",
        "original_SQL": "SELECT t2.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Netherlands'",
        "changes_information": {
            "original_value": "Scotland",
            "typo_space_addition": "Scot land"
        }
    },
    {
        "SQL": "SELECT t2.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Scotland'",
        "tables": [
            "league",
            "country"
        ],
        "columns": [
            "country.name",
            "country.id",
            "league.country_id",
            "league.name"
        ],
        "values": [
            {
                "table": "country",
                "column": "name",
                "value": "Scotland",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "Germany refers to Country.name = 'Germany';",
        "values_list": [
            "country.name.scotland"
        ],
        "original_question": "Please list the leagues from Germany.",
        "question": "Please list the leagues from Scot land.",
        "original_SQL": "SELECT t2.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Germany'",
        "changes_information": {
            "original_value": "Scotland",
            "typo_space_addition": "Scot land"
        }
    },
    {
        "SQL": "SELECT t3.player_name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id WHERE t1.name = 'Scotland'",
        "tables": [
            "match",
            "player",
            "country"
        ],
        "columns": [
            "player.player_name",
            "match.home_player_1",
            "country.name",
            "country.id",
            "match.country_id",
            "player.player_api_id"
        ],
        "values": [
            {
                "table": "country",
                "column": "name",
                "value": "Scotland",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "name of players refers to player_name; Belgium is name of country",
        "values_list": [
            "country.name.scotland"
        ],
        "original_question": "State the name of players who came from Belgium.",
        "question": "State the name of players who came from Scot land.",
        "original_SQL": "SELECT t3.player_name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id WHERE t1.name = 'Belgium'",
        "changes_information": {
            "original_value": "Scotland",
            "typo_space_addition": "Scot land"
        }
    },
    {
        "SQL": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Azerbaijani' AND T1.Continent  =  \"Asia\"",
        "tables": [
            "city",
            "countrylanguage",
            "country"
        ],
        "columns": [
            "countrylanguage.isofficial",
            "countrylanguage.countrycode",
            "city.countrycode",
            "country.continent",
            "country.code",
            "countrylanguage.language",
            "city.name"
        ],
        "values": [
            {
                "table": "countrylanguage",
                "column": "isofficial",
                "value": "T",
                "condition": "="
            },
            {
                "table": "countrylanguage",
                "column": "language",
                "value": "Azerbaijani",
                "condition": "="
            }
        ],
        "db_id": "world_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "countrylanguage.isofficial.t",
            "countrylanguage.language.azerbaijani"
        ],
        "original_question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "question": "Return the different names of cities that are in Asia and for which Azer baijani is the official language.",
        "original_SQL": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
        "changes_information": {
            "original_value": "Azerbaijani",
            "typo_space_addition": "Azer baijani"
        }
    },
    {
        "SQL": "SELECT ID FROM Examination WHERE `Examination Date` BETWEEN '1997-01-01' AND '1997-12-31' AND Diagnosis = 'Photosensitivities'",
        "tables": [
            "examination"
        ],
        "columns": [
            "examination.id",
            "examination.diagnosis",
            "examination.examination date"
        ],
        "values": [
            {
                "table": "examination",
                "column": "diagnosis",
                "value": "Photosensitivities",
                "condition": "="
            }
        ],
        "db_id": "thrombosis_prediction",
        "source": "bird_dev",
        "evidence": "'Behcet' refers to diagnosis; exam between 01/01/1997 and 12/31/1997 refers to YEAR(Description) > = '1997-1-1' AND YEAR(Description) < '1998-1-1'",
        "values_list": [
            "examination.diagnosis.photosensitivities"
        ],
        "original_question": "Lists all patients by ID who were diagnosed with Behcet's and had their exams between 01/01/197 and 12/31/1997.",
        "question": "Lists all patients by ID who were diagnosed with Photo sensitivities's and had their exams between 01/01/197 and 12/31/1997.",
        "original_SQL": "SELECT ID FROM Examination WHERE `Examination Date` BETWEEN '1997-01-01' AND '1997-12-31' AND Diagnosis = 'Behcet'",
        "changes_information": {
            "original_value": "Photosensitivities",
            "typo_space_addition": "Photo sensitivities"
        }
    },
    {
        "SQL": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'Photosensitivities' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1",
        "tables": [
            "examination"
        ],
        "columns": [
            "examination.symptoms",
            "examination.diagnosis"
        ],
        "values": [
            {
                "table": "examination",
                "column": "diagnosis",
                "value": "Photosensitivities",
                "condition": "="
            }
        ],
        "db_id": "thrombosis_prediction",
        "source": "bird_dev",
        "evidence": "the most common sign refers to MAX(symptoms); 'SLE' refers to diagnosis",
        "values_list": [
            "examination.diagnosis.photosensitivities"
        ],
        "original_question": "What is the most common sign of patients with SLE disease?",
        "question": "What is the most common sign of patients with Photo sensitivities disease?",
        "original_SQL": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1",
        "changes_information": {
            "original_value": "Photosensitivities",
            "typo_space_addition": "Photo sensitivities"
        }
    },
    {
        "SQL": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';",
        "tables": [
            "features"
        ],
        "columns": [
            "features.feature_name",
            "features.feature_description"
        ],
        "values": [
            {
                "table": "features",
                "column": "feature_name",
                "value": "rooftop",
                "condition": "="
            }
        ],
        "db_id": "real_estate_rentals",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "features.feature_name.rooftop"
        ],
        "original_question": "How is the feature rooftop described?",
        "question": "How is the feature roof top described?",
        "original_SQL": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';",
        "changes_information": {
            "original_value": "rooftop",
            "typo_space_addition": "roof top"
        }
    },
    {
        "SQL": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';",
        "tables": [
            "features"
        ],
        "columns": [
            "features.feature_name",
            "features.feature_description"
        ],
        "values": [
            {
                "table": "features",
                "column": "feature_name",
                "value": "rooftop",
                "condition": "="
            }
        ],
        "db_id": "real_estate_rentals",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "features.feature_name.rooftop"
        ],
        "original_question": "Return the description of the feature 'rooftop'.",
        "question": "Return the description of the feature 'roof top'.",
        "original_SQL": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';",
        "changes_information": {
            "original_value": "rooftop",
            "typo_space_addition": "roof top"
        }
    },
    {
        "SQL": "SELECT T2.town_city FROM Properties AS T1 JOIN Addresses AS T2 ON T1.property_address_id  =  T2.address_id JOIN Property_Features AS T3 ON T1.property_id  =  T3.property_id JOIN Features AS T4 ON T4.feature_id  =  T3.feature_id WHERE T4.feature_name  =  'rooftop';",
        "tables": [
            "property_features",
            "properties",
            "features",
            "addresses"
        ],
        "columns": [
            "features.feature_id",
            "addresses.address_id",
            "features.feature_name",
            "property_features.feature_id",
            "addresses.town_city",
            "property_features.property_id",
            "properties.property_address_id",
            "properties.property_id"
        ],
        "values": [
            {
                "table": "features",
                "column": "feature_name",
                "value": "rooftop",
                "condition": "="
            }
        ],
        "db_id": "real_estate_rentals",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "features.feature_name.swimming pool"
        ],
        "original_question": "In which cities are there any properties equipped with a swimming pool?",
        "question": "In which cities are there any properties equipped with a roof top?",
        "original_SQL": "SELECT T2.town_city FROM Properties AS T1 JOIN Addresses AS T2 ON T1.property_address_id  =  T2.address_id JOIN Property_Features AS T3 ON T1.property_id  =  T3.property_id JOIN Features AS T4 ON T4.feature_id  =  T3.feature_id WHERE T4.feature_name  =  'swimming pool';",
        "changes_information": {
            "original_value": "rooftop",
            "typo_space_addition": "roof top"
        }
    },
    {
        "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Hebrew'",
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.uuid",
            "cards.name",
            "foreign_data.language",
            "foreign_data.uuid"
        ],
        "values": [
            {
                "table": "foreign_data",
                "column": "language",
                "value": "Hebrew",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Japanese' is the language;",
        "values_list": [
            "foreign_data.language.hebrew"
        ],
        "original_question": "Name all the cards which have alternative language in Japanese.",
        "question": "Name all the cards which have alternative language in He brew.",
        "original_SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'",
        "changes_information": {
            "original_value": "Hebrew",
            "typo_space_addition": "He brew"
        }
    },
    {
        "SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Hebrew'",
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.artist",
            "foreign_data.language",
            "foreign_data.uuid",
            "cards.uuid"
        ],
        "values": [
            {
                "table": "foreign_data",
                "column": "language",
                "value": "Hebrew",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Phyrexian' is the language; name of artists refers to artist;",
        "values_list": [
            "foreign_data.language.hebrew"
        ],
        "original_question": "Please provide the names of the artists who illustrated the card art in Phyrexian.",
        "question": "Please provide the names of the artists who illustrated the card art in He brew.",
        "original_SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Phyrexian'",
        "changes_information": {
            "original_value": "Hebrew",
            "typo_space_addition": "He brew"
        }
    },
    {
        "SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Hebrew'",
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.artist",
            "foreign_data.language",
            "foreign_data.uuid",
            "cards.uuid"
        ],
        "values": [
            {
                "table": "foreign_data",
                "column": "language",
                "value": "Hebrew",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Chinese Simplified' is the language;",
        "values_list": [
            "foreign_data.language.chinese simplified"
        ],
        "original_question": "List down the name of artists for cards in Chinese Simplified.",
        "question": "List down the name of artists for cards in He brew.",
        "original_SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'",
        "changes_information": {
            "original_value": "Hebrew",
            "typo_space_addition": "He brew"
        }
    },
    {
        "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Hebrew'",
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.name",
            "foreign_data.uuid",
            "cards.uuid",
            "foreign_data.language",
            "cards.availability"
        ],
        "values": [
            {
                "table": "cards",
                "column": "availability",
                "value": "paper",
                "condition": "="
            },
            {
                "table": "foreign_data",
                "column": "language",
                "value": "Hebrew",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "available in paper refers to availability = 'paper'; 'Japanese is the language;",
        "values_list": [
            "cards.availability.paper",
            "foreign_data.language.hebrew"
        ],
        "original_question": "What are the cards that only available in paper and Japanese language?",
        "question": "What are the cards that only available in paper and He brew language?",
        "original_SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Japanese'",
        "changes_information": {
            "original_value": "Hebrew",
            "typo_space_addition": "He brew"
        }
    },
    {
        "SQL": "SELECT ( SELECT CAST(SUM(CASE WHEN language = 'Hebrew' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ), name FROM foreign_data WHERE language = 'Hebrew'",
        "tables": [
            "foreign_data"
        ],
        "columns": [
            "foreign_data.language"
        ],
        "values": [
            {
                "table": "foreign_data",
                "column": "language",
                "value": "Hebrew",
                "condition": "="
            },
            {
                "table": "",
                "column": "language",
                "value": "Spanish",
                "condition": "="
            },
            {
                "table": "",
                "column": "language",
                "value": "Spanish",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Spanish refer to language; Percentage refer to DIVIDE(SUM(ID where language = 'Spanish'), COUNT(id))*100",
        "values_list": [
            "foreign_data.language.hebrew",
            ".language.spanish",
            ".language.spanish"
        ],
        "original_question": "Calculate the percentage of cards in Spanish. List them by name.",
        "question": "Calculate the percentage of cards in He brew. List them by name.",
        "original_SQL": "SELECT ( SELECT CAST(SUM(CASE WHEN language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ), name FROM foreign_data WHERE language = 'Spanish'",
        "changes_information": {
            "original_value": "Hebrew",
            "typo_space_addition": "He brew"
        }
    },
    {
        "SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'Solfatara'",
        "tables": [
            "foreign_data"
        ],
        "columns": [
            "foreign_data.language",
            "foreign_data.name"
        ],
        "values": [
            {
                "table": "foreign_data",
                "column": "name",
                "value": "Solfatara",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "\"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
        "values_list": [
            "foreign_data.name.a pedra fellwar"
        ],
        "original_question": "Which foreign language used by \"A Pedra Fellwar\"?",
        "question": "Which foreign language used by \"Solfa tara\"?",
        "original_SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar'",
        "changes_information": {
            "original_value": "Solfatara",
            "typo_space_addition": "Solfa tara"
        }
    },
    {
        "SQL": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'premodern' AND T2.status = 'Banned' AND T1.rarity = 'mythic'",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.rarity",
            "legalities.format",
            "cards.id",
            "legalities.status",
            "legalities.uuid",
            "cards.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "rarity",
                "value": "mythic",
                "condition": "="
            },
            {
                "table": "legalities",
                "column": "format",
                "value": "premodern",
                "condition": "="
            },
            {
                "table": "legalities",
                "column": "status",
                "value": "Banned",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "mythic rarity printing refers to rarity = 'mythic'; card banned refers to status = 'Banned'; in gladiator format refers to format = 'gladiator';",
        "values_list": [
            "cards.rarity.mythic",
            "legalities.format.premodern",
            "legalities.status.banned"
        ],
        "original_question": "List all the mythic rarity print cards banned in gladiator format.",
        "question": "List all the mythic rarity print cards banned in pre modern format.",
        "original_SQL": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'",
        "changes_information": {
            "original_value": "premodern",
            "typo_space_addition": "pre modern"
        }
    },
    {
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Artifact' AND T2.format = 'premodern' AND T1.side IS NULL",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.side",
            "legalities.format",
            "legalities.status",
            "legalities.uuid",
            "cards.uuid",
            "cards.type"
        ],
        "values": [
            {
                "table": "cards",
                "column": "type",
                "value": "Artifact",
                "condition": "="
            },
            {
                "table": "legalities",
                "column": "format",
                "value": "premodern",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Artifact type of cards refers to types = 'Artifact'; card does not have multiple faces on the same card refers to side is NULL'; vintage play format refers to format = 'vintage';",
        "values_list": [
            "cards.type.artifact",
            "legalities.format.premodern"
        ],
        "original_question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format.",
        "question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for pre modern play format.",
        "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Artifact' AND T2.format = 'vintage' AND T1.side IS NULL",
        "changes_information": {
            "original_value": "premodern",
            "typo_space_addition": "pre modern"
        }
    },
    {
        "SQL": "SELECT T1.uuid, T3.language FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'premodern'",
        "tables": [
            "cards",
            "legalities",
            "foreign_data"
        ],
        "columns": [
            "legalities.format",
            "foreign_data.uuid",
            "legalities.uuid",
            "cards.uuid",
            "foreign_data.language"
        ],
        "values": [
            {
                "table": "legalities",
                "column": "format",
                "value": "premodern",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "legacy card refers to format = 'legacy'; foreign language refers to language in foreign_data",
        "values_list": [
            "legalities.format.premodern"
        ],
        "original_question": "List down the uuid for legacy cards and the foreign language of these cards.",
        "question": "List down the uuid for pre modern cards and the foreign language of these cards.",
        "original_SQL": "SELECT T1.uuid, T3.language FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'legacy'",
        "changes_information": {
            "original_value": "premodern",
            "typo_space_addition": "pre modern"
        }
    },
    {
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.frameVersion = 1997 AND T1.hasContentWarning = 1 AND T1.artist = 'D. Alexander Gregory' AND T2.format = 'premodern'",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.artist",
            "legalities.format",
            "legalities.status",
            "cards.frameversion",
            "cards.hascontentwarning",
            "legalities.uuid",
            "cards.uuid"
        ],
        "values": [
            {
                "table": "legalities",
                "column": "format",
                "value": "premodern",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "artist",
                "value": "D. Alexander Gregory",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "frameversion",
                "value": "1997",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "hascontentwarning",
                "value": "1",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "version of frame style is 1997 refers to frameVersion = '1997'; illustrated by D. Alexander Gregory refers to artist = 'D. Alexander Gregory'; sensitive content refers to hasContentWarning = 1; legacy play format refers to format = 'legacy'; status of the card refers to status",
        "values_list": [
            "legalities.format.premodern",
            "cards.artist.d. alexander gregory",
            "cards.frameversion.1997",
            "cards.hascontentwarning.1"
        ],
        "original_question": "Among the cards whose version of frame style is 1997, what is the status of the card illustrated by D. Alexander Gregory in legacy play format that has sensitive content or Wizards of the Coast?",
        "question": "Among the cards whose version of frame style is 1997, what is the status of the card illustrated by D. Alexander Gregory in pre modern play format that has sensitive content or Wizards of the Coast?",
        "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.frameVersion = 1997 AND T1.hasContentWarning = 1 AND T1.artist = 'D. Alexander Gregory' AND T2.format = 'legacy'",
        "changes_information": {
            "original_value": "premodern",
            "typo_space_addition": "pre modern"
        }
    },
    {
        "SQL": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Kaohsiung' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "tables": [
            "matches",
            "players"
        ],
        "columns": [
            "matches.tourney_name",
            "players.country_code",
            "players.player_id",
            "matches.winner_id",
            "players.first_name"
        ],
        "values": [
            {
                "table": "matches",
                "column": "tourney_name",
                "value": "Kaohsiung",
                "condition": "="
            },
            {
                "table": "matches",
                "column": "tourney_name",
                "value": "Australian Open",
                "condition": "="
            }
        ],
        "db_id": "wta_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "matches.tourney_name.wta championships",
            "matches.tourney_name.australian open"
        ],
        "original_question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "question": "What are the country code and first name of the players who won in both tourney Kaoh siung and Australian Open?",
        "original_SQL": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "changes_information": {
            "original_value": "Kaohsiung",
            "typo_space_addition": "Kaoh siung"
        }
    },
    {
        "SQL": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Kaohsiung' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "tables": [
            "matches",
            "players"
        ],
        "columns": [
            "matches.tourney_name",
            "players.country_code",
            "players.player_id",
            "matches.winner_id",
            "players.first_name"
        ],
        "values": [
            {
                "table": "matches",
                "column": "tourney_name",
                "value": "Kaohsiung",
                "condition": "="
            },
            {
                "table": "matches",
                "column": "tourney_name",
                "value": "Australian Open",
                "condition": "="
            }
        ],
        "db_id": "wta_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "matches.tourney_name.wta championships",
            "matches.tourney_name.australian open"
        ],
        "original_question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "question": "What are the first names and country codes for players who won both the Kaoh siung and the Australian Open?",
        "original_SQL": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "changes_information": {
            "original_value": "Kaohsiung",
            "typo_space_addition": "Kaoh siung"
        }
    },
    {
        "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Kaohsiung' ORDER BY winner_rank_points DESC LIMIT 1",
        "tables": [
            "matches"
        ],
        "columns": [
            "matches.tourney_name",
            "matches.winner_rank_points",
            "matches.winner_name"
        ],
        "values": [
            {
                "table": "matches",
                "column": "tourney_name",
                "value": "Kaohsiung",
                "condition": "="
            }
        ],
        "db_id": "wta_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "matches.tourney_name.australian open"
        ],
        "original_question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "question": "Find the name of the winner who has the highest rank points and participated in the Kaoh siung tourney.",
        "original_SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "changes_information": {
            "original_value": "Kaohsiung",
            "typo_space_addition": "Kaoh siung"
        }
    },
    {
        "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Kaohsiung' ORDER BY winner_rank_points DESC LIMIT 1",
        "tables": [
            "matches"
        ],
        "columns": [
            "matches.tourney_name",
            "matches.winner_rank_points",
            "matches.winner_name"
        ],
        "values": [
            {
                "table": "matches",
                "column": "tourney_name",
                "value": "Kaohsiung",
                "condition": "="
            }
        ],
        "db_id": "wta_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "matches.tourney_name.australian open"
        ],
        "original_question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "question": "What is the name of the winner with the most rank points who participated in the Kaoh siung tournament?",
        "original_SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "changes_information": {
            "original_value": "Kaohsiung",
            "typo_space_addition": "Kaoh siung"
        }
    },
    {
        "SQL": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position LIKE 'Inactive'",
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.link_to_major",
            "major.major_id",
            "member.position",
            "major.college"
        ],
        "values": [
            {
                "table": "member",
                "column": "position",
                "value": "Inactive",
                "condition": "LIKE"
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "Vice President is a position of the Student Club",
        "values_list": [
            "member.position.vice president"
        ],
        "original_question": "Which college is the vice president of the Student_Club from?",
        "question": "Which college is the In active of the Student_Club from?",
        "original_SQL": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position LIKE 'vice president'",
        "changes_information": {
            "original_value": "Inactive",
            "typo_space_addition": "In active"
        }
    },
    {
        "SQL": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Inactive'",
        "tables": [
            "member",
            "income"
        ],
        "columns": [
            "income.link_to_member",
            "member.member_id",
            "member.position",
            "income.amount"
        ],
        "values": [
            {
                "table": "member",
                "column": "position",
                "value": "Inactive",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "'Vice President' is a position of Student Club; funds received refers to amount.",
        "values_list": [
            "member.position.vice president"
        ],
        "original_question": "What is the amount of the funds that the Vice President received?",
        "question": "What is the amount of the funds that the In active received?",
        "original_SQL": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
        "changes_information": {
            "original_value": "Inactive",
            "typo_space_addition": "In active"
        }
    },
    {
        "SQL": "SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'Inactive'",
        "tables": [
            "member",
            "zip_code"
        ],
        "columns": [
            "zip_code.zip_code",
            "zip_code.state",
            "zip_code.city",
            "member.position",
            "member.zip"
        ],
        "values": [
            {
                "table": "member",
                "column": "position",
                "value": "Inactive",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "'President' is a position of Student Club;",
        "values_list": [
            "member.position.inactive"
        ],
        "original_question": "What city and state did the President of the Student_Club grow up?",
        "question": "What city and state did the In active of the Student_Club grow up?",
        "original_SQL": "SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'President'",
        "changes_information": {
            "original_value": "Inactive",
            "typo_space_addition": "In active"
        }
    },
    {
        "SQL": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Inactive'",
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.position",
            "major.major_id",
            "major.major_name",
            "member.link_to_major"
        ],
        "values": [
            {
                "table": "member",
                "column": "position",
                "value": "Inactive",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "'Vice President' is a position of Student Club",
        "values_list": [
            "member.position.vice president"
        ],
        "original_question": "State the major name for the Vice President of the club.",
        "question": "State the major name for the In active of the club.",
        "original_SQL": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'",
        "changes_information": {
            "original_value": "Inactive",
            "typo_space_addition": "In active"
        }
    },
    {
        "SQL": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Inactive'",
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "major.department",
            "major.major_id",
            "member.position",
            "member.link_to_major"
        ],
        "values": [
            {
                "table": "member",
                "column": "position",
                "value": "Inactive",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "'President' is a position of Student Club",
        "values_list": [
            "member.position.inactive"
        ],
        "original_question": "Which department was the President of the club in?",
        "question": "Which department was the In active of the club in?",
        "original_SQL": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'",
        "changes_information": {
            "original_value": "Inactive",
            "typo_space_addition": "In active"
        }
    },
    {
        "SQL": "SELECT first_name, last_name, email FROM member WHERE position = 'Inactive'",
        "tables": [
            "member"
        ],
        "columns": [
            "member.email",
            "member.first_name",
            "member.position",
            "member.last_name"
        ],
        "values": [
            {
                "table": "member",
                "column": "position",
                "value": "Inactive",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "full name refers to first_name, last_name; 'Secretary' is a position of Student Club",
        "values_list": [
            "member.position.inactive"
        ],
        "original_question": "Provide the full name and email address of the Student_Club's Secretary.",
        "question": "Provide the full name and email address of the Student_Club's In active.",
        "original_SQL": "SELECT first_name, last_name, email FROM member WHERE position = 'Secretary'",
        "changes_information": {
            "original_value": "Inactive",
            "typo_space_addition": "In active"
        }
    },
    {
        "SQL": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Inactive'",
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.position",
            "major.major_id",
            "major.major_name",
            "member.link_to_major"
        ],
        "values": [
            {
                "table": "member",
                "column": "position",
                "value": "Inactive",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "name of major refers to major_name; 'Vice President' is position of Student Club",
        "values_list": [
            "member.position.vice president"
        ],
        "original_question": "State the name of major that Vice President has joined.",
        "question": "State the name of major that In active has joined.",
        "original_SQL": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Vice President'",
        "changes_information": {
            "original_value": "Inactive",
            "typo_space_addition": "In active"
        }
    },
    {
        "SQL": "SELECT T2.event_name FROM attendance AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T3.position = 'Inactive' AND T2.location = '900 E. Washington St.' AND T2.type = 'Social'",
        "tables": [
            "member",
            "event",
            "attendance"
        ],
        "columns": [
            "attendance.link_to_event",
            "event.event_name",
            "member.member_id",
            "event.type",
            "attendance.link_to_member",
            "member.position",
            "event.event_id",
            "event.location"
        ],
        "values": [
            {
                "table": "event",
                "column": "type",
                "value": "Social",
                "condition": "="
            },
            {
                "table": "member",
                "column": "position",
                "value": "Inactive",
                "condition": "="
            },
            {
                "table": "event",
                "column": "location",
                "value": "900 E. Washington St.",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "name of social event refers to event_name where type = 'Social'; 'Vice President' is position; located at refers to location",
        "values_list": [
            "event.type.social",
            "member.position.vice president",
            "event.location.900 e. washington st."
        ],
        "original_question": "What is the name of the social event that was attended by the vice president of the Student_Club located at 900 E. Washington St.?",
        "question": "What is the name of the social event that was attended by the In active of the Student_Club located at 900 E. Washington St.?",
        "original_SQL": "SELECT T2.event_name FROM attendance AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T3.position = 'Vice President' AND T2.location = '900 E. Washington St.' AND T2.type = 'Social'",
        "changes_information": {
            "original_value": "Inactive",
            "typo_space_addition": "In active"
        }
    },
    {
        "SQL": "SELECT T1.first_name, T1.last_name, college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Inactive'",
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.link_to_major",
            "member.first_name",
            "major.major_id",
            "member.position",
            "member.last_name"
        ],
        "values": [
            {
                "table": "member",
                "column": "position",
                "value": "Inactive",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "full name refers to first_name, last name",
        "values_list": [
            "member.position.inactive"
        ],
        "original_question": "Write the full name of the club member with the position of 'Secretary' and list which college the club member belongs to.",
        "question": "Write the full name of the club member with the position of 'In active' and list which college the club member belongs to.",
        "original_SQL": "SELECT T1.first_name, T1.last_name, college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Secretary'",
        "changes_information": {
            "original_value": "Inactive",
            "typo_space_addition": "In active"
        }
    },
    {
        "SQL": "select other_details from paragraphs where paragraph_text like 'Jersey'",
        "tables": [
            "paragraphs"
        ],
        "columns": [
            "paragraphs.other_details",
            "paragraphs.paragraph_text"
        ],
        "values": [
            {
                "table": "paragraphs",
                "column": "paragraph_text",
                "value": "Jersey",
                "condition": "LIKE"
            }
        ],
        "db_id": "cre_Doc_Template_Mgt",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "paragraphs.paragraph_text.jersey"
        ],
        "original_question": "Show paragraph details for paragraph with text 'Korea ' .",
        "question": "Show paragraph details for paragraph with text 'Jer sey ' .",
        "original_SQL": "select other_details from paragraphs where paragraph_text like 'korea'",
        "changes_information": {
            "original_value": "Jersey",
            "typo_space_addition": "Jer sey"
        }
    },
    {
        "SQL": "select other_details from paragraphs where paragraph_text like 'Jersey'",
        "tables": [
            "paragraphs"
        ],
        "columns": [
            "paragraphs.other_details",
            "paragraphs.paragraph_text"
        ],
        "values": [
            {
                "table": "paragraphs",
                "column": "paragraph_text",
                "value": "Jersey",
                "condition": "LIKE"
            }
        ],
        "db_id": "cre_Doc_Template_Mgt",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "paragraphs.paragraph_text.jersey"
        ],
        "original_question": "What are the details for the paragraph that includes the text 'Korea ' ?",
        "question": "What are the details for the paragraph that includes the text 'Jer sey ' ?",
        "original_SQL": "select other_details from paragraphs where paragraph_text like 'korea'",
        "changes_information": {
            "original_value": "Jersey",
            "typo_space_addition": "Jer sey"
        }
    },
    {
        "SQL": "SELECT T1.voice_sound_quality ,  T1.rhythm_tempo ,  T1.stage_presence FROM performance_score AS T1 JOIN participants AS T2 ON T1.participant_id  =  T2.id WHERE T2.name  =  'Freeway'",
        "tables": [
            "participants",
            "performance_score"
        ],
        "columns": [
            "performance_score.stage_presence",
            "performance_score.voice_sound_quality",
            "performance_score.rhythm_tempo",
            "participants.id",
            "performance_score.participant_id",
            "participants.name"
        ],
        "values": [
            {
                "table": "participants",
                "column": "name",
                "value": "Freeway",
                "condition": "="
            }
        ],
        "db_id": "sing_contest",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "participants.name.freeway"
        ],
        "original_question": "What are the voice sound quality score, rhythm tempo score and stage presence score performed by the participant named 'Freeway'?",
        "question": "What are the voice sound quality score, rhythm tempo score and stage presence score performed by the participant named 'Free way'?",
        "original_SQL": "SELECT T1.voice_sound_quality ,  T1.rhythm_tempo ,  T1.stage_presence FROM performance_score AS T1 JOIN participants AS T2 ON T1.participant_id  =  T2.id WHERE T2.name  =  'Freeway'",
        "changes_information": {
            "original_value": "Freeway",
            "typo_space_addition": "Free way"
        }
    },
    {
        "SQL": "SELECT SEX FROM Patient WHERE Diagnosis = 'arthralgia' AND `First Date` IS NOT NULL ORDER BY `First Date` ASC LIMIT 1",
        "tables": [
            "patient"
        ],
        "columns": [
            "patient.first date",
            "patient.diagnosis",
            "patient.sex"
        ],
        "values": [
            {
                "table": "patient",
                "column": "diagnosis",
                "value": "arthralgia",
                "condition": "="
            }
        ],
        "db_id": "thrombosis_prediction",
        "source": "bird_dev",
        "evidence": "gender means SEX; 'AORTITIS' refers to Diagnosis;",
        "values_list": [
            "patient.diagnosis.arthralgia"
        ],
        "original_question": "What was the gender of the first AORTITIS diagnosed patient?",
        "question": "What was the gender of the first arthr algia diagnosed patient?",
        "original_SQL": "SELECT SEX FROM Patient WHERE Diagnosis = 'AORTITIS' AND `First Date` IS NOT NULL ORDER BY `First Date` ASC LIMIT 1",
        "changes_information": {
            "original_value": "arthralgia",
            "typo_space_addition": "arthr algia"
        }
    },
    {
        "SQL": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Joaquin'",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player.player_name",
            "player_attributes.player_api_id",
            "player_attributes.attacking_work_rate",
            "player.player_api_id"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Joaquin",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "player.player_name.franco zennaro"
        ],
        "original_question": "What is the attacking work rate of the football playerr Franco Zennaro?",
        "question": "What is the attacking work rate of the football playerr Joa quin?",
        "original_SQL": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Franco Zennaro'",
        "changes_information": {
            "original_value": "Joaquin",
            "typo_space_addition": "Joa quin"
        }
    },
    {
        "SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Joaquin' AND SUBSTR(t2.`date`, 1, 10) = '2014-09-18'",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player.player_name",
            "player_attributes.player_api_id",
            "player_attributes.heading_accuracy",
            "player_attributes.date",
            "player.player_api_id"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Joaquin",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "header's finishing rate refers to heading_accuracy; on 18/09/2014 refers to date = '2014-09-18 00:00:00';",
        "values_list": [
            "player.player_name.francois affolter"
        ],
        "original_question": "What is the football player Francois Affolter header's finishing rate on 18/09/2014?",
        "question": "What is the football player Joa quin header's finishing rate on 18/09/2014?",
        "original_SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Francois Affolter' AND SUBSTR(t2.`date`, 1, 10) = '2014-09-18'",
        "changes_information": {
            "original_value": "Joaquin",
            "typo_space_addition": "Joa quin"
        }
    },
    {
        "SQL": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Joaquin' AND strftime('%Y', t2.date) = '2011'",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player.player_name",
            "player_attributes.player_api_id",
            "player_attributes.overall_rating",
            "player_attributes.date",
            "player.player_api_id"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Joaquin",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "in year 2011 refers to strftime('%Y', date) = '2011';",
        "values_list": [
            "player.player_name.gabriel tamas"
        ],
        "original_question": "What is the overall rating of the football player Gabriel Tamas in year 2011?",
        "question": "What is the overall rating of the football player Joa quin in year 2011?",
        "original_SQL": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Gabriel Tamas' AND strftime('%Y', t2.date) = '2011'",
        "changes_information": {
            "original_value": "Joaquin",
            "typo_space_addition": "Joa quin"
        }
    },
    {
        "SQL": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Joaquin'",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player.player_name",
            "player_attributes.player_api_id",
            "player_attributes.defensive_work_rate",
            "player.player_api_id"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Joaquin",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "player.player_name.david wilson"
        ],
        "original_question": "What is the defensive work rate of the football player David Wilson\n?",
        "question": "What is the defensive work rate of the football player Joa quin\n?",
        "original_SQL": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'David Wilson'",
        "changes_information": {
            "original_value": "Joaquin",
            "typo_space_addition": "Joa quin"
        }
    },
    {
        "SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Joaquin'",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player.player_name",
            "player_attributes.player_api_id",
            "player_attributes.potential",
            "player.player_api_id"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Joaquin",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "potential score refers to potential;",
        "values_list": [
            "player.player_name.aaron doran"
        ],
        "original_question": "What is Aaron Doran's potential score?",
        "question": "What is Joa quin's potential score?",
        "original_SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran'",
        "changes_information": {
            "original_value": "Joaquin",
            "typo_space_addition": "Joa quin"
        }
    },
    {
        "SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Joaquin'",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player_attributes.heading_accuracy",
            "player_attributes.player_api_id",
            "player.player_api_id",
            "player.player_name"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Joaquin",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "player.player_name.ariel borysiuk"
        ],
        "original_question": "What's the heading accuracy of Ariel Borysiuk?",
        "question": "What's the heading accuracy of Joa quin?",
        "original_SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ariel Borysiuk'",
        "changes_information": {
            "original_value": "Joaquin",
            "typo_space_addition": "Joa quin"
        }
    },
    {
        "SQL": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Joaquin'",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player.player_name",
            "player_attributes.player_api_id",
            "player.player_api_id",
            "player_attributes.preferred_foot"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Joaquin",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "Abdou Diallo refers to player_name = 'Abdou Diallo'; foot is preferred refers to preferred_foot",
        "values_list": [
            "player.player_name.abdou diallo"
        ],
        "original_question": "Which foot is preferred by Abdou Diallo?",
        "question": "Which foot is preferred by Joa quin?",
        "original_SQL": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abdou Diallo'",
        "changes_information": {
            "original_value": "Joaquin",
            "typo_space_addition": "Joa quin"
        }
    },
    {
        "SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2010-08-30' AND t1.player_name = 'Joaquin'",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player.player_name",
            "player_attributes.player_api_id",
            "player_attributes.potential",
            "player_attributes.date",
            "player.player_api_id"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Joaquin",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "Francesco Parravicini refers to player_name = 'Francesco Parravicini'; on 2010/8/30 refers to date = '2010-08-30 00:00:00'",
        "values_list": [
            "player.player_name.francesco parravicini"
        ],
        "original_question": "What was the potiential for Francesco Parravicini on 2010/8/30?",
        "question": "What was the potiential for Joa quin on 2010/8/30?",
        "original_SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2010-08-30' AND t1.player_name = 'Francesco Parravicini'",
        "changes_information": {
            "original_value": "Joaquin",
            "typo_space_addition": "Joa quin"
        }
    },
    {
        "SQL": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Joaquin' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player.player_name",
            "player.player_fifa_api_id",
            "player_attributes.crossing",
            "player_attributes.date",
            "player_attributes.player_fifa_api_id"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Joaquin",
                "condition": "="
            },
            {
                "table": "player",
                "column": "player_name",
                "value": "Kevin Constant",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)",
        "values_list": [
            "player.player_name.kevin constant",
            "player.player_name.kevin constant"
        ],
        "original_question": "When was the first time did Kevin Constant have his highest crossing score? Give the date.",
        "question": "When was the first time did Joa quin have his highest crossing score? Give the date.",
        "original_SQL": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Kevin Constant' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
        "changes_information": {
            "original_value": "Joaquin",
            "typo_space_addition": "Joa quin"
        }
    },
    {
        "SQL": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'AutoCorrelation'",
        "tables": [
            "users",
            "posts",
            "posthistory"
        ],
        "columns": [
            "posts.id",
            "posthistory.text",
            "posthistory.postid",
            "users.id",
            "users.displayname",
            "posts.viewcount",
            "posts.lasteditoruserid"
        ],
        "values": [
            {
                "table": "posthistory",
                "column": "text",
                "value": "AutoCorrelation",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "total views refer to ViewCount; Name the user refers to DisplayName; post 'Computer Game Datasets' refers to Text = 'Computer Game Datasets';",
        "values_list": [
            "posthistory.text.computer game datasets"
        ],
        "original_question": "Identify the total views on the post 'Computer Game Datasets'. Name the user who posted it last time.",
        "question": "Identify the total views on the post 'Auto Correlation'. Name the user who posted it last time.",
        "original_SQL": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'Computer Game Datasets'",
        "changes_information": {
            "original_value": "AutoCorrelation",
            "typo_space_addition": "Auto Correlation"
        }
    },
    {
        "SQL": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Rebellion'",
        "tables": [
            "publisher",
            "superhero"
        ],
        "columns": [
            "publisher.id",
            "superhero.publisher_id",
            "publisher.publisher_name"
        ],
        "values": [
            {
                "table": "publisher",
                "column": "publisher_name",
                "value": "Rebellion",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "name refers to superhero_name; the tallest hero refers to MAX(height_cm); published by Marvel Comics refers to publisher_name = 'Marvel Comics'",
        "values_list": [
            "publisher.publisher_name.marvel comics"
        ],
        "original_question": "Rank heroes published by Marvel Comics by their height in descending order.",
        "question": "Rank heroes published by Rebel lion by their height in descending order.",
        "original_SQL": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
        "changes_information": {
            "original_value": "Rebellion",
            "typo_space_addition": "Rebel lion"
        }
    },
    {
        "SQL": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Rebellion' GROUP BY colour.colour",
        "tables": [
            "publisher",
            "superhero",
            "colour"
        ],
        "columns": [
            "superhero.id",
            "colour.colour",
            "publisher.publisher_name",
            "colour.id",
            "publisher.id",
            "superhero.eye_colour_id",
            "superhero.publisher_id"
        ],
        "values": [
            {
                "table": "publisher",
                "column": "publisher_name",
                "value": "Rebellion",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; most common color refers to COUNT(superhero.id) DESC;",
        "values_list": [
            "publisher.publisher_name.marvel comics"
        ],
        "original_question": "Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color.",
        "question": "Rank superheroes from Rebel lion by their eye color popularity, starting with the most common color.",
        "original_SQL": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY colour.colour",
        "changes_information": {
            "original_value": "Rebellion",
            "typo_space_addition": "Rebel lion"
        }
    },
    {
        "SQL": "SELECT id FROM publisher WHERE publisher_name = 'Rebellion'",
        "tables": [
            "publisher"
        ],
        "columns": [
            "publisher.id",
            "publisher.publisher_name"
        ],
        "values": [
            {
                "table": "publisher",
                "column": "publisher_name",
                "value": "Rebellion",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "Star Trek is the publisher_name;",
        "values_list": [
            "publisher.publisher_name.star trek"
        ],
        "original_question": "Give the publisher ID of Star Trek.",
        "question": "Give the publisher ID of Rebel lion.",
        "original_SQL": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'",
        "changes_information": {
            "original_value": "Rebellion",
            "typo_space_addition": "Rebel lion"
        }
    },
    {
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Rebellion' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
        "tables": [
            "publisher",
            "hero_attribute",
            "superhero",
            "attribute"
        ],
        "columns": [
            "superhero.id",
            "superhero.superhero_name",
            "publisher.publisher_name",
            "attribute.attribute_name",
            "publisher.id",
            "attribute.id",
            "hero_attribute.hero_id",
            "hero_attribute.attribute_value",
            "superhero.publisher_id",
            "hero_attribute.attribute_id"
        ],
        "values": [
            {
                "table": "publisher",
                "column": "publisher_name",
                "value": "Rebellion",
                "condition": "="
            },
            {
                "table": "attribute",
                "column": "attribute_name",
                "value": "Durability",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
        "values_list": [
            "publisher.publisher_name.dark horse comics",
            "attribute.attribute_name.durability"
        ],
        "original_question": "Which superhero has the most durability published by Dark Horse Comics?",
        "question": "Which superhero has the most durability published by Rebel lion?",
        "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
        "changes_information": {
            "original_value": "Rebellion",
            "typo_space_addition": "Rebel lion"
        }
    },
    {
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Rebellion' ORDER BY T1.weight_kg DESC LIMIT 1",
        "tables": [
            "publisher",
            "superhero"
        ],
        "columns": [
            "superhero.weight_kg",
            "superhero.superhero_name",
            "publisher.publisher_name",
            "publisher.id",
            "superhero.publisher_id"
        ],
        "values": [
            {
                "table": "publisher",
                "column": "publisher_name",
                "value": "Rebellion",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "heaviest refers to MAX(weight_kg); DC Comics refers to publisher_name = 'DC Comics'; superhero refers to superhero_name;",
        "values_list": [
            "publisher.publisher_name.dc comics"
        ],
        "original_question": "Identify the heaviest superhero in DC Comics.",
        "question": "Identify the heaviest superhero in Rebel lion.",
        "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics' ORDER BY T1.weight_kg DESC LIMIT 1",
        "changes_information": {
            "original_value": "Rebellion",
            "typo_space_addition": "Rebel lion"
        }
    },
    {
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Atlantean'",
        "tables": [
            "race",
            "superhero"
        ],
        "columns": [
            "superhero.superhero_name",
            "race.race",
            "superhero.race_id",
            "race.id"
        ],
        "values": [
            {
                "table": "race",
                "column": "race",
                "value": "Atlantean",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "alien superheroes refers to race = 'Alien'; name of superhero refers to superhero_name;",
        "values_list": [
            "race.race.atlantean"
        ],
        "original_question": "Give the name of the alien superheroes.",
        "question": "Give the name of the At lantean superheroes.",
        "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'",
        "changes_information": {
            "original_value": "Atlantean",
            "typo_space_addition": "At lantean"
        }
    },
    {
        "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Atlantean'",
        "tables": [
            "race",
            "superhero"
        ],
        "columns": [
            "race.race",
            "superhero.full_name",
            "superhero.race_id",
            "race.id"
        ],
        "values": [
            {
                "table": "race",
                "column": "race",
                "value": "Atlantean",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "Demi-God superheroes refers to race = 'Demi-God'",
        "values_list": [
            "race.race.atlantean"
        ],
        "original_question": "List down at least five full name of Demi-God superheroes.",
        "question": "List down at least five full name of At lantean superheroes.",
        "original_SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God'",
        "changes_information": {
            "original_value": "Atlantean",
            "typo_space_addition": "At lantean"
        }
    },
    {
        "SQL": "SELECT DISTINCT T3.colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T1.height_cm = 185 AND T2.race = 'Atlantean'",
        "tables": [
            "race",
            "superhero",
            "colour"
        ],
        "columns": [
            "superhero.height_cm",
            "superhero.hair_colour_id",
            "race.id",
            "colour.colour",
            "superhero.race_id",
            "colour.id",
            "race.race"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "height_cm",
                "value": "185",
                "condition": "="
            },
            {
                "table": "race",
                "column": "race",
                "value": "Atlantean",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "185 cm tall refers to height_cm = 185; human superhero refers to race = 'human'; hair colour refers to colour where hair_colour_id = colour.id;",
        "values_list": [
            "superhero.height_cm.185",
            "race.race.atlantean"
        ],
        "original_question": "Provide the hair colour of the human superhero who is 185 cm tall.",
        "question": "Provide the hair colour of the At lantean superhero who is 185 cm tall.",
        "original_SQL": "SELECT DISTINCT T3.colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T1.height_cm = 185 AND T2.race = 'Human'",
        "changes_information": {
            "original_value": "Atlantean",
            "typo_space_addition": "At lantean"
        }
    },
    {
        "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Atlantean'",
        "tables": [
            "race",
            "superhero"
        ],
        "columns": [
            "race.race",
            "superhero.full_name",
            "superhero.race_id",
            "race.id"
        ],
        "values": [
            {
                "table": "race",
                "column": "race",
                "value": "Atlantean",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "vampire heroes refers to race = 'Vampire';",
        "values_list": [
            "race.race.atlantean"
        ],
        "original_question": "Provide the full names of vampire heroes.",
        "question": "Provide the full names of At lantean heroes.",
        "original_SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'",
        "changes_information": {
            "original_value": "Atlantean",
            "typo_space_addition": "At lantean"
        }
    },
    {
        "SQL": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Carolyn'",
        "tables": [
            "frpm",
            "schools"
        ],
        "columns": [
            "frpm.district code",
            "frpm.cdscode",
            "frpm.free meal count (k-12)",
            "schools.admfname1",
            "schools.cdscode",
            "frpm.enrollment (k-12)"
        ],
        "values": [
            {
                "table": "schools",
                "column": "admfname1",
                "value": "Carolyn",
                "condition": "="
            }
        ],
        "db_id": "california_schools",
        "source": "bird_dev",
        "evidence": "Percent (%) Eligible Free (K-12) = `Free Meal Count (K-12)` / `Enrollment (K-12)` * 100%",
        "values_list": [
            "schools.admfname1.carolyn"
        ],
        "original_question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Alusine. List the district code of the school.",
        "question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Caro lyn. List the district code of the school.",
        "original_SQL": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Alusine'",
        "changes_information": {
            "original_value": "Carolyn",
            "typo_space_addition": "Caro lyn"
        }
    },
    {
        "SQL": "SELECT T1.NumTstTakr FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Oakland'",
        "tables": [
            "satscores",
            "schools"
        ],
        "columns": [
            "schools.cdscode",
            "schools.mailcity",
            "satscores.numtsttakr",
            "satscores.cds"
        ],
        "values": [
            {
                "table": "schools",
                "column": "mailcity",
                "value": "Oakland",
                "condition": "="
            }
        ],
        "db_id": "california_schools",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "schools.mailcity.oakland"
        ],
        "original_question": "How many test takers are there at the school/s whose mailing city address is in Fresno?",
        "question": "How many test takers are there at the school/s whose mailing city address is in Oak land?",
        "original_SQL": "SELECT T1.NumTstTakr FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Fresno'",
        "changes_information": {
            "original_value": "Oakland",
            "typo_space_addition": "Oak land"
        }
    },
    {
        "SQL": "SELECT id FROM sets WHERE type = 'memorabilia' ORDER BY totalSetSize DESC LIMIT 1",
        "tables": [
            "sets"
        ],
        "columns": [
            "sets.id",
            "sets.type",
            "sets.totalsetsize"
        ],
        "values": [
            {
                "table": "sets",
                "column": "type",
                "value": "memorabilia",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "expansion type refers to type where type = 'commander'; totalSetSize: The total number of cards in the set, including promotional and related supplemental products but excluding Alchemy modifications; highest total number of cards refers to MAX(totalSetSize)",
        "values_list": [
            "sets.type.memorabilia"
        ],
        "original_question": "Among the sets whose expansion type is Commander, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set.",
        "question": "Among the sets whose expansion type is memor abilia, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set.",
        "original_SQL": "SELECT id FROM sets WHERE type = 'commander' ORDER BY totalSetSize DESC LIMIT 1",
        "changes_information": {
            "original_value": "memorabilia",
            "typo_space_addition": "memor abilia"
        }
    },
    {
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraxas'",
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "colour.id",
            "superhero.eye_colour_id",
            "superhero.full_name",
            "colour.colour"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "full_name",
                "value": "Abraxas",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Abraham Sapien is the full name of superhero;",
        "values_list": [
            "superhero.full_name.abraham sapien"
        ],
        "original_question": "What is the eyes colour of Abraham Sapien?",
        "question": "What is the eyes colour of Abra xas?",
        "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraham Sapien'",
        "changes_information": {
            "original_value": "Abraxas",
            "typo_space_addition": "Abra xas"
        }
    },
    {
        "SQL": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Abraxas'",
        "tables": [
            "race",
            "superhero"
        ],
        "columns": [
            "race.id",
            "superhero.superhero_name",
            "superhero.full_name",
            "superhero.race_id",
            "race.race"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "full_name",
                "value": "Abraxas",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "hero name refers to superhero_name; Charles Chandler is the full name of superhero;",
        "values_list": [
            "superhero.full_name.charles chandler"
        ],
        "original_question": "Provide the hero name and race of Charles Chandler.",
        "question": "Provide the hero name and race of Abra xas.",
        "original_SQL": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Charles Chandler'",
        "changes_information": {
            "original_value": "Abraxas",
            "typo_space_addition": "Abra xas"
        }
    },
    {
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Abraxas'",
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "hero_power.power_id",
            "superhero.id",
            "superpower.id",
            "superhero.full_name",
            "hero_power.hero_id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "full_name",
                "value": "Abraxas",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "Hunter Zolomon is the full name of superhero; list the powers refers to power_name;",
        "values_list": [
            "superhero.full_name.hunter zolomon"
        ],
        "original_question": "List the powers of Hunter Zolomon.",
        "question": "List the powers of Abra xas.",
        "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Hunter Zolomon'",
        "changes_information": {
            "original_value": "Abraxas",
            "typo_space_addition": "Abra xas"
        }
    },
    {
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraxas'",
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "colour.id",
            "superhero.eye_colour_id",
            "superhero.full_name",
            "colour.colour"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "full_name",
                "value": "Abraxas",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Karen Beecher-Duncan is the full name of superhero;",
        "values_list": [
            "superhero.full_name.karen beecher-duncan"
        ],
        "original_question": "Provide the eye colour of the superhero who has Karen Beecher-Duncan as their full name.",
        "question": "Provide the eye colour of the superhero who has Abra xas as their full name.",
        "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan'",
        "changes_information": {
            "original_value": "Abraxas",
            "typo_space_addition": "Abra xas"
        }
    },
    {
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Abraxas'",
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "hero_power.power_id",
            "superhero.id",
            "superpower.id",
            "superhero.full_name",
            "hero_power.hero_id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "full_name",
                "value": "Abraxas",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "superpowers refers to power_name; Helen Parr is the full name of superhero;",
        "values_list": [
            "superhero.full_name.helen parr"
        ],
        "original_question": "What is the superpowers of the superhero has Helen Parr as their full name?",
        "question": "What is the superpowers of the superhero has Abra xas as their full name?",
        "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Helen Parr'",
        "changes_information": {
            "original_value": "Abraxas",
            "typo_space_addition": "Abra xas"
        }
    },
    {
        "SQL": "SELECT superhero_name FROM superhero WHERE full_name = 'Abraxas'",
        "tables": [
            "superhero"
        ],
        "columns": [
            "superhero.superhero_name",
            "superhero.full_name"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "full_name",
                "value": "Abraxas",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "name the superhero refers to superhero_name; Charles Chandler is the full name of superhero;",
        "values_list": [
            "superhero.full_name.charles chandler"
        ],
        "original_question": "Name the superhero, otherwise known as Charles Chandler.",
        "question": "Name the superhero, otherwise known as Abra xas.",
        "original_SQL": "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'",
        "changes_information": {
            "original_value": "Abraxas",
            "typo_space_addition": "Abra xas"
        }
    },
    {
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Banshee'",
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "hero_power.power_id",
            "superhero.id",
            "superpower.id",
            "superhero.superhero_name",
            "hero_power.hero_id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Banshee",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "3-D Man refers to superhero_name = '3-D Man'; superpowers refers to power_name",
        "values_list": [
            "superhero.superhero_name.3-d man"
        ],
        "original_question": "Please list all the superpowers of 3-D Man.",
        "question": "Please list all the superpowers of Ban shee.",
        "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = '3-D Man'",
        "changes_information": {
            "original_value": "Banshee",
            "typo_space_addition": "Ban shee"
        }
    },
    {
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Banshee'",
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "colour.id",
            "superhero.superhero_name",
            "superhero.skin_colour_id",
            "colour.colour"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Banshee",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "Apocalypse refers to superhero_name = 'Apocalypse'; colour of skin refers to colour where skin_colour_id = colour.id",
        "values_list": [
            "superhero.superhero_name.banshee"
        ],
        "original_question": "What is the colour of Apocalypse's skin?",
        "question": "What is the colour of Ban shee's skin?",
        "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse'",
        "changes_information": {
            "original_value": "Banshee",
            "typo_space_addition": "Ban shee"
        }
    },
    {
        "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Banshee'",
        "tables": [
            "publisher",
            "superhero"
        ],
        "columns": [
            "superhero.superhero_name",
            "publisher.id",
            "superhero.publisher_id",
            "publisher.publisher_name"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Banshee",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "the publisher refers to publisher_name; Sauron refers to superhero_name = 'Sauron'",
        "values_list": [
            "superhero.superhero_name.banshee"
        ],
        "original_question": "Who is the publisher of Sauron?",
        "question": "Who is the publisher of Ban shee?",
        "original_SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron'",
        "changes_information": {
            "original_value": "Banshee",
            "typo_space_addition": "Ban shee"
        }
    },
    {
        "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Banshee'",
        "tables": [
            "publisher",
            "superhero"
        ],
        "columns": [
            "superhero.superhero_name",
            "publisher.id",
            "superhero.publisher_id",
            "publisher.publisher_name"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Banshee",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "Blue Beetle II refers to superhero_name = 'Blue Beetle II'",
        "values_list": [
            "superhero.superhero_name.blue beetle ii"
        ],
        "original_question": "What is the publisher's name of Blue Beetle II?",
        "question": "What is the publisher's name of Ban shee?",
        "original_SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Blue Beetle II'",
        "changes_information": {
            "original_value": "Banshee",
            "typo_space_addition": "Ban shee"
        }
    },
    {
        "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Banshee'",
        "tables": [
            "race",
            "superhero"
        ],
        "columns": [
            "superhero.superhero_name",
            "superhero.race_id",
            "race.race",
            "race.id"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Banshee",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "Copycat is the superhero_name;",
        "values_list": [
            "superhero.superhero_name.banshee"
        ],
        "original_question": "What is Copycat's race?",
        "question": "What is Ban shee's race?",
        "original_SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'",
        "changes_information": {
            "original_value": "Banshee",
            "typo_space_addition": "Ban shee"
        }
    },
    {
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Banshee'",
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "hero_power.power_id",
            "superhero.id",
            "superpower.id",
            "superhero.superhero_name",
            "hero_power.hero_id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Banshee",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "superpowers refers to power_name; Deathlok refers to superhero_name = 'Deathlok'",
        "values_list": [
            "superhero.superhero_name.banshee"
        ],
        "original_question": "Provide the superpowers of the superhero called Deathlok.",
        "question": "Provide the superpowers of the superhero called Ban shee.",
        "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Deathlok'",
        "changes_information": {
            "original_value": "Banshee",
            "typo_space_addition": "Ban shee"
        }
    },
    {
        "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Banshee'",
        "tables": [
            "hero_attribute",
            "superhero"
        ],
        "columns": [
            "superhero.superhero_name",
            "hero_attribute.hero_id",
            "hero_attribute.attribute_value",
            "superhero.id"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Banshee",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "Abomination refers to superhero_name = 'Abomination';",
        "values_list": [
            "superhero.superhero_name.banshee"
        ],
        "original_question": "Indicate the attribute value of superhero Abomination.",
        "question": "Indicate the attribute value of superhero Ban shee.",
        "original_SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Abomination'",
        "changes_information": {
            "original_value": "Banshee",
            "typo_space_addition": "Ban shee"
        }
    },
    {
        "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Banshee'",
        "tables": [
            "race",
            "superhero"
        ],
        "columns": [
            "superhero.superhero_name",
            "superhero.race_id",
            "race.race",
            "race.id"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Banshee",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "group refers to race; A-Bomb refers to superhero_name = 'A-Bomb';",
        "values_list": [
            "superhero.superhero_name.banshee"
        ],
        "original_question": "Which group does superhero A-Bomb belong to?",
        "question": "Which group does superhero Ban shee belong to?",
        "original_SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
        "changes_information": {
            "original_value": "Banshee",
            "typo_space_addition": "Ban shee"
        }
    },
    {
        "SQL": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Banshee'",
        "tables": [
            "superhero",
            "gender"
        ],
        "columns": [
            "gender.gender",
            "gender.id",
            "superhero.gender_id",
            "superhero.superhero_name"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Banshee",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "Agent 13 hero refers to superhero_name = 'Agent 13';",
        "values_list": [
            "superhero.superhero_name.agent 13"
        ],
        "original_question": "What is the gender of Agent 13 hero?",
        "question": "What is the gender of Ban shee hero?",
        "original_SQL": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent 13'",
        "changes_information": {
            "original_value": "Banshee",
            "typo_space_addition": "Ban shee"
        }
    },
    {
        "SQL": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Banshee'",
        "tables": [
            "race",
            "superhero",
            "alignment"
        ],
        "columns": [
            "alignment.alignment",
            "superhero.alignment_id",
            "race.id",
            "superhero.superhero_name",
            "superhero.race_id",
            "race.race",
            "alignment.id"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Banshee",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "Cameron Hicks refers to superhero_name = 'Cameron Hicks';",
        "values_list": [
            "superhero.superhero_name.cameron hicks"
        ],
        "original_question": "What are the race and alignment of Cameron Hicks?",
        "question": "What are the race and alignment of Ban shee?",
        "original_SQL": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Cameron Hicks'",
        "changes_information": {
            "original_value": "Banshee",
            "typo_space_addition": "Ban shee"
        }
    },
    {
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Banshee'",
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "hero_power.power_id",
            "superhero.id",
            "superpower.id",
            "superhero.superhero_name",
            "hero_power.hero_id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Banshee",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "Abomination refers to superhero_name = 'Abomination'; superpower refers to power_name;",
        "values_list": [
            "superhero.superhero_name.banshee"
        ],
        "original_question": "What is Abomination's superpower?",
        "question": "What is Ban shee's superpower?",
        "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Abomination'",
        "changes_information": {
            "original_value": "Banshee",
            "typo_space_addition": "Ban shee"
        }
    },
    {
        "SQL": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Banshee'",
        "tables": [
            "hero_attribute",
            "superhero",
            "attribute"
        ],
        "columns": [
            "hero_attribute.attribute_value",
            "superhero.id",
            "superhero.superhero_name",
            "attribute.id",
            "hero_attribute.hero_id",
            "attribute.attribute_name",
            "hero_attribute.attribute_id"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Banshee",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "3-D Man is the superhero_name. attributes refers to attribute_name; values refers to attribute_value;",
        "values_list": [
            "superhero.superhero_name.3-d man"
        ],
        "original_question": "State all of 3-D Man's attributes along with their values.",
        "question": "State all of Ban shee's attributes along with their values.",
        "original_SQL": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = '3-D Man'",
        "changes_information": {
            "original_value": "Banshee",
            "typo_space_addition": "Ban shee"
        }
    },
    {
        "SQL": "SELECT T4.alignment, T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'Banshee'",
        "tables": [
            "superhero",
            "hero_power",
            "superpower",
            "alignment"
        ],
        "columns": [
            "alignment.alignment",
            "superhero.alignment_id",
            "superhero.id",
            "hero_power.power_id",
            "superpower.id",
            "superhero.superhero_name",
            "hero_power.hero_id",
            "alignment.id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Banshee",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "superpowers refers to power_name;",
        "values_list": [
            "superhero.superhero_name.atom iv"
        ],
        "original_question": "Give the alignment and superpowers of the superhero named Atom IV.",
        "question": "Give the alignment and superpowers of the superhero named Ban shee.",
        "original_SQL": "SELECT T4.alignment, T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'Atom IV'",
        "changes_information": {
            "original_value": "Banshee",
            "typo_space_addition": "Ban shee"
        }
    },
    {
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Banshee'",
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "hero_power.power_id",
            "superhero.id",
            "superpower.id",
            "superhero.superhero_name",
            "hero_power.hero_id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Banshee",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "Ajax refers to superhero_name = 'Ajax'; superpowers refers to power_name;",
        "values_list": [
            "superhero.superhero_name.banshee"
        ],
        "original_question": "List down Ajax's superpowers.",
        "question": "List down Ban shee's superpowers.",
        "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Ajax'",
        "changes_information": {
            "original_value": "Banshee",
            "typo_space_addition": "Ban shee"
        }
    },
    {
        "SQL": "SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Banshee' ORDER BY T2.attribute_value ASC LIMIT 1",
        "tables": [
            "hero_attribute",
            "superhero",
            "attribute"
        ],
        "columns": [
            "hero_attribute.attribute_value",
            "superhero.id",
            "superhero.superhero_name",
            "attribute.id",
            "hero_attribute.hero_id",
            "attribute.attribute_name",
            "hero_attribute.attribute_id"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Banshee",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "weakest attribute refers to attribute_name WHERE MIN(attribute_value); Black Panther refers to superhero_name = 'Black Panther';",
        "values_list": [
            "superhero.superhero_name.black panther"
        ],
        "original_question": "Identify the weakest attribute of the Black Panther.",
        "question": "Identify the weakest attribute of the Ban shee.",
        "original_SQL": "SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Black Panther' ORDER BY T2.attribute_value ASC LIMIT 1",
        "changes_information": {
            "original_value": "Banshee",
            "typo_space_addition": "Ban shee"
        }
    },
    {
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Banshee'",
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "colour.id",
            "superhero.eye_colour_id",
            "superhero.superhero_name",
            "colour.colour"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Banshee",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "Abomination refers to superhero_name = 'Abomination'; eye colour refers to colour.colour where eye_colour_id = colour.id;",
        "values_list": [
            "superhero.superhero_name.banshee"
        ],
        "original_question": "What is Abomination's eye colour?",
        "question": "What is Ban shee's eye colour?",
        "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Abomination'",
        "changes_information": {
            "original_value": "Banshee",
            "typo_space_addition": "Ban shee"
        }
    },
    {
        "SQL": "SELECT full_name FROM superhero WHERE superhero_name = 'Banshee'",
        "tables": [
            "superhero"
        ],
        "columns": [
            "superhero.superhero_name",
            "superhero.full_name"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Banshee",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "superhero.superhero_name.banshee"
        ],
        "original_question": "Provide the full name of the superhero named Alien.",
        "question": "Provide the full name of the superhero named Ban shee.",
        "original_SQL": "SELECT full_name FROM superhero WHERE superhero_name = 'Alien'",
        "changes_information": {
            "original_value": "Banshee",
            "typo_space_addition": "Ban shee"
        }
    },
    {
        "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Banshee'",
        "tables": [
            "hero_attribute",
            "superhero"
        ],
        "columns": [
            "superhero.superhero_name",
            "hero_attribute.hero_id",
            "hero_attribute.attribute_value",
            "superhero.id"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Banshee",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "superhero.superhero_name.banshee"
        ],
        "original_question": "List the attribute value of the superhero named Aquababy.",
        "question": "List the attribute value of the superhero named Ban shee.",
        "original_SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Aquababy'",
        "changes_information": {
            "original_value": "Banshee",
            "typo_space_addition": "Ban shee"
        }
    },
    {
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Banshee'",
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "colour.id",
            "superhero.eye_colour_id",
            "superhero.superhero_name",
            "colour.colour"
        ],
        "values": [
            {
                "table": "superhero",
                "column": "superhero_name",
                "value": "Banshee",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Blackwulf refers to superhero_name = 'Blackwulf';",
        "values_list": [
            "superhero.superhero_name.banshee"
        ],
        "original_question": "Give the eye colour of Blackwulf.",
        "question": "Give the eye colour of Ban shee.",
        "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Blackwulf'",
        "changes_information": {
            "original_value": "Banshee",
            "typo_space_addition": "Ban shee"
        }
    },
    {
        "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Telepathy' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
        "tables": [
            "publisher",
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "superhero.id",
            "hero_power.power_id",
            "superpower.id",
            "publisher.publisher_name",
            "publisher.id",
            "hero_power.hero_id",
            "superpower.power_name",
            "superhero.publisher_id"
        ],
        "values": [
            {
                "table": "superpower",
                "column": "power_name",
                "value": "Telepathy",
                "condition": "="
            },
            {
                "table": "publisher",
                "column": "publisher_name",
                "value": "Marvel Comics",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
        "values_list": [
            "superpower.power_name.super strength",
            "publisher.publisher_name.marvel comics"
        ],
        "original_question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
        "question": "List the superheroes from Marvel Comics who have the super power of 'Tele pathy'.",
        "original_SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
        "changes_information": {
            "original_value": "Telepathy",
            "typo_space_addition": "Tele pathy"
        }
    },
    {
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Telepathy'",
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "hero_power.power_id",
            "superhero.id",
            "superpower.id",
            "superhero.superhero_name",
            "hero_power.hero_id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "superpower",
                "column": "power_name",
                "value": "Telepathy",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
        "values_list": [
            "superpower.power_name.death touch"
        ],
        "original_question": "What are the names of the superheroes with the power of death touch?",
        "question": "What are the names of the superheroes with the power of Tele pathy?",
        "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
        "changes_information": {
            "original_value": "Telepathy",
            "typo_space_addition": "Tele pathy"
        }
    },
    {
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Telepathy'",
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "hero_power.power_id",
            "superhero.id",
            "superpower.id",
            "superhero.superhero_name",
            "hero_power.hero_id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "superpower",
                "column": "power_name",
                "value": "Telepathy",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
        "values_list": [
            "superpower.power_name.telepathy"
        ],
        "original_question": "List the name of superheroes with flight power.",
        "question": "List the name of superheroes with Tele pathy power.",
        "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'",
        "changes_information": {
            "original_value": "Telepathy",
            "typo_space_addition": "Tele pathy"
        }
    },
    {
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Telepathy'",
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "hero_power.power_id",
            "superhero.id",
            "superpower.id",
            "superhero.superhero_name",
            "hero_power.hero_id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "superpower",
                "column": "power_name",
                "value": "Telepathy",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "adaptation power refers to power_name = 'Adaptation';",
        "values_list": [
            "superpower.power_name.telepathy"
        ],
        "original_question": "Provide superheroes' names who have the adaptation power.",
        "question": "Provide superheroes' names who have the Tele pathy power.",
        "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'",
        "changes_information": {
            "original_value": "Telepathy",
            "typo_space_addition": "Tele pathy"
        }
    },
    {
        "SQL": "SELECT id FROM superpower WHERE power_name = 'Telepathy'",
        "tables": [
            "superpower"
        ],
        "columns": [
            "superpower.power_name",
            "superpower.id"
        ],
        "values": [
            {
                "table": "superpower",
                "column": "power_name",
                "value": "Telepathy",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
        "values_list": [
            "superpower.power_name.telepathy"
        ],
        "original_question": "What is the power ID of cryokinesis?",
        "question": "What is the power ID of Tele pathy?",
        "original_SQL": "SELECT id FROM superpower WHERE power_name = 'Cryokinesis'",
        "changes_information": {
            "original_value": "Telepathy",
            "typo_space_addition": "Tele pathy"
        }
    },
    {
        "SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Telepathy'",
        "tables": [
            "superhero",
            "gender",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "gender.gender",
            "hero_power.power_id",
            "superhero.id",
            "superpower.id",
            "gender.id",
            "superhero.gender_id",
            "hero_power.hero_id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "superpower",
                "column": "power_name",
                "value": "Telepathy",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "ability of Phoenix Force refers to power_name = 'Phoenix Force';",
        "values_list": [
            "superpower.power_name.phoenix force"
        ],
        "original_question": "Identify the gender of the superhero who has the ability of Phoenix Force.",
        "question": "Identify the gender of the superhero who has the ability of Tele pathy.",
        "original_SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force'",
        "changes_information": {
            "original_value": "Telepathy",
            "typo_space_addition": "Tele pathy"
        }
    },
    {
        "SQL": "SELECT team_short_name FROM Team WHERE team_long_name = 'Sunderland'",
        "tables": [
            "team"
        ],
        "columns": [
            "team.team_short_name",
            "team.team_long_name"
        ],
        "values": [
            {
                "table": "team",
                "column": "team_long_name",
                "value": "Sunderland",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "short name of the football team refers to team_short_name; Queens Park Rangers refers to team_long_name = 'Queens Park Rangers';",
        "values_list": [
            "team.team_long_name.queens park rangers"
        ],
        "original_question": "What is the short name of the football team Queens Park Rangers?",
        "question": "What is the short name of the football team Sunder land?",
        "original_SQL": "SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers'",
        "changes_information": {
            "original_value": "Sunderland",
            "typo_space_addition": "Sunder land"
        }
    },
    {
        "SQL": "SELECT DISTINCT t2.buildUpPlayPositioningClass FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.team_long_name = 'Sunderland'",
        "tables": [
            "team_attributes",
            "team"
        ],
        "columns": [
            "team_attributes.team_fifa_api_id",
            "team.team_fifa_api_id",
            "team_attributes.buildupplaypositioningclass",
            "team.team_long_name"
        ],
        "values": [
            {
                "table": "team",
                "column": "team_long_name",
                "value": "Sunderland",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "ADO Den Haag refers to team_long_name = 'ADO Den Haag'; freedom of movement in the 1st two thirds of the pitch refers to buildUpPlayPositioningClass;",
        "values_list": [
            "team.team_long_name.ado den haag"
        ],
        "original_question": "What is the ADO Den Haag team freedom of movement in the 1st two thirds of the pitch?",
        "question": "What is the Sunder land team freedom of movement in the 1st two thirds of the pitch?",
        "original_SQL": "SELECT DISTINCT t2.buildUpPlayPositioningClass FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.team_long_name = 'ADO Den Haag'",
        "changes_information": {
            "original_value": "Sunderland",
            "typo_space_addition": "Sunder land"
        }
    },
    {
        "SQL": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Sunderland' ORDER BY t2.chanceCreationPassing DESC LIMIT 1",
        "tables": [
            "team_attributes",
            "team"
        ],
        "columns": [
            "team.team_api_id",
            "team_attributes.chancecreationpassing",
            "team_attributes.team_api_id",
            "team_attributes.chancecreationpassingclass",
            "team.team_long_name"
        ],
        "values": [
            {
                "table": "team",
                "column": "team_long_name",
                "value": "Sunderland",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "Ajax's refers to team_long_name = 'Ajax'; chance creation passing score refers to MAX(chanceCreationPassing); classified refer to chanceCreationPassingClass",
        "values_list": [
            "team.team_long_name.sunderland"
        ],
        "original_question": "What is Ajax's highest chance creation passing score and what is it classified as?",
        "question": "What is Sunder land's highest chance creation passing score and what is it classified as?",
        "original_SQL": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Ajax' ORDER BY t2.chanceCreationPassing DESC LIMIT 1",
        "changes_information": {
            "original_value": "Sunderland",
            "typo_space_addition": "Sunder land"
        }
    },
    {
        "SQL": "SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Sunderland' AND SUBSTR(t2.`date`, 1, 10) = '2011-02-22'",
        "tables": [
            "team_attributes",
            "team"
        ],
        "columns": [
            "team.team_api_id",
            "team_attributes.date",
            "team_attributes.team_api_id",
            "team_attributes.buildupplayspeedclass",
            "team.team_long_name"
        ],
        "values": [
            {
                "table": "team",
                "column": "team_long_name",
                "value": "Sunderland",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "\"Willem II\" refers to team_long_name = 'Willem II'; on 2011/2/22 refers to date = '2012-02-22'",
        "values_list": [
            "team.team_long_name.willem ii"
        ],
        "original_question": "What was the build up play speed class for \"Willem II\" on 2011/2/22?",
        "question": "What was the build up play speed class for \"Sunder land\" on 2011/2/22?",
        "original_SQL": "SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Willem II' AND SUBSTR(t2.`date`, 1, 10) = '2011-02-22'",
        "changes_information": {
            "original_value": "Sunderland",
            "typo_space_addition": "Sunder land"
        }
    },
    {
        "SQL": "SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Sunderland' AND SUBSTR(t2.`date`, 1, 10) = '2013-09-20'",
        "tables": [
            "team_attributes",
            "team"
        ],
        "columns": [
            "team.team_api_id",
            "team_attributes.date",
            "team_attributes.team_api_id",
            "team_attributes.chancecreationpassingclass",
            "team.team_long_name"
        ],
        "values": [
            {
                "table": "team",
                "column": "team_long_name",
                "value": "Sunderland",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "\"PEC Zwolle\" refers to team_long_name = 'PEC Zwolle'; on 2013/9/20 refers to date = '2013-09-20 00:00:00'",
        "values_list": [
            "team.team_long_name.pec zwolle"
        ],
        "original_question": "State the chance creation passing class for \"PEC Zwolle\" on 2013/9/20.",
        "question": "State the chance creation passing class for \"Sunder land\" on 2013/9/20.",
        "original_SQL": "SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'PEC Zwolle' AND SUBSTR(t2.`date`, 1, 10) = '2013-09-20'",
        "changes_information": {
            "original_value": "Sunderland",
            "typo_space_addition": "Sunder land"
        }
    },
    {
        "SQL": "SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Sunderland' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'",
        "tables": [
            "team_attributes",
            "team"
        ],
        "columns": [
            "team.team_api_id",
            "team_attributes.date",
            "team_attributes.team_api_id",
            "team.team_long_name",
            "team_attributes.chancecreationcrossingclass"
        ],
        "values": [
            {
                "table": "team",
                "column": "team_long_name",
                "value": "Sunderland",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "\"Hull City\" refers to team_long_name = 'Hull City'; on 2010/2/22 refers to date = '2010-02-22 00:00:00'",
        "values_list": [
            "team.team_long_name.hull city"
        ],
        "original_question": "What was the chance creation crossing class for \"Hull City\" on 2010/2/22?",
        "question": "What was the chance creation crossing class for \"Sunder land\" on 2010/2/22?",
        "original_SQL": "SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hull City' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'",
        "changes_information": {
            "original_value": "Sunderland",
            "typo_space_addition": "Sunder land"
        }
    },
    {
        "SQL": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'Sunderland'",
        "tables": [
            "team_attributes",
            "team"
        ],
        "columns": [
            "team.team_api_id",
            "team.team_long_name",
            "team_attributes.buildupplayspeedclass",
            "team_attributes.team_api_id"
        ],
        "values": [
            {
                "table": "team",
                "column": "team_long_name",
                "value": "Sunderland",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "KSV Cercle Brugge refers to team_long_name = 'KSV Cercle Brugge'; speed class refers to buildUpPlaySpeedClass",
        "values_list": [
            "team.team_long_name.ksv cercle brugge"
        ],
        "original_question": "Does the KSV Cercle Brugge team have a slow, balanced or fast speed class?",
        "question": "Does the Sunder land team have a slow, balanced or fast speed class?",
        "original_SQL": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'KSV Cercle Brugge'",
        "changes_information": {
            "original_value": "Sunderland",
            "typo_space_addition": "Sunder land"
        }
    },
    {
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Kurtosis'",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.id",
            "posts.title",
            "users.displayname",
            "posts.owneruserid"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Kurtosis",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"csgillespie\" is the DisplayName of user",
        "values_list": [
            "users.displayname.kurtosis"
        ],
        "original_question": "Please list the titles of the posts owned by the user csgillespie?",
        "question": "Please list the titles of the posts owned by the user Kurt osis?",
        "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
        "changes_information": {
            "original_value": "Kurtosis",
            "typo_space_addition": "Kurt osis"
        }
    },
    {
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Kurtosis' ORDER BY T1.ViewCount DESC LIMIT 1",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "posts.title",
            "posts.owneruserid",
            "users.id",
            "users.displayname",
            "posts.viewcount"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Kurtosis",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"csgillespie\" is the DisplayName of user; highest popularity refers to Max(ViewCount)",
        "values_list": [
            "users.displayname.kurtosis"
        ],
        "original_question": "What is the title of the post that is owned by csgillespie and has the highest popularity?",
        "question": "What is the title of the post that is owned by Kurt osis and has the highest popularity?",
        "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.ViewCount DESC LIMIT 1",
        "changes_information": {
            "original_value": "Kurtosis",
            "typo_space_addition": "Kurt osis"
        }
    },
    {
        "SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Kurtosis'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "badges.userid",
            "users.displayname",
            "badges.name"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Kurtosis",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"csgillespie\" is the DisplayName of user",
        "values_list": [
            "users.displayname.kurtosis"
        ],
        "original_question": "Please list the names of the badges obtained by csgillespie.",
        "question": "Please list the names of the badges obtained by Kurt osis.",
        "original_SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
        "changes_information": {
            "original_value": "Kurtosis",
            "typo_space_addition": "Kurt osis"
        }
    },
    {
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Kurtosis'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "badges.userid",
            "users.displayname",
            "badges.name"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Kurtosis",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"DatEpicCoderGuyWhoPrograms\" is the DisplayName;",
        "values_list": [
            "users.displayname.kurtosis"
        ],
        "original_question": "For the user whose display name is \"DatEpicCoderGuyWhoPrograms\", what is his/her badge's name?",
        "question": "For the user whose display name is \"Kurt osis\", what is his/her badge's name?",
        "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms'",
        "changes_information": {
            "original_value": "Kurtosis",
            "typo_space_addition": "Kurt osis"
        }
    },
    {
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Kurtosis'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "badges.userid",
            "users.displayname",
            "badges.name"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Kurtosis",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"SilentGhost\" is the DisplayName of user;",
        "values_list": [
            "users.displayname.kurtosis"
        ],
        "original_question": "What is the badge name that user 'SilentGhost' obtained?",
        "question": "What is the badge name that user 'Kurt osis' obtained?",
        "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'SilentGhost'",
        "changes_information": {
            "original_value": "Kurtosis",
            "typo_space_addition": "Kurt osis"
        }
    },
    {
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Kurtosis'",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.id",
            "posts.title",
            "users.displayname",
            "posts.owneruserid"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Kurtosis",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Vebjorn Ljosa\" is the DisplayName; last edited refers to LastEditorUserId",
        "values_list": [
            "users.displayname.vebjorn ljosa"
        ],
        "original_question": "List the title of posts which were edited by Vebjorn Ljosa.",
        "question": "List the title of posts which were edited by Kurt osis.",
        "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Vebjorn Ljosa'",
        "changes_information": {
            "original_value": "Kurtosis",
            "typo_space_addition": "Kurt osis"
        }
    },
    {
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Kurtosis'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "badges.userid",
            "users.displayname",
            "badges.name"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Kurtosis",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "users.displayname.kurtosis"
        ],
        "original_question": "What is the name of badge that the user whose display name is \"Pierre\" obtained?",
        "question": "What is the name of badge that the user whose display name is \"Kurt osis\" obtained?",
        "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Pierre'",
        "changes_information": {
            "original_value": "Kurtosis",
            "typo_space_addition": "Kurt osis"
        }
    },
    {
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Kurtosis'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "badges.userid",
            "users.displayname",
            "badges.name"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Kurtosis",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Sharpie\" is the DisplayName of user; user refers to UserId",
        "values_list": [
            "users.displayname.kurtosis"
        ],
        "original_question": "State the name of badge that the user whose display name is \"Sharpie\" obtained.",
        "question": "State the name of badge that the user whose display name is \"Kurt osis\" obtained.",
        "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sharpie'",
        "changes_information": {
            "original_value": "Kurtosis",
            "typo_space_addition": "Kurt osis"
        }
    },
    {
        "SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Kurtosis'",
        "tables": [
            "users",
            "posts",
            "posthistory"
        ],
        "columns": [
            "posts.tags",
            "posts.id",
            "users.id",
            "posthistory.postid",
            "users.displayname",
            "posthistory.userid"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Kurtosis",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "DisplayName = 'John Salvatier';",
        "values_list": [
            "users.displayname.john salvatier"
        ],
        "original_question": "What is the name of tags used by John Salvatier's?",
        "question": "What is the name of tags used by Kurt osis's?",
        "original_SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'John Salvatier'",
        "changes_information": {
            "original_value": "Kurtosis",
            "typo_space_addition": "Kurt osis"
        }
    },
    {
        "SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Kurtosis' ORDER BY T3.AnswerCount DESC LIMIT 1",
        "tables": [
            "users",
            "posts",
            "posthistory"
        ],
        "columns": [
            "posts.id",
            "posts.answercount",
            "posthistory.postid",
            "users.id",
            "users.displayname",
            "posthistory.userid"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Kurtosis",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "most answers count refers to MAX(AnswerCount); post by slashnick refers to DisplayName = 'slashnick';",
        "values_list": [
            "users.displayname.kurtosis"
        ],
        "original_question": "Which post by slashnick has the most answers count? State the post ID.",
        "question": "Which post by Kurt osis has the most answers count? State the post ID.",
        "original_SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'slashnick' ORDER BY T3.AnswerCount DESC LIMIT 1",
        "changes_information": {
            "original_value": "Kurtosis",
            "typo_space_addition": "Kurt osis"
        }
    },
    {
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Kurtosis' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
        "tables": [
            "users",
            "posts",
            "posthistory"
        ],
        "columns": [
            "posts.id",
            "posts.viewcount",
            "users.id",
            "posthistory.postid",
            "users.displayname",
            "posthistory.userid"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Kurtosis",
                "condition": "="
            },
            {
                "table": "users",
                "column": "displayname",
                "value": "Noah Snyder",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "Has higher popularity means the post has higher view count ; calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';",
        "values_list": [
            "users.displayname.harvey motulsky",
            "users.displayname.noah snyder"
        ],
        "original_question": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?",
        "question": "Among posts by Kurt osis and Noah Snyder, which one has higher popularity?",
        "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Harvey Motulsky' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
        "changes_information": {
            "original_value": "Kurtosis",
            "typo_space_addition": "Kurt osis"
        }
    },
    {
        "SQL": "SELECT T2.CreationDate FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Kurtosis' ORDER BY T2.CreationDate LIMIT 1",
        "tables": [
            "votes",
            "users"
        ],
        "columns": [
            "votes.creationdate",
            "users.id",
            "users.displayname",
            "votes.userid"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Kurtosis",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "DisplayName = 'chl'; cast its first vote refers to MIN(CreationDate);",
        "values_list": [
            "users.displayname.kurtosis"
        ],
        "original_question": "When did 'chl' cast its first vote in a post?",
        "question": "When did 'Kurt osis' cast its first vote in a post?",
        "original_SQL": "SELECT T2.CreationDate FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'chl' ORDER BY T2.CreationDate LIMIT 1",
        "changes_information": {
            "original_value": "Kurtosis",
            "typo_space_addition": "Kurt osis"
        }
    },
    {
        "SQL": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Kurtosis' ORDER BY T2.ViewCount DESC LIMIT 1",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "posts.id",
            "posts.title",
            "posts.owneruserid",
            "users.id",
            "users.displayname",
            "posts.viewcount"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Kurtosis",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "DisplayName = 'Harvey Motulsky'; the most views refer to MAX(ViewCount);",
        "values_list": [
            "users.displayname.harvey motulsky"
        ],
        "original_question": "Which post by Harvey Motulsky has the most views? Please give the id and title of this post.",
        "question": "Which post by Kurt osis has the most views? Please give the id and title of this post.",
        "original_SQL": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Harvey Motulsky' ORDER BY T2.ViewCount DESC LIMIT 1",
        "changes_information": {
            "original_value": "Kurtosis",
            "typo_space_addition": "Kurt osis"
        }
    },
    {
        "SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Kurtosis' ORDER BY T1.Date DESC LIMIT 1",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "badges.userid",
            "badges.name",
            "users.id",
            "users.displayname",
            "badges.date"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Kurtosis",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "the latest badge refers to Name FROM badges where MAX(Date);",
        "values_list": [
            "users.displayname.kurtosis"
        ],
        "original_question": "Identify the latest badge awarded to the user with the display name Emmett.",
        "question": "Identify the latest badge awarded to the user with the display name Kurt osis.",
        "original_SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ORDER BY T1.Date DESC LIMIT 1",
        "changes_information": {
            "original_value": "Kurtosis",
            "typo_space_addition": "Kurt osis"
        }
    },
    {
        "SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Kurtosis'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "badges.userid",
            "users.id",
            "users.displayname",
            "users.creationdate",
            "badges.date"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Kurtosis",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';",
        "values_list": [
            "users.displayname.kurtosis"
        ],
        "original_question": "How long did it take the user, known by his or her display name 'Zolomon' to get the badge? Count from the date the user's account was created.",
        "question": "How long did it take the user, known by his or her display name 'Kurt osis' to get the badge? Count from the date the user's account was created.",
        "original_SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon'",
        "changes_information": {
            "original_value": "Kurtosis",
            "typo_space_addition": "Kurt osis"
        }
    },
    {
        "SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Kurtosis'",
        "tables": [
            "users"
        ],
        "columns": [
            "users.reputation",
            "users.views",
            "users.displayname"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Kurtosis",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "users.displayname.jarrod dixon"
        ],
        "original_question": "What is the reputation and view count of the user, who is known by his or her display name 'Jarrod Dixon'?",
        "question": "What is the reputation and view count of the user, who is known by his or her display name 'Kurt osis'?",
        "original_SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'",
        "changes_information": {
            "original_value": "Kurtosis",
            "typo_space_addition": "Kurt osis"
        }
    },
    {
        "SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'Kurtosis'",
        "tables": [
            "users"
        ],
        "columns": [
            "users.creationdate",
            "users.displayname"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Kurtosis",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
        "values_list": [
            "users.displayname.kurtosis"
        ],
        "original_question": "When did the user known as 'IrishStat' create his or her account?",
        "question": "When did the user known as 'Kurt osis' create his or her account?",
        "original_SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'",
        "changes_information": {
            "original_value": "Kurtosis",
            "typo_space_addition": "Kurt osis"
        }
    },
    {
        "SQL": "SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Theresa';",
        "tables": [
            "users",
            "addresses"
        ],
        "columns": [
            "users.first_name",
            "addresses.country",
            "users.user_address_id",
            "addresses.address_id"
        ],
        "values": [
            {
                "table": "users",
                "column": "first_name",
                "value": "Theresa",
                "condition": "="
            }
        ],
        "db_id": "real_estate_rentals",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "users.first_name.theresa"
        ],
        "original_question": "In which country does the user with first name Robbie live?",
        "question": "In which country does the user with first name Ther esa live?",
        "original_SQL": "SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Robbie';",
        "changes_information": {
            "original_value": "Theresa",
            "typo_space_addition": "Ther esa"
        }
    },
    {
        "SQL": "SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Theresa';",
        "tables": [
            "users",
            "addresses"
        ],
        "columns": [
            "users.first_name",
            "addresses.country",
            "users.user_address_id",
            "addresses.address_id"
        ],
        "values": [
            {
                "table": "users",
                "column": "first_name",
                "value": "Theresa",
                "condition": "="
            }
        ],
        "db_id": "real_estate_rentals",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "users.first_name.theresa"
        ],
        "original_question": "Return the country in which the user with first name Robbie lives.",
        "question": "Return the country in which the user with first name Ther esa lives.",
        "original_SQL": "SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Robbie';",
        "changes_information": {
            "original_value": "Theresa",
            "typo_space_addition": "Ther esa"
        }
    }
]