[
    {
        "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_attribute AS T2 INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' AND T2.attribute_value < 50 AND T1.id = T2.hero_id)",
        "tables": [
            "hero_attribute",
            "superhero",
            "attribute"
        ],
        "columns": [
            "hero_attribute.attribute_value",
            "superhero.id",
            "attribute.id",
            "hero_attribute.hero_id",
            "attribute.attribute_name",
            "hero_attribute.attribute_id"
        ],
        "values": [
            {
                "table": "attribute",
                "column": "attribute_name",
                "value": "Intelligence",
                "condition": "="
            },
            {
                "table": "hero_attribute",
                "column": "attribute_value",
                "value": "50",
                "condition": "<"
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "durability of less than 50 refers to attribute_name = 'Durability' AND attribute_value < 50",
        "values_list": [
            "attribute.attribute_name.intelligence",
            "hero_attribute.attribute_value.50"
        ],
        "original_question": "Which superheroes have a durability attribute value of less than 50?",
        "question": "Which superheroes have a Int. attribute value of less than 50?",
        "original_SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_attribute AS T2 INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Durability' AND T2.attribute_value < 50 AND T1.id = T2.hero_id)",
        "changes_information": {
            "original_value": "Intelligence",
            "abbreviation_acronym": "Int."
        }
    },
    {
        "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' ORDER BY T2.attribute_value DESC LIMIT 1",
        "tables": [
            "hero_attribute",
            "superhero",
            "attribute"
        ],
        "columns": [
            "hero_attribute.attribute_value",
            "superhero.id",
            "superhero.full_name",
            "attribute.id",
            "hero_attribute.hero_id",
            "attribute.attribute_name",
            "hero_attribute.attribute_id"
        ],
        "values": [
            {
                "table": "attribute",
                "column": "attribute_name",
                "value": "Intelligence",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "highest attribute in strength refers to MAX(attribute_value) WHERE attribute_name = 'strength';",
        "values_list": [
            "attribute.attribute_name.intelligence"
        ],
        "original_question": "What is the hero's full name with the highest attribute in strength?",
        "question": "What is the hero's full name with the highest attribute in Int.?",
        "original_SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' ORDER BY T2.attribute_value DESC LIMIT 1",
        "changes_information": {
            "original_value": "Intelligence",
            "abbreviation_acronym": "Int."
        }
    },
    {
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Intelligence' ORDER BY T2.attribute_value DESC LIMIT 1",
        "tables": [
            "publisher",
            "hero_attribute",
            "superhero",
            "attribute"
        ],
        "columns": [
            "superhero.id",
            "superhero.superhero_name",
            "publisher.publisher_name",
            "attribute.attribute_name",
            "publisher.id",
            "attribute.id",
            "hero_attribute.hero_id",
            "hero_attribute.attribute_value",
            "superhero.publisher_id",
            "hero_attribute.attribute_id"
        ],
        "values": [
            {
                "table": "publisher",
                "column": "publisher_name",
                "value": "Dark Horse Comics",
                "condition": "="
            },
            {
                "table": "attribute",
                "column": "attribute_name",
                "value": "Intelligence",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
        "values_list": [
            "publisher.publisher_name.dark horse comics",
            "attribute.attribute_name.intelligence"
        ],
        "original_question": "Which superhero has the most durability published by Dark Horse Comics?",
        "question": "Which superhero has the most Int. published by Dark Horse Comics?",
        "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
        "changes_information": {
            "original_value": "Intelligence",
            "abbreviation_acronym": "Int."
        }
    },
    {
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Favorite Question' LIMIT 10",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "badges.userid",
            "users.displayname",
            "badges.name"
        ],
        "values": [
            {
                "table": "badges",
                "column": "name",
                "value": "Favorite Question",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
        "values_list": [
            "badges.name.favorite_question"
        ],
        "original_question": "Name 10 users with the badge name 'Necromancer.'",
        "question": "Name 10 users with the badge name 'Fav Question.'",
        "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10",
        "changes_information": {
            "original_value": "Favorite Question",
            "abbreviation_acronym": "Fav Question"
        }
    },
    {
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Favorite Question'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "badges.userid",
            "users.displayname",
            "badges.name"
        ],
        "values": [
            {
                "table": "badges",
                "column": "name",
                "value": "Favorite Question",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "values_list": [
            "badges.name.favorite_question"
        ],
        "original_question": "List all the name of users that obtained the Organizer Badges.",
        "question": "List all the name of users that obtained the Fav Question Badges.",
        "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'",
        "changes_information": {
            "original_value": "Favorite Question",
            "abbreviation_acronym": "Fav Question"
        }
    },
    {
        "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Favorite Question'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.location",
            "badges.userid",
            "badges.name",
            "users.id",
            "users.lastaccessdate"
        ],
        "values": [
            {
                "table": "badges",
                "column": "name",
                "value": "Favorite Question",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "Outliers is the name of the badge;",
        "values_list": [
            "badges.name.favorite_question"
        ],
        "original_question": "Describe the last accessed date and location of the users who received the outliers badge.",
        "question": "Describe the last accessed date and location of the users who received the Fav Question badge.",
        "original_SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
        "changes_information": {
            "original_value": "Favorite Question",
            "abbreviation_acronym": "Fav Question"
        }
    },
    {
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Favorite Question' ORDER BY T2.Date LIMIT 1",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "badges.userid",
            "badges.name",
            "users.id",
            "users.displayname",
            "badges.date"
        ],
        "values": [
            {
                "table": "badges",
                "column": "name",
                "value": "Favorite Question",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "values_list": [
            "badges.name.favorite_question"
        ],
        "original_question": "What is the display name of the user who acquired the first Autobiographer badge?",
        "question": "What is the display name of the user who acquired the first Fav Question badge?",
        "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
        "changes_information": {
            "original_value": "Favorite Question",
            "abbreviation_acronym": "Fav Question"
        }
    },
    {
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Research Assistant' LIMIT 10",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "badges.userid",
            "users.displayname",
            "badges.name"
        ],
        "values": [
            {
                "table": "badges",
                "column": "name",
                "value": "Research Assistant",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
        "values_list": [
            "badges.name.research_assistant"
        ],
        "original_question": "Name 10 users with the badge name 'Necromancer.'",
        "question": "Name 10 users with the badge name 'RA.'",
        "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10",
        "changes_information": {
            "original_value": "Research Assistant",
            "abbreviation_acronym": "RA"
        }
    },
    {
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Research Assistant'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "badges.userid",
            "users.displayname",
            "badges.name"
        ],
        "values": [
            {
                "table": "badges",
                "column": "name",
                "value": "Research Assistant",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "values_list": [
            "badges.name.research_assistant"
        ],
        "original_question": "List all the name of users that obtained the Organizer Badges.",
        "question": "List all the name of users that obtained the RA Badges.",
        "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'",
        "changes_information": {
            "original_value": "Research Assistant",
            "abbreviation_acronym": "RA"
        }
    },
    {
        "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Research Assistant'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.location",
            "badges.userid",
            "badges.name",
            "users.id",
            "users.lastaccessdate"
        ],
        "values": [
            {
                "table": "badges",
                "column": "name",
                "value": "Research Assistant",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "Outliers is the name of the badge;",
        "values_list": [
            "badges.name.research_assistant"
        ],
        "original_question": "Describe the last accessed date and location of the users who received the outliers badge.",
        "question": "Describe the last accessed date and location of the users who received the RA badge.",
        "original_SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
        "changes_information": {
            "original_value": "Research Assistant",
            "abbreviation_acronym": "RA"
        }
    },
    {
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Research Assistant' ORDER BY T2.Date LIMIT 1",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "badges.userid",
            "badges.name",
            "users.id",
            "users.displayname",
            "badges.date"
        ],
        "values": [
            {
                "table": "badges",
                "column": "name",
                "value": "Research Assistant",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "values_list": [
            "badges.name.research_assistant"
        ],
        "original_question": "What is the display name of the user who acquired the first Autobiographer badge?",
        "question": "What is the display name of the user who acquired the first RA badge?",
        "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
        "changes_information": {
            "original_value": "Research Assistant",
            "abbreviation_acronym": "RA"
        }
    },
    {
        "SQL": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Advertisement' AND SUBSTR(T1.event_date, 6, 2) = '09'",
        "tables": [
            "budget",
            "event"
        ],
        "columns": [
            "event.event_name",
            "budget.category",
            "budget.link_to_event",
            "event.event_date",
            "event.event_id",
            "budget.spent"
        ],
        "values": [
            {
                "table": "event",
                "column": "event_name",
                "value": "September Meeting",
                "condition": "="
            },
            {
                "table": "budget",
                "column": "category",
                "value": "Advertisement",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "amount spent refers to spent; spend on food in September Meeting refers to category = 'Food' where event_name = 'September Meeting'",
        "values_list": [
            "event.event_name.september meeting",
            "budget.category.advertisement"
        ],
        "original_question": "How much did the Student_Club members spend on food in September Meeting?",
        "question": "How much did the Student_Club members spend on Ad in September Meeting?",
        "original_SQL": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Food' AND SUBSTR(T1.event_date, 6, 2) = '09'",
        "changes_information": {
            "original_value": "Advertisement",
            "abbreviation_acronym": "Ad"
        }
    },
    {
        "SQL": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Advertisement' AND SUBSTR(T1.event_date, 6, 2) = '09'",
        "tables": [
            "budget",
            "event"
        ],
        "columns": [
            "event.event_name",
            "budget.category",
            "budget.link_to_event",
            "event.event_date",
            "event.event_id",
            "budget.spent"
        ],
        "values": [
            {
                "table": "event",
                "column": "event_name",
                "value": "September Meeting",
                "condition": "="
            },
            {
                "table": "budget",
                "column": "category",
                "value": "Advertisement",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "amount spent refers to spent; spend on food in September Meeting refers to category = 'Advertisement' where event_name = 'September Meeting'",
        "values_list": [
            "event.event_name.september meeting",
            "budget.category.advertisement"
        ],
        "original_question": "How much did the Student_Club members spend on advertisement in September Meeting?",
        "question": "How much did the Student_Club members spend on Ad in September Meeting?",
        "original_SQL": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Advertisement' AND SUBSTR(T1.event_date, 6, 2) = '09'",
        "changes_information": {
            "original_value": "Advertisement",
            "abbreviation_acronym": "Ad"
        }
    },
    {
        "SQL": "SELECT remaining FROM budget WHERE category = 'Advertisement' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Advertisement' )",
        "tables": [
            "budget"
        ],
        "columns": [
            "budget.amount",
            "budget.category"
        ],
        "values": [
            {
                "table": "budget",
                "column": "category",
                "value": "Advertisement",
                "condition": "="
            },
            {
                "table": "",
                "column": "category",
                "value": "Food",
                "condition": "="
            },
            {
                "table": "",
                "column": "category",
                "value": "Food",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "remaining of budget refers to remaining, biggest budget for 'Food' refers to MAX(budget.amount) where category = 'Food'",
        "values_list": [
            "budget.category.advertisement",
            ".category.food",
            ".category.food"
        ],
        "original_question": "With the biggest budget for the \"Food\", what was the remaining of it?",
        "question": "With the biggest budget for the \"Ad\", what was the remaining of it?",
        "original_SQL": "SELECT remaining FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Food' )",
        "changes_information": {
            "original_value": "Advertisement",
            "abbreviation_acronym": "Ad"
        }
    },
    {
        "SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1",
        "tables": [
            "budget",
            "event"
        ],
        "columns": [
            "event.event_name",
            "budget.category",
            "budget.link_to_event",
            "event.event_id",
            "budget.spent"
        ],
        "values": [
            {
                "table": "budget",
                "column": "category",
                "value": "Advertisement",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "Name of event refers to event_name; highest amount spent on advertisement refers to MAX(spent) where category = 'Advertisement'",
        "values_list": [
            "budget.category.advertisement"
        ],
        "original_question": "Name the event with the highest amount spent on advertisement.",
        "question": "Name the event with the highest amount spent on Ad.",
        "original_SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1",
        "changes_information": {
            "original_value": "Advertisement",
            "abbreviation_acronym": "Ad"
        }
    },
    {
        "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Advertisement' AND T3.cost < (SELECT AVG(cost) FROM expense)",
        "tables": [
            "budget",
            "event",
            "expense"
        ],
        "columns": [
            "event.event_name",
            "expense.cost",
            "budget.category",
            "budget.link_to_event",
            "budget.budget_id",
            "expense.link_to_budget",
            "event.event_id"
        ],
        "values": [
            {
                "table": "budget",
                "column": "category",
                "value": "Advertisement",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "name of events refers to event_name; less than average parking cost refers to cost < DIVIDE(SUM(cost), COUNT(event_id)) where category = 'Parking'",
        "values_list": [
            "budget.category.advertisement"
        ],
        "original_question": "List the name of events with less than average parking cost.",
        "question": "List the name of events with less than average Ad cost.",
        "original_SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Parking' AND T3.cost < (SELECT AVG(cost) FROM expense)",
        "changes_information": {
            "original_value": "Advertisement",
            "abbreviation_acronym": "Ad"
        }
    },
    {
        "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Advertisement'",
        "tables": [
            "budget",
            "event"
        ],
        "columns": [
            "event.event_id",
            "budget.link_to_event",
            "event.event_name",
            "budget.category"
        ],
        "values": [
            {
                "table": "budget",
                "column": "category",
                "value": "Advertisement",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "budgeted for food refers to category = 'Food'",
        "values_list": [
            "budget.category.advertisement"
        ],
        "original_question": "List the event names which were budgeted for the food.",
        "question": "List the event names which were budgeted for the Ad.",
        "original_SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Food'",
        "changes_information": {
            "original_value": "Advertisement",
            "abbreviation_acronym": "Ad"
        }
    },
    {
        "SQL": "SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' GROUP BY T2.event_name",
        "tables": [
            "budget",
            "event"
        ],
        "columns": [
            "event.event_name",
            "budget.category",
            "budget.link_to_event",
            "event.event_id",
            "budget.spent"
        ],
        "values": [
            {
                "table": "budget",
                "column": "category",
                "value": "Advertisement",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "total amount spent = SUM(spent) where category = 'Speaker Gifts'",
        "values_list": [
            "budget.category.speaker gifts"
        ],
        "original_question": "Calculate the total amount spent on speaker gifts and list the name of the event they were spent on.",
        "question": "Calculate the total amount spent on Ad and list the name of the event they were spent on.",
        "original_SQL": "SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Speaker Gifts' GROUP BY T2.event_name",
        "changes_information": {
            "original_value": "Advertisement",
            "abbreviation_acronym": "Ad"
        }
    },
    {
        "SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Richard Wright'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.artist",
            "cards.name"
        ],
        "values": [
            {
                "table": "cards",
                "column": "artist",
                "value": "Richard Wright",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Aaron Boyd' is artist;",
        "values_list": [
            "cards.artist.aaron boyd"
        ],
        "original_question": "Name the cards that were illustrated by Aaron Boyd.",
        "question": "Name the cards that were illustrated by R Wright.",
        "original_SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Aaron Boyd'",
        "changes_information": {
            "original_value": "Richard Wright",
            "abbreviation_acronym": "R Wright"
        }
    },
    {
        "SQL": "SELECT manaCost FROM cards WHERE artist = 'Richard Wright'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.artist",
            "cards.manacost"
        ],
        "values": [
            {
                "table": "cards",
                "column": "artist",
                "value": "Richard Wright",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "unconverted mana refer to manaCost; Rob Alexander refer to artist",
        "values_list": [
            "cards.artist.rob alexander"
        ],
        "original_question": "What is the  unconverted mana do all the cards created by Rob Alexander cost in total?",
        "question": "What is the  unconverted mana do all the cards created by R Wright cost in total?",
        "original_SQL": "SELECT manaCost FROM cards WHERE artist = 'Rob Alexander'",
        "changes_information": {
            "original_value": "Richard Wright",
            "abbreviation_acronym": "R Wright"
        }
    },
    {
        "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Richard Wright' AND T2.format = 'pauper' AND T1.availability = 'paper'",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.artist",
            "legalities.format",
            "cards.id",
            "legalities.uuid",
            "cards.uuid",
            "cards.availability"
        ],
        "values": [
            {
                "table": "cards",
                "column": "availability",
                "value": "paper",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "artist",
                "value": "Richard Wright",
                "condition": "="
            },
            {
                "table": "legalities",
                "column": "format",
                "value": "pauper",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "available in paper refers to availability = 'paper'",
        "values_list": [
            "cards.availability.paper",
            "cards.artist.erica yang",
            "legalities.format.pauper"
        ],
        "original_question": "Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its ID.",
        "question": "Is there any card from R Wright artist in pauper format and available in paper? If so, indicate its ID.",
        "original_SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'",
        "changes_information": {
            "original_value": "Richard Wright",
            "abbreviation_acronym": "R Wright"
        }
    },
    {
        "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Richard Wright'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.artist",
            "cards.availability"
        ],
        "values": [
            {
                "table": "cards",
                "column": "artist",
                "value": "Richard Wright",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
        "values_list": [
            "cards.artist.daren bader"
        ],
        "original_question": "What kind of printing is on the card that Daren Bader created?",
        "question": "What kind of printing is on the card that R Wright created?",
        "original_SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'",
        "changes_information": {
            "original_value": "Richard Wright",
            "abbreviation_acronym": "R Wright"
        }
    },
    {
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Richard Wright' ORDER BY T2.date DESC",
        "tables": [
            "rulings",
            "cards"
        ],
        "columns": [
            "cards.artist",
            "rulings.date",
            "rulings.text",
            "cards.uuid",
            "rulings.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "artist",
                "value": "Richard Wright",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
        "values_list": [
            "cards.artist.kev walker"
        ],
        "original_question": "What are the rulings for the card named and designed by Kev Walker? List them in descending order of dates.",
        "question": "What are the rulings for the card named and designed by R Wright? List them in descending order of dates.",
        "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Kev Walker' ORDER BY T2.date DESC",
        "changes_information": {
            "original_value": "Richard Wright",
            "abbreviation_acronym": "R Wright"
        }
    },
    {
        "SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Richard Wright'",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.artist",
            "legalities.status",
            "cards.name",
            "cards.frameversion",
            "legalities.uuid",
            "cards.uuid"
        ],
        "values": [
            {
                "table": "legalities",
                "column": "status",
                "value": "Banned",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "artist",
                "value": "Richard Wright",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
        "values_list": [
            "legalities.status.banned",
            "cards.artist.allen williams"
        ],
        "original_question": "List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.",
        "question": "List all the frame styles and cards R Wright worked on and find any banned cards if there are any.",
        "original_SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'",
        "changes_information": {
            "original_value": "Richard Wright",
            "abbreviation_acronym": "R Wright"
        }
    },
    {
        "SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Monte Michael Moore'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.artist",
            "cards.name"
        ],
        "values": [
            {
                "table": "cards",
                "column": "artist",
                "value": "Monte Michael Moore",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Aaron Boyd' is artist;",
        "values_list": [
            "cards.artist.aaron boyd"
        ],
        "original_question": "Name the cards that were illustrated by Aaron Boyd.",
        "question": "Name the cards that were illustrated by Monte M. Moore.",
        "original_SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Aaron Boyd'",
        "changes_information": {
            "original_value": "Monte Michael Moore",
            "abbreviation_acronym": "Monte M. Moore"
        }
    },
    {
        "SQL": "SELECT manaCost FROM cards WHERE artist = 'Monte Michael Moore'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.artist",
            "cards.manacost"
        ],
        "values": [
            {
                "table": "cards",
                "column": "artist",
                "value": "Monte Michael Moore",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "unconverted mana refer to manaCost; Rob Alexander refer to artist",
        "values_list": [
            "cards.artist.rob alexander"
        ],
        "original_question": "What is the  unconverted mana do all the cards created by Rob Alexander cost in total?",
        "question": "What is the  unconverted mana do all the cards created by Monte M. Moore cost in total?",
        "original_SQL": "SELECT manaCost FROM cards WHERE artist = 'Rob Alexander'",
        "changes_information": {
            "original_value": "Monte Michael Moore",
            "abbreviation_acronym": "Monte M. Moore"
        }
    },
    {
        "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Monte Michael Moore' AND T2.format = 'pauper' AND T1.availability = 'paper'",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.artist",
            "legalities.format",
            "cards.id",
            "legalities.uuid",
            "cards.uuid",
            "cards.availability"
        ],
        "values": [
            {
                "table": "cards",
                "column": "availability",
                "value": "paper",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "artist",
                "value": "Monte Michael Moore",
                "condition": "="
            },
            {
                "table": "legalities",
                "column": "format",
                "value": "pauper",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "available in paper refers to availability = 'paper'",
        "values_list": [
            "cards.availability.paper",
            "cards.artist.erica yang",
            "legalities.format.pauper"
        ],
        "original_question": "Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its ID.",
        "question": "Is there any card from Monte M. Moore artist in pauper format and available in paper? If so, indicate its ID.",
        "original_SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'",
        "changes_information": {
            "original_value": "Monte Michael Moore",
            "abbreviation_acronym": "Monte M. Moore"
        }
    },
    {
        "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Monte Michael Moore'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.artist",
            "cards.availability"
        ],
        "values": [
            {
                "table": "cards",
                "column": "artist",
                "value": "Monte Michael Moore",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
        "values_list": [
            "cards.artist.daren bader"
        ],
        "original_question": "What kind of printing is on the card that Daren Bader created?",
        "question": "What kind of printing is on the card that Monte M. Moore created?",
        "original_SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'",
        "changes_information": {
            "original_value": "Monte Michael Moore",
            "abbreviation_acronym": "Monte M. Moore"
        }
    },
    {
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Monte Michael Moore' ORDER BY T2.date DESC",
        "tables": [
            "rulings",
            "cards"
        ],
        "columns": [
            "cards.artist",
            "rulings.date",
            "rulings.text",
            "cards.uuid",
            "rulings.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "artist",
                "value": "Monte Michael Moore",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
        "values_list": [
            "cards.artist.kev walker"
        ],
        "original_question": "What are the rulings for the card named and designed by Kev Walker? List them in descending order of dates.",
        "question": "What are the rulings for the card named and designed by Monte M. Moore? List them in descending order of dates.",
        "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Kev Walker' ORDER BY T2.date DESC",
        "changes_information": {
            "original_value": "Monte Michael Moore",
            "abbreviation_acronym": "Monte M. Moore"
        }
    },
    {
        "SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Monte Michael Moore'",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.artist",
            "legalities.status",
            "cards.name",
            "cards.frameversion",
            "legalities.uuid",
            "cards.uuid"
        ],
        "values": [
            {
                "table": "legalities",
                "column": "status",
                "value": "Banned",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "artist",
                "value": "Monte Michael Moore",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
        "values_list": [
            "legalities.status.banned",
            "cards.artist.allen williams"
        ],
        "original_question": "List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.",
        "question": "List all the frame styles and cards Monte M. Moore worked on and find any banned cards if there are any.",
        "original_SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'",
        "changes_information": {
            "original_value": "Monte Michael Moore",
            "abbreviation_acronym": "Monte M. Moore"
        }
    },
    {
        "SQL": "SELECT layout FROM cards WHERE keywords = 'Level Up'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.keywords",
            "cards.layout"
        ],
        "values": [
            {
                "table": "cards",
                "column": "keywords",
                "value": "Level Up",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "cards.keywords.level_up"
        ],
        "original_question": "What are the card layout of cards with keyword of flying?",
        "question": "What are the card layout of cards with keyword of LV Up?",
        "original_SQL": "SELECT layout FROM cards WHERE keywords = 'Flying'",
        "changes_information": {
            "original_value": "Level Up",
            "abbreviation_acronym": "LV Up"
        }
    },
    {
        "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Deal Damage'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.name",
            "cards.keywords"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Deal Damage",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Angel of Mercy' is the name of card;",
        "values_list": [
            "cards.name.angel of mercy"
        ],
        "original_question": "What is the keyword found on card 'Angel of Mercy'?",
        "question": "What is the keyword found on card 'Deal DMG'?",
        "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
        "changes_information": {
            "original_value": "Deal Damage",
            "abbreviation_acronym": "Deal DMG"
        }
    },
    {
        "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Deal Damage'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.name",
            "cards.subtypes",
            "cards.supertypes"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Deal Damage",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "values_list": [
            "cards.name.molimo, maro-sorcerer"
        ],
        "original_question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
        "question": "What's the list of all types for the card \"Deal DMG\"?",
        "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
        "changes_information": {
            "original_value": "Deal Damage",
            "abbreviation_acronym": "Deal DMG"
        }
    },
    {
        "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Deal Damage'",
        "tables": [
            "sets",
            "cards"
        ],
        "columns": [
            "sets.mtgocode",
            "cards.name",
            "cards.setcode",
            "sets.code"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Deal Damage",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "values_list": [
            "cards.name.angel of mercy"
        ],
        "original_question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
        "question": "Did the set of cards with \"Deal DMG\" appear on Magic: The Gathering Online?",
        "original_SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
        "changes_information": {
            "original_value": "Deal Damage",
            "abbreviation_acronym": "Deal DMG"
        }
    },
    {
        "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Deal Damage'",
        "tables": [
            "sets",
            "cards"
        ],
        "columns": [
            "cards.name",
            "cards.setcode",
            "sets.code",
            "sets.releasedate"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Deal Damage",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "values_list": [
            "cards.name.deal_damage"
        ],
        "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
        "question": "What was the release date for the set which card \"Deal DMG\" in it?",
        "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
        "changes_information": {
            "original_value": "Deal Damage",
            "abbreviation_acronym": "Deal DMG"
        }
    },
    {
        "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Defense of the Heart'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.name",
            "cards.keywords"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Defense of the Heart",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Angel of Mercy' is the name of card;",
        "values_list": [
            "cards.name.angel of mercy"
        ],
        "original_question": "What is the keyword found on card 'Angel of Mercy'?",
        "question": "What is the keyword found on card 'Def of the Heart'?",
        "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
        "changes_information": {
            "original_value": "Defense of the Heart",
            "abbreviation_acronym": "Def of the Heart"
        }
    },
    {
        "SQL": "SELECT promoTypes FROM cards WHERE name = 'Defense of the Heart' AND promoTypes IS NOT NULL",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.name",
            "cards.promotypes"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Defense of the Heart",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card Duress refers to name = 'Duress'; type of promotion refers to promoTypes;",
        "values_list": [
            "cards.name.defense_of_the_heart"
        ],
        "original_question": "What type of promotion is of card 'Duress'?",
        "question": "What type of promotion is of card 'Def of the Heart'?",
        "original_SQL": "SELECT promoTypes FROM cards WHERE name = 'Duress' AND promoTypes IS NOT NULL",
        "changes_information": {
            "original_value": "Defense of the Heart",
            "abbreviation_acronym": "Def of the Heart"
        }
    },
    {
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Defense of the Heart'",
        "tables": [
            "rulings",
            "cards"
        ],
        "columns": [
            "cards.uuid",
            "cards.name",
            "rulings.text",
            "rulings.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Defense of the Heart",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
        "values_list": [
            "cards.name.defense_of_the_heart"
        ],
        "original_question": "What is the description about the ruling of card \"Condemn\"?",
        "question": "What is the description about the ruling of card \"Def of the Heart\"?",
        "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn'",
        "changes_information": {
            "original_value": "Defense of the Heart",
            "abbreviation_acronym": "Def of the Heart"
        }
    },
    {
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Defense of the Heart'",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "legalities.uuid",
            "legalities.status",
            "cards.name",
            "cards.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Defense of the Heart",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Cloudchaser Eagle is the name of card;",
        "values_list": [
            "cards.name.cloudchaser eagle"
        ],
        "original_question": "What is the status of card \"Cloudchaser Eagle\"?",
        "question": "What is the status of card \"Def of the Heart\"?",
        "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
        "changes_information": {
            "original_value": "Defense of the Heart",
            "abbreviation_acronym": "Def of the Heart"
        }
    },
    {
        "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Defense of the Heart'",
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.uuid",
            "cards.name",
            "foreign_data.uuid",
            "cards.type"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Defense of the Heart",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Benalish Knight' is the name of card;",
        "values_list": [
            "cards.name.benalish knight"
        ],
        "original_question": "What is the type of card \"Benalish Knight\"?",
        "question": "What is the type of card \"Def of the Heart\"?",
        "original_SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
        "changes_information": {
            "original_value": "Defense of the Heart",
            "abbreviation_acronym": "Def of the Heart"
        }
    },
    {
        "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Defense of the Heart'",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "legalities.uuid",
            "cards.uuid",
            "legalities.format",
            "cards.name"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Defense of the Heart",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
        "values_list": [
            "cards.name.benalish knight"
        ],
        "original_question": "What is the rule of playing card \"Benalish Knight\"?",
        "question": "What is the rule of playing card \"Def of the Heart\"?",
        "original_SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
        "changes_information": {
            "original_value": "Defense of the Heart",
            "abbreviation_acronym": "Def of the Heart"
        }
    },
    {
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Defense of the Heart'",
        "tables": [
            "rulings",
            "cards"
        ],
        "columns": [
            "cards.uuid",
            "cards.name",
            "rulings.text",
            "rulings.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Defense of the Heart",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Beacon of Immortality' is the name of card;",
        "values_list": [
            "cards.name.beacon of immortality"
        ],
        "original_question": "Write down the ruling of Beacon of Immortality.",
        "question": "Write down the ruling of Def of the Heart.",
        "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality'",
        "changes_information": {
            "original_value": "Defense of the Heart",
            "abbreviation_acronym": "Def of the Heart"
        }
    },
    {
        "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Defense of the Heart'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.name",
            "cards.subtypes",
            "cards.supertypes"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Defense of the Heart",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "values_list": [
            "cards.name.molimo, maro-sorcerer"
        ],
        "original_question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
        "question": "What's the list of all types for the card \"Def of the Heart\"?",
        "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
        "changes_information": {
            "original_value": "Defense of the Heart",
            "abbreviation_acronym": "Def of the Heart"
        }
    },
    {
        "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Defense of the Heart'",
        "tables": [
            "sets",
            "cards"
        ],
        "columns": [
            "sets.mtgocode",
            "cards.name",
            "cards.setcode",
            "sets.code"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Defense of the Heart",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "values_list": [
            "cards.name.angel of mercy"
        ],
        "original_question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
        "question": "Did the set of cards with \"Def of the Heart\" appear on Magic: The Gathering Online?",
        "original_SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
        "changes_information": {
            "original_value": "Defense of the Heart",
            "abbreviation_acronym": "Def of the Heart"
        }
    },
    {
        "SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Defense of the Heart'",
        "tables": [
            "rulings",
            "cards"
        ],
        "columns": [
            "cards.uuid",
            "cards.name",
            "rulings.date",
            "rulings.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Defense of the Heart",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Reminisce refers to name = 'Reminisce'; when created is the date",
        "values_list": [
            "cards.name.defense_of_the_heart"
        ],
        "original_question": "When was the ruling for the card 'Reminisce' created?",
        "question": "When was the ruling for the card 'Def of the Heart' created?",
        "original_SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Reminisce'",
        "changes_information": {
            "original_value": "Defense of the Heart",
            "abbreviation_acronym": "Def of the Heart"
        }
    },
    {
        "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Defense of the Heart'",
        "tables": [
            "sets",
            "cards"
        ],
        "columns": [
            "cards.name",
            "cards.setcode",
            "sets.code",
            "sets.releasedate"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Defense of the Heart",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "values_list": [
            "cards.name.defense_of_the_heart"
        ],
        "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
        "question": "What was the release date for the set which card \"Def of the Heart\" in it?",
        "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
        "changes_information": {
            "original_value": "Defense of the Heart",
            "abbreviation_acronym": "Def of the Heart"
        }
    },
    {
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Defense of the Heart' AND T2.language = 'French' AND T2.translation IS NOT NULL",
        "tables": [
            "set_translations",
            "cards"
        ],
        "columns": [
            "set_translations.language",
            "cards.name",
            "set_translations.setcode",
            "cards.setcode",
            "set_translations.translation"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Defense of the Heart",
                "condition": "="
            },
            {
                "table": "set_translations",
                "column": "language",
                "value": "French",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
        "values_list": [
            "cards.name.tendo ice bridge",
            "set_translations.language.french"
        ],
        "original_question": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in?",
        "question": "What's the French name of the set of cards with \"Def of the Heart\" is in?",
        "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL",
        "changes_information": {
            "original_value": "Defense of the Heart",
            "abbreviation_acronym": "Def of the Heart"
        }
    },
    {
        "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Precinct Captain'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.name",
            "cards.keywords"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Precinct Captain",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Angel of Mercy' is the name of card;",
        "values_list": [
            "cards.name.angel of mercy"
        ],
        "original_question": "What is the keyword found on card 'Angel of Mercy'?",
        "question": "What is the keyword found on card 'Precinct Capt'?",
        "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
        "changes_information": {
            "original_value": "Precinct Captain",
            "abbreviation_acronym": "Precinct Capt"
        }
    },
    {
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Precinct Captain'",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "legalities.uuid",
            "legalities.status",
            "cards.name",
            "cards.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Precinct Captain",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Cloudchaser Eagle is the name of card;",
        "values_list": [
            "cards.name.cloudchaser eagle"
        ],
        "original_question": "What is the status of card \"Cloudchaser Eagle\"?",
        "question": "What is the status of card \"Precinct Capt\"?",
        "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
        "changes_information": {
            "original_value": "Precinct Captain",
            "abbreviation_acronym": "Precinct Capt"
        }
    },
    {
        "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Precinct Captain'",
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.uuid",
            "cards.name",
            "foreign_data.uuid",
            "cards.type"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Precinct Captain",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Benalish Knight' is the name of card;",
        "values_list": [
            "cards.name.benalish knight"
        ],
        "original_question": "What is the type of card \"Benalish Knight\"?",
        "question": "What is the type of card \"Precinct Capt\"?",
        "original_SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
        "changes_information": {
            "original_value": "Precinct Captain",
            "abbreviation_acronym": "Precinct Capt"
        }
    },
    {
        "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Precinct Captain'",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "legalities.uuid",
            "cards.uuid",
            "legalities.format",
            "cards.name"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Precinct Captain",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
        "values_list": [
            "cards.name.benalish knight"
        ],
        "original_question": "What is the rule of playing card \"Benalish Knight\"?",
        "question": "What is the rule of playing card \"Precinct Capt\"?",
        "original_SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
        "changes_information": {
            "original_value": "Precinct Captain",
            "abbreviation_acronym": "Precinct Capt"
        }
    },
    {
        "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Precinct Captain'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.name",
            "cards.subtypes",
            "cards.supertypes"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Precinct Captain",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "values_list": [
            "cards.name.molimo, maro-sorcerer"
        ],
        "original_question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
        "question": "What's the list of all types for the card \"Precinct Capt\"?",
        "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
        "changes_information": {
            "original_value": "Precinct Captain",
            "abbreviation_acronym": "Precinct Capt"
        }
    },
    {
        "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Precinct Captain'",
        "tables": [
            "sets",
            "cards"
        ],
        "columns": [
            "sets.mtgocode",
            "cards.name",
            "cards.setcode",
            "sets.code"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Precinct Captain",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "values_list": [
            "cards.name.angel of mercy"
        ],
        "original_question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
        "question": "Did the set of cards with \"Precinct Capt\" appear on Magic: The Gathering Online?",
        "original_SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
        "changes_information": {
            "original_value": "Precinct Captain",
            "abbreviation_acronym": "Precinct Capt"
        }
    },
    {
        "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Precinct Captain'",
        "tables": [
            "sets",
            "cards"
        ],
        "columns": [
            "cards.name",
            "cards.setcode",
            "sets.code",
            "sets.releasedate"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Precinct Captain",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "values_list": [
            "cards.name.precinct_captain"
        ],
        "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
        "question": "What was the release date for the set which card \"Precinct Capt\" in it?",
        "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
        "changes_information": {
            "original_value": "Precinct Captain",
            "abbreviation_acronym": "Precinct Capt"
        }
    },
    {
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Precinct Captain' AND T2.language = 'French' AND T2.translation IS NOT NULL",
        "tables": [
            "set_translations",
            "cards"
        ],
        "columns": [
            "set_translations.language",
            "cards.name",
            "set_translations.setcode",
            "cards.setcode",
            "set_translations.translation"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Precinct Captain",
                "condition": "="
            },
            {
                "table": "set_translations",
                "column": "language",
                "value": "French",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
        "values_list": [
            "cards.name.tendo ice bridge",
            "set_translations.language.french"
        ],
        "original_question": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in?",
        "question": "What's the French name of the set of cards with \"Precinct Capt\" is in?",
        "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL",
        "changes_information": {
            "original_value": "Precinct Captain",
            "abbreviation_acronym": "Precinct Capt"
        }
    },
    {
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Precinct Captain' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
        "tables": [
            "set_translations",
            "cards"
        ],
        "columns": [
            "set_translations.language",
            "cards.name",
            "set_translations.setcode",
            "cards.setcode",
            "set_translations.translation"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Precinct Captain",
                "condition": "="
            },
            {
                "table": "set_translations",
                "column": "language",
                "value": "Japanese",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
        "values_list": [
            "cards.name.fellwar stone",
            "set_translations.language.japanese"
        ],
        "original_question": "Tell the Japanese name of the set which card \"Fellwar Stone\" is in it.",
        "question": "Tell the Japanese name of the set which card \"Precinct Capt\" is in it.",
        "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
        "changes_information": {
            "original_value": "Precinct Captain",
            "abbreviation_acronym": "Precinct Capt"
        }
    },
    {
        "SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Enchant Permanent'",
        "tables": [
            "rulings",
            "cards"
        ],
        "columns": [
            "cards.originaltype",
            "cards.id",
            "rulings.date",
            "cards.uuid",
            "rulings.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "originaltype",
                "value": "Enchant Permanent",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Creature - Elf is the originalType;",
        "values_list": [
            "cards.originaltype.creature - elf"
        ],
        "original_question": "List down the name of cards with original types of Creature - Elf and the date of rulings for these cards.",
        "question": "List down the name of cards with original types of Enchant Perm and the date of rulings for these cards.",
        "original_SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'",
        "changes_information": {
            "original_value": "Enchant Permanent",
            "abbreviation_acronym": "Enchant Perm"
        }
    },
    {
        "SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'New York State'",
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "circuits.circuitid",
            "races.year",
            "races.circuitid",
            "circuits.location"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "location",
                "value": "New York State",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "Shanghai is a name of location;",
        "values_list": [
            "circuits.location.new_york_state"
        ],
        "original_question": "Please list the year during which the race is held on circuits in Shanghai.",
        "question": "Please list the year during which the race is held on circuits in NY State.",
        "original_SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Shanghai'",
        "changes_information": {
            "original_value": "New York State",
            "abbreviation_acronym": "NY State"
        }
    },
    {
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Bahrain International Circuit'",
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "circuits.circuitid",
            "races.circuitid",
            "circuits.name",
            "circuits.url"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "name",
                "value": "Bahrain International Circuit",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
        "values_list": [
            "circuits.name.circuit de barcelona-catalunya"
        ],
        "original_question": "Where can the introduction of the races held on Circuit de Barcelona-Catalunya be found?",
        "question": "Where can the introduction of the races held on Bahrain Intl Circuit be found?",
        "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
        "changes_information": {
            "original_value": "Bahrain International Circuit",
            "abbreviation_acronym": "Bahrain Intl Circuit"
        }
    },
    {
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Bahrain International Circuit'",
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "circuits.circuitid",
            "races.circuitid",
            "circuits.name",
            "circuits.url"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "name",
                "value": "Bahrain International Circuit",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "information about races refers to url;",
        "values_list": [
            "circuits.name.sepang international circuit"
        ],
        "original_question": "Where can I find the information about the races held on Sepang International Circuit?",
        "question": "Where can I find the information about the races held on Bahrain Intl Circuit?",
        "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
        "changes_information": {
            "original_value": "Bahrain International Circuit",
            "abbreviation_acronym": "Bahrain Intl Circuit"
        }
    },
    {
        "SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Bahrain International Circuit'",
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "circuits.circuitid",
            "circuits.name",
            "races.time",
            "races.circuitid"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "name",
                "value": "Bahrain International Circuit",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "circuits.name.sepang international circuit"
        ],
        "original_question": "Please list the time of the races held on Sepang International Circuit.",
        "question": "Please list the time of the races held on Bahrain Intl Circuit.",
        "original_SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
        "changes_information": {
            "original_value": "Bahrain International Circuit",
            "abbreviation_acronym": "Bahrain Intl Circuit"
        }
    },
    {
        "SQL": "SELECT lat, lng FROM circuits WHERE name = 'Bahrain International Circuit'",
        "tables": [
            "circuits"
        ],
        "columns": [
            "circuits.lat",
            "circuits.lng",
            "circuits.name"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "name",
                "value": "Bahrain International Circuit",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
        "values_list": [
            "circuits.name.silverstone circuit"
        ],
        "original_question": "What's the location coordinates of Silverstone Circuit?",
        "question": "What's the location coordinates of Bahrain Intl Circuit?",
        "original_SQL": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
        "changes_information": {
            "original_value": "Bahrain International Circuit",
            "abbreviation_acronym": "Bahrain Intl Circuit"
        }
    },
    {
        "SQL": "SELECT circuitRef FROM circuits WHERE name = 'Bahrain International Circuit'",
        "tables": [
            "circuits"
        ],
        "columns": [
            "circuits.circuitref",
            "circuits.name"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "name",
                "value": "Bahrain International Circuit",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'",
        "values_list": [
            "circuits.name.marina bay street circuit"
        ],
        "original_question": "What's the reference name of Marina Bay Street Circuit?",
        "question": "What's the reference name of Bahrain Intl Circuit?",
        "original_SQL": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'",
        "changes_information": {
            "original_value": "Bahrain International Circuit",
            "abbreviation_acronym": "Bahrain Intl Circuit"
        }
    },
    {
        "SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Bahrain International Circuit'",
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "circuits.circuitid",
            "races.year",
            "races.circuitid",
            "circuits.name"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "name",
                "value": "Bahrain International Circuit",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "circuits.name.silverstone circuit"
        ],
        "original_question": "Please list all the years that Silverstone Circuit was used in a Formula_1 race.",
        "question": "Please list all the years that Bahrain Intl Circuit was used in a Formula_1 race.",
        "original_SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
        "changes_information": {
            "original_value": "Bahrain International Circuit",
            "abbreviation_acronym": "Bahrain Intl Circuit"
        }
    },
    {
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Bahrain International Circuit'",
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "circuits.circuitid",
            "races.circuitid",
            "circuits.name",
            "circuits.url"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "name",
                "value": "Bahrain International Circuit",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "more information refers to url",
        "values_list": [
            "circuits.name.silverstone circuit"
        ],
        "original_question": "Please give more information about the Formula_1 races that used the Silverstone Circuit.",
        "question": "Please give more information about the Formula_1 races that used the Bahrain Intl Circuit.",
        "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
        "changes_information": {
            "original_value": "Bahrain International Circuit",
            "abbreviation_acronym": "Bahrain Intl Circuit"
        }
    },
    {
        "SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Bahrain International Circuit'",
        "tables": [
            "circuits"
        ],
        "columns": [
            "circuits.lat",
            "circuits.lng",
            "circuits.country",
            "circuits.name"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "name",
                "value": "Bahrain International Circuit",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "coordinates expressed in latitude and longitude refers to (lat, lng)",
        "values_list": [
            "circuits.name.bahrain_international_circuit"
        ],
        "original_question": "In which location does the Hungaroring circuit located? Also, find the country and coordinates of this circuit?",
        "question": "In which location does the Bahrain Intl Circuit circuit located? Also, find the country and coordinates of this circuit?",
        "original_SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Hungaroring'",
        "changes_information": {
            "original_value": "Bahrain International Circuit",
            "abbreviation_acronym": "Bahrain Intl Circuit"
        }
    },
    {
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Okayama International Circuit'",
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "circuits.circuitid",
            "races.circuitid",
            "circuits.name",
            "circuits.url"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "name",
                "value": "Okayama International Circuit",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
        "values_list": [
            "circuits.name.circuit de barcelona-catalunya"
        ],
        "original_question": "Where can the introduction of the races held on Circuit de Barcelona-Catalunya be found?",
        "question": "Where can the introduction of the races held on Okayama Intl Circuit be found?",
        "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
        "changes_information": {
            "original_value": "Okayama International Circuit",
            "abbreviation_acronym": "Okayama Intl Circuit"
        }
    },
    {
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Okayama International Circuit'",
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "circuits.circuitid",
            "races.circuitid",
            "circuits.name",
            "circuits.url"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "name",
                "value": "Okayama International Circuit",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "information about races refers to url;",
        "values_list": [
            "circuits.name.sepang international circuit"
        ],
        "original_question": "Where can I find the information about the races held on Sepang International Circuit?",
        "question": "Where can I find the information about the races held on Okayama Intl Circuit?",
        "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
        "changes_information": {
            "original_value": "Okayama International Circuit",
            "abbreviation_acronym": "Okayama Intl Circuit"
        }
    },
    {
        "SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Okayama International Circuit'",
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "circuits.circuitid",
            "circuits.name",
            "races.time",
            "races.circuitid"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "name",
                "value": "Okayama International Circuit",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "circuits.name.sepang international circuit"
        ],
        "original_question": "Please list the time of the races held on Sepang International Circuit.",
        "question": "Please list the time of the races held on Okayama Intl Circuit.",
        "original_SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
        "changes_information": {
            "original_value": "Okayama International Circuit",
            "abbreviation_acronym": "Okayama Intl Circuit"
        }
    },
    {
        "SQL": "SELECT lat, lng FROM circuits WHERE name = 'Okayama International Circuit'",
        "tables": [
            "circuits"
        ],
        "columns": [
            "circuits.lat",
            "circuits.lng",
            "circuits.name"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "name",
                "value": "Okayama International Circuit",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
        "values_list": [
            "circuits.name.silverstone circuit"
        ],
        "original_question": "What's the location coordinates of Silverstone Circuit?",
        "question": "What's the location coordinates of Okayama Intl Circuit?",
        "original_SQL": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
        "changes_information": {
            "original_value": "Okayama International Circuit",
            "abbreviation_acronym": "Okayama Intl Circuit"
        }
    },
    {
        "SQL": "SELECT circuitRef FROM circuits WHERE name = 'Okayama International Circuit'",
        "tables": [
            "circuits"
        ],
        "columns": [
            "circuits.circuitref",
            "circuits.name"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "name",
                "value": "Okayama International Circuit",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'",
        "values_list": [
            "circuits.name.marina bay street circuit"
        ],
        "original_question": "What's the reference name of Marina Bay Street Circuit?",
        "question": "What's the reference name of Okayama Intl Circuit?",
        "original_SQL": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'",
        "changes_information": {
            "original_value": "Okayama International Circuit",
            "abbreviation_acronym": "Okayama Intl Circuit"
        }
    },
    {
        "SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Okayama International Circuit'",
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "circuits.circuitid",
            "races.year",
            "races.circuitid",
            "circuits.name"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "name",
                "value": "Okayama International Circuit",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "circuits.name.silverstone circuit"
        ],
        "original_question": "Please list all the years that Silverstone Circuit was used in a Formula_1 race.",
        "question": "Please list all the years that Okayama Intl Circuit was used in a Formula_1 race.",
        "original_SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
        "changes_information": {
            "original_value": "Okayama International Circuit",
            "abbreviation_acronym": "Okayama Intl Circuit"
        }
    },
    {
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Okayama International Circuit'",
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "circuits.circuitid",
            "races.circuitid",
            "circuits.name",
            "circuits.url"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "name",
                "value": "Okayama International Circuit",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "more information refers to url",
        "values_list": [
            "circuits.name.silverstone circuit"
        ],
        "original_question": "Please give more information about the Formula_1 races that used the Silverstone Circuit.",
        "question": "Please give more information about the Formula_1 races that used the Okayama Intl Circuit.",
        "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
        "changes_information": {
            "original_value": "Okayama International Circuit",
            "abbreviation_acronym": "Okayama Intl Circuit"
        }
    },
    {
        "SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Okayama International Circuit'",
        "tables": [
            "circuits"
        ],
        "columns": [
            "circuits.lat",
            "circuits.lng",
            "circuits.country",
            "circuits.name"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "name",
                "value": "Okayama International Circuit",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "coordinates expressed in latitude and longitude refers to (lat, lng)",
        "values_list": [
            "circuits.name.okayama_international_circuit"
        ],
        "original_question": "In which location does the Hungaroring circuit located? Also, find the country and coordinates of this circuit?",
        "question": "In which location does the Okayama Intl Circuit circuit located? Also, find the country and coordinates of this circuit?",
        "original_SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Hungaroring'",
        "changes_information": {
            "original_value": "Okayama International Circuit",
            "abbreviation_acronym": "Okayama Intl Circuit"
        }
    },
    {
        "SQL": "SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 on T1.constructorId = T2.constructorId WHERE T1.nationality = 'New Zealand' ORDER BY T2.points DESC LIMIT 1",
        "tables": [
            "constructors",
            "constructorstandings"
        ],
        "columns": [
            "constructorstandings.constructorid",
            "constructors.nationality",
            "constructorstandings.points",
            "constructors.constructorid",
            "constructors.url"
        ],
        "values": [
            {
                "table": "constructors",
                "column": "nationality",
                "value": "New Zealand",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "introduction website refers to url; Italian is a nationality",
        "values_list": [
            "constructors.nationality.new_zealand"
        ],
        "original_question": "Which of the Italian constructor got the highest point to date? Give its introduction website?",
        "question": "Which of the NZ constructor got the highest point to date? Give its introduction website?",
        "original_SQL": "SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 on T1.constructorId = T2.constructorId WHERE T1.nationality = 'Italian' ORDER BY T2.points DESC LIMIT 1",
        "changes_information": {
            "original_value": "New Zealand",
            "abbreviation_acronym": "NZ"
        }
    },
    {
        "SQL": "SELECT DISTINCT T3.product_name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.nation  =  'Great Britain' OR T1.nation  =  'Great Britain'",
        "tables": [
            "cyclists_own_bikes",
            "cyclist",
            "bike"
        ],
        "columns": [
            "bike.id",
            "cyclist.nation",
            "bike.product_name",
            "cyclists_own_bikes.bike_id",
            "cyclist.id",
            "cyclists_own_bikes.cyclist_id"
        ],
        "values": [
            {
                "table": "cyclist",
                "column": "nation",
                "value": "Great Britain",
                "condition": "="
            },
            {
                "table": "cyclist",
                "column": "nation",
                "value": "Great Britain",
                "condition": "="
            }
        ],
        "db_id": "bike_racing",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "cyclist.nation.great_britain",
            "cyclist.nation.great britain"
        ],
        "original_question": "What are the distinct product names of bikes owned by cyclists from 'Russia' or cyclists from 'Great Britain'?",
        "question": "What are the distinct product names of bikes owned by cyclists from 'GB' or cyclists from 'Great Britain'?",
        "original_SQL": "SELECT DISTINCT T3.product_name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.nation  =  'Russia' OR T1.nation  =  'Great Britain'",
        "changes_information": {
            "original_value": "Great Britain",
            "abbreviation_acronym": "GB"
        }
    },
    {
        "SQL": "SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'north Bohemia' ORDER BY T1.date ASC LIMIT 1",
        "tables": [
            "district",
            "account"
        ],
        "columns": [
            "account.date",
            "account.account_id",
            "account.district_id",
            "district.a3",
            "district.district_id"
        ],
        "values": [
            {
                "table": "district",
                "column": "a3",
                "value": "north Bohemia",
                "condition": "="
            }
        ],
        "db_id": "financial",
        "source": "bird_dev",
        "evidence": "A3 stands for region names",
        "values_list": [
            "district.a3.north_bohemia"
        ],
        "original_question": "For the first client who opened his/her account in Prague, what is his/her account ID?",
        "question": "For the first client who opened his/her account in N Bohemia, what is his/her account ID?",
        "original_SQL": "SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague' ORDER BY T1.date ASC LIMIT 1",
        "changes_information": {
            "original_value": "north Bohemia",
            "abbreviation_acronym": "N Bohemia"
        }
    },
    {
        "SQL": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'north Bohemia' GROUP BY T2.A4 ORDER BY T2.A4 DESC LIMIT 1",
        "tables": [
            "district",
            "client"
        ],
        "columns": [
            "client.gender",
            "client.district_id",
            "district.a4",
            "district.a3",
            "district.district_id",
            "client.client_id"
        ],
        "values": [
            {
                "table": "district",
                "column": "a3",
                "value": "north Bohemia",
                "condition": "="
            },
            {
                "table": "client",
                "column": "gender",
                "value": "M",
                "condition": "="
            }
        ],
        "db_id": "financial",
        "source": "bird_dev",
        "evidence": "Percentage of the male clients = DIVIDE(COUNT(male clients), COUNT(clients)) * 100; Male refers to gender = 'M', A3 is the region name. A4 contains the information about inhabitants.",
        "values_list": [
            "district.a3.south bohemia",
            "client.gender.m"
        ],
        "original_question": "For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients?",
        "question": "For the branch which located in the N Bohemia with biggest number of inhabitants, what is the percentage of the male clients?",
        "original_SQL": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' GROUP BY T2.A4 ORDER BY T2.A4 DESC LIMIT 1",
        "changes_information": {
            "original_value": "north Bohemia",
            "abbreviation_acronym": "N Bohemia"
        }
    },
    {
        "SQL": "SELECT T1.account_id, T1.frequency FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'north Bohemia' AND STRFTIME('%Y', T1.date) BETWEEN '1995' AND '2000'",
        "tables": [
            "district",
            "account"
        ],
        "columns": [
            "account.date",
            "account.frequency",
            "account.account_id",
            "account.district_id",
            "district.a3",
            "district.district_id"
        ],
        "values": [
            {
                "table": "district",
                "column": "a3",
                "value": "north Bohemia",
                "condition": "="
            }
        ],
        "db_id": "financial",
        "source": "bird_dev",
        "evidence": "Accounts holder refers to the person who own this account.",
        "values_list": [
            "district.a3.east bohemia"
        ],
        "original_question": "From Year 1995 to 2000, who are the accounts holders from 'east Bohemia'. State the account ID the frequency of statement issuance.",
        "question": "From Year 1995 to 2000, who are the accounts holders from 'N Bohemia'. State the account ID the frequency of statement issuance.",
        "original_SQL": "SELECT T1.account_id, T1.frequency FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'east Bohemia' AND STRFTIME('%Y', T1.date) BETWEEN '1995' AND '2000'",
        "changes_information": {
            "original_value": "north Bohemia",
            "abbreviation_acronym": "N Bohemia"
        }
    },
    {
        "SQL": "SELECT T1.client_id, T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T4 ON T1.client_id = T4.client_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id and T4.account_id = T3.account_id WHERE T2.A3 = 'north Bohemia' AND STRFTIME('%Y', T1.birth_date) BETWEEN '1983' AND '1987'",
        "tables": [
            "disp",
            "district",
            "client",
            "account"
        ],
        "columns": [
            "client.district_id",
            "disp.account_id",
            "account.account_id",
            "disp.client_id",
            "account.district_id",
            "district.a3",
            "client.birth_date",
            "district.district_id",
            "client.client_id"
        ],
        "values": [
            {
                "table": "district",
                "column": "a3",
                "value": "north Bohemia",
                "condition": "="
            }
        ],
        "db_id": "financial",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "district.a3.east bohemia"
        ],
        "original_question": "Please provide a list of clients who were born between 1983 and 1987 and whose account branch is in East Bohemia, along with their IDs.",
        "question": "Please provide a list of clients who were born between 1983 and 1987 and whose account branch is in N Bohemia, along with their IDs.",
        "original_SQL": "SELECT T1.client_id, T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T4 ON T1.client_id = T4.client_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id and T4.account_id = T3.account_id WHERE T2.A3 = 'east Bohemia' AND STRFTIME('%Y', T1.birth_date) BETWEEN '1983' AND '1987'",
        "changes_information": {
            "original_value": "north Bohemia",
            "abbreviation_acronym": "N Bohemia"
        }
    },
    {
        "SQL": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Ransom Collection'",
        "tables": [
            "document_objects"
        ],
        "columns": [
            "document_objects.description",
            "document_objects.owner"
        ],
        "values": [
            {
                "table": "document_objects",
                "column": "description",
                "value": "Ransom Collection",
                "condition": "="
            }
        ],
        "db_id": "cre_Doc_and_collections",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "document_objects.description.braeden collection"
        ],
        "original_question": "What is the owner of document with the Description 'Braeden Collection'?",
        "question": "What is the owner of document with the Description 'Ransom Coll'?",
        "original_SQL": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Braeden Collection'",
        "changes_information": {
            "original_value": "Ransom Collection",
            "abbreviation_acronym": "Ransom Coll"
        }
    },
    {
        "SQL": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Ransom Collection'",
        "tables": [
            "document_objects"
        ],
        "columns": [
            "document_objects.description",
            "document_objects.owner"
        ],
        "values": [
            {
                "table": "document_objects",
                "column": "description",
                "value": "Ransom Collection",
                "condition": "="
            }
        ],
        "db_id": "cre_Doc_and_collections",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "document_objects.description.braeden collection"
        ],
        "original_question": "What are the owners of the document objects described as the 'Braeden Collection'?",
        "question": "What are the owners of the document objects described as the 'Ransom Coll'?",
        "original_SQL": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Braeden Collection'",
        "changes_information": {
            "original_value": "Ransom Collection",
            "abbreviation_acronym": "Ransom Coll"
        }
    },
    {
        "SQL": "SELECT location FROM event WHERE event_name = 'March Meeting'",
        "tables": [
            "event"
        ],
        "columns": [
            "event.location",
            "event.event_name"
        ],
        "values": [
            {
                "table": "event",
                "column": "event_name",
                "value": "March Meeting",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "'Spring Budget Review' is an event name;",
        "values_list": [
            "event.event_name.spring budget review"
        ],
        "original_question": "Give the location for \"Spring Budget Review\".",
        "question": "Give the location for \"Mar Meeting\".",
        "original_SQL": "SELECT location FROM event WHERE event_name = 'Spring Budget Review'",
        "changes_information": {
            "original_value": "March Meeting",
            "abbreviation_acronym": "Mar Meeting"
        }
    },
    {
        "SQL": "SELECT T2.category, SUM(T2.amount) FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'March Meeting' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC",
        "tables": [
            "budget",
            "event"
        ],
        "columns": [
            "budget.amount",
            "event.event_name",
            "budget.category",
            "budget.link_to_event",
            "event.event_id"
        ],
        "values": [
            {
                "table": "event",
                "column": "event_name",
                "value": "March Meeting",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "'April Speaker' is an event name; amount budgeted refers to SUM(amount); budget categories refers to category",
        "values_list": [
            "event.event_name.april speaker"
        ],
        "original_question": "Calculate the amount budgeted for 'April Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted.",
        "question": "Calculate the amount budgeted for 'Mar Meeting' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted.",
        "original_SQL": "SELECT T2.category, SUM(T2.amount) FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'April Speaker' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC",
        "changes_information": {
            "original_value": "March Meeting",
            "abbreviation_acronym": "Mar Meeting"
        }
    },
    {
        "SQL": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'March Meeting'",
        "tables": [
            "budget",
            "event"
        ],
        "columns": [
            "budget.amount",
            "event.event_name",
            "budget.category",
            "budget.link_to_event",
            "event.event_id"
        ],
        "values": [
            {
                "table": "event",
                "column": "event_name",
                "value": "March Meeting",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "amount budgeted refers to amount, 'January Speaker' is the event name;",
        "values_list": [
            "event.event_name.january speaker"
        ],
        "original_question": "What category was budgeted for the 'January Speaker' event and how much was the amount budgeted for that category?",
        "question": "What category was budgeted for the 'Mar Meeting' event and how much was the amount budgeted for that category?",
        "original_SQL": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'January Speaker'",
        "changes_information": {
            "original_value": "March Meeting",
            "abbreviation_acronym": "Mar Meeting"
        }
    },
    {
        "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Laugh Out Loud'",
        "tables": [
            "member",
            "event",
            "attendance"
        ],
        "columns": [
            "attendance.link_to_event",
            "event.event_name",
            "member.member_id",
            "member.first_name",
            "attendance.link_to_member",
            "event.event_id",
            "member.last_name"
        ],
        "values": [
            {
                "table": "event",
                "column": "event_name",
                "value": "Laugh Out Loud",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "full name of members refers to first_name, last_name; 'Laugh Out Loud' is an event name;",
        "values_list": [
            "event.event_name.laugh out loud"
        ],
        "original_question": "List the full name of all the members of the Student_Club who attended the \"Laugh Out Loud\" event.",
        "question": "List the full name of all the members of the Student_Club who attended the \"LOL\" event.",
        "original_SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Laugh Out Loud'",
        "changes_information": {
            "original_value": "Laugh Out Loud",
            "abbreviation_acronym": "LOL"
        }
    },
    {
        "SQL": "SELECT location FROM event WHERE event_name = 'Laugh Out Loud'",
        "tables": [
            "event"
        ],
        "columns": [
            "event.location",
            "event.event_name"
        ],
        "values": [
            {
                "table": "event",
                "column": "event_name",
                "value": "Laugh Out Loud",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "'Spring Budget Review' is an event name;",
        "values_list": [
            "event.event_name.spring budget review"
        ],
        "original_question": "Give the location for \"Spring Budget Review\".",
        "question": "Give the location for \"LOL\".",
        "original_SQL": "SELECT location FROM event WHERE event_name = 'Spring Budget Review'",
        "changes_information": {
            "original_value": "Laugh Out Loud",
            "abbreviation_acronym": "LOL"
        }
    },
    {
        "SQL": "SELECT DISTINCT T3.member_id FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Laugh Out Loud'",
        "tables": [
            "member",
            "event",
            "attendance"
        ],
        "columns": [
            "attendance.link_to_event",
            "event.event_name",
            "member.member_id",
            "attendance.link_to_member",
            "event.event_id"
        ],
        "values": [
            {
                "table": "event",
                "column": "event_name",
                "value": "Laugh Out Loud",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "'October Meeting' is an event name;",
        "values_list": [
            "event.event_name.october meeting"
        ],
        "original_question": "List all the members who attended the event \"October Meeting\".",
        "question": "List all the members who attended the event \"LOL\".",
        "original_SQL": "SELECT DISTINCT T3.member_id FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'October Meeting'",
        "changes_information": {
            "original_value": "Laugh Out Loud",
            "abbreviation_acronym": "LOL"
        }
    },
    {
        "SQL": "SELECT T2.first_name, T2.last_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T4.event_name = 'Laugh Out Loud' AND T1.major_name = 'Interior Design'",
        "tables": [
            "member",
            "event",
            "major",
            "attendance"
        ],
        "columns": [
            "attendance.link_to_event",
            "event.event_name",
            "member.member_id",
            "member.link_to_major",
            "member.first_name",
            "attendance.link_to_member",
            "major.major_id",
            "major.major_name",
            "event.event_id",
            "member.last_name"
        ],
        "values": [
            {
                "table": "event",
                "column": "event_name",
                "value": "Laugh Out Loud",
                "condition": "="
            },
            {
                "table": "major",
                "column": "major_name",
                "value": "Interior Design",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "majored in music refers to major_name = 'Interior Design'; 'Community Theater' is the event name;",
        "values_list": [
            "event.event_name.community theater",
            "major.major_name.interior design"
        ],
        "original_question": "Among the students majored in interior design, who have attended the Community Theater event?",
        "question": "Among the students majored in interior design, who have attended the LOL event?",
        "original_SQL": "SELECT T2.first_name, T2.last_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T4.event_name = 'Community Theater' AND T1.major_name = 'Interior Design'",
        "changes_information": {
            "original_value": "Laugh Out Loud",
            "abbreviation_acronym": "LOL"
        }
    },
    {
        "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'",
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.uuid",
            "cards.name",
            "foreign_data.language",
            "foreign_data.uuid"
        ],
        "values": [
            {
                "table": "foreign_data",
                "column": "language",
                "value": "Chinese Simplified",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Japanese' is the language;",
        "values_list": [
            "foreign_data.language.chinese_simplified"
        ],
        "original_question": "Name all the cards which have alternative language in Japanese.",
        "question": "Name all the cards which have alternative language in Chinese Simp..",
        "original_SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'",
        "changes_information": {
            "original_value": "Chinese Simplified",
            "abbreviation_acronym": "Chinese Simp."
        }
    },
    {
        "SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'",
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.artist",
            "foreign_data.language",
            "foreign_data.uuid",
            "cards.uuid"
        ],
        "values": [
            {
                "table": "foreign_data",
                "column": "language",
                "value": "Chinese Simplified",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Phyrexian' is the language; name of artists refers to artist;",
        "values_list": [
            "foreign_data.language.chinese_simplified"
        ],
        "original_question": "Please provide the names of the artists who illustrated the card art in Phyrexian.",
        "question": "Please provide the names of the artists who illustrated the card art in Chinese Simp..",
        "original_SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Phyrexian'",
        "changes_information": {
            "original_value": "Chinese Simplified",
            "abbreviation_acronym": "Chinese Simp."
        }
    },
    {
        "SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'",
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.artist",
            "foreign_data.language",
            "foreign_data.uuid",
            "cards.uuid"
        ],
        "values": [
            {
                "table": "foreign_data",
                "column": "language",
                "value": "Chinese Simplified",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Chinese Simplified' is the language;",
        "values_list": [
            "foreign_data.language.chinese simplified"
        ],
        "original_question": "List down the name of artists for cards in Chinese Simplified.",
        "question": "List down the name of artists for cards in Chinese Simp..",
        "original_SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'",
        "changes_information": {
            "original_value": "Chinese Simplified",
            "abbreviation_acronym": "Chinese Simp."
        }
    },
    {
        "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Chinese Simplified'",
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.name",
            "foreign_data.uuid",
            "cards.uuid",
            "foreign_data.language",
            "cards.availability"
        ],
        "values": [
            {
                "table": "cards",
                "column": "availability",
                "value": "paper",
                "condition": "="
            },
            {
                "table": "foreign_data",
                "column": "language",
                "value": "Chinese Simplified",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "available in paper refers to availability = 'paper'; 'Japanese is the language;",
        "values_list": [
            "cards.availability.paper",
            "foreign_data.language.chinese_simplified"
        ],
        "original_question": "What are the cards that only available in paper and Japanese language?",
        "question": "What are the cards that only available in paper and Chinese Simp. language?",
        "original_SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Japanese'",
        "changes_information": {
            "original_value": "Chinese Simplified",
            "abbreviation_acronym": "Chinese Simp."
        }
    },
    {
        "SQL": "SELECT ( SELECT CAST(SUM(CASE WHEN language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ), name FROM foreign_data WHERE language = 'Chinese Simplified'",
        "tables": [
            "foreign_data"
        ],
        "columns": [
            "foreign_data.language"
        ],
        "values": [
            {
                "table": "foreign_data",
                "column": "language",
                "value": "Chinese Simplified",
                "condition": "="
            },
            {
                "table": "",
                "column": "language",
                "value": "Spanish",
                "condition": "="
            },
            {
                "table": "",
                "column": "language",
                "value": "Spanish",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Spanish refer to language; Percentage refer to DIVIDE(SUM(ID where language = 'Spanish'), COUNT(id))*100",
        "values_list": [
            "foreign_data.language.chinese_simplified",
            ".language.spanish",
            ".language.spanish"
        ],
        "original_question": "Calculate the percentage of cards in Spanish. List them by name.",
        "question": "Calculate the percentage of cards in Chinese Simp.. List them by name.",
        "original_SQL": "SELECT ( SELECT CAST(SUM(CASE WHEN language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ), name FROM foreign_data WHERE language = 'Spanish'",
        "changes_information": {
            "original_value": "Chinese Simplified",
            "abbreviation_acronym": "Chinese Simp."
        }
    },
    {
        "SQL": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL",
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.subtypes",
            "foreign_data.uuid",
            "cards.supertypes",
            "cards.uuid",
            "foreign_data.language"
        ],
        "values": [
            {
                "table": "foreign_data",
                "column": "language",
                "value": "Chinese Simplified",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "German refer to language; all types refer to the subtypes, supertypes; subtypes is not null AND supertypes is not null",
        "values_list": [
            "foreign_data.language.chinese_simplified"
        ],
        "original_question": "Lists all types of cards in German.",
        "question": "Lists all types of cards in Chinese Simp..",
        "original_SQL": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL",
        "changes_information": {
            "original_value": "Chinese Simplified",
            "abbreviation_acronym": "Chinese Simp."
        }
    },
    {
        "SQL": "SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Chinese Simplified'",
        "tables": [
            "sets",
            "cards",
            "foreign_data"
        ],
        "columns": [
            "sets.code",
            "foreign_data.text",
            "foreign_data.uuid",
            "cards.uuid",
            "foreign_data.language",
            "cards.setcode",
            "sets.name"
        ],
        "values": [
            {
                "table": "sets",
                "column": "name",
                "value": "Coldsnap",
                "condition": "="
            },
            {
                "table": "foreign_data",
                "column": "language",
                "value": "Chinese Simplified",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'",
        "values_list": [
            "sets.name.coldsnap",
            "foreign_data.language.chinese_simplified"
        ],
        "original_question": "Please list the Italian text ruling of all the cards in the set Coldsnap.",
        "question": "Please list the Chinese Simp. text ruling of all the cards in the set Coldsnap.",
        "original_SQL": "SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian'",
        "changes_information": {
            "original_value": "Chinese Simplified",
            "abbreviation_acronym": "Chinese Simp."
        }
    },
    {
        "SQL": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Chinese Simplified' ORDER BY T2.convertedManaCost DESC",
        "tables": [
            "sets",
            "cards",
            "foreign_data"
        ],
        "columns": [
            "sets.code",
            "cards.convertedmanacost",
            "cards.name",
            "foreign_data.uuid",
            "cards.uuid",
            "foreign_data.language",
            "cards.setcode",
            "sets.name"
        ],
        "values": [
            {
                "table": "sets",
                "column": "name",
                "value": "Coldsnap",
                "condition": "="
            },
            {
                "table": "foreign_data",
                "column": "language",
                "value": "Chinese Simplified",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'; highest converted mana cost refers to MAX(convertedManaCost)",
        "values_list": [
            "sets.name.coldsnap",
            "foreign_data.language.chinese_simplified"
        ],
        "original_question": "Please list the Italian names of the cards in the set Coldsnap with the highest converted mana cost.",
        "question": "Please list the Chinese Simp. names of the cards in the set Coldsnap with the highest converted mana cost.",
        "original_SQL": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian' ORDER BY T2.convertedManaCost DESC",
        "changes_information": {
            "original_value": "Chinese Simplified",
            "abbreviation_acronym": "Chinese Simp."
        }
    },
    {
        "SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'Incorporation'",
        "tables": [
            "foreign_data"
        ],
        "columns": [
            "foreign_data.language",
            "foreign_data.name"
        ],
        "values": [
            {
                "table": "foreign_data",
                "column": "name",
                "value": "Incorporation",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "\"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
        "values_list": [
            "foreign_data.name.a pedra fellwar"
        ],
        "original_question": "Which foreign language used by \"A Pedra Fellwar\"?",
        "question": "Which foreign language used by \"Inc.\"?",
        "original_SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar'",
        "changes_information": {
            "original_value": "Incorporation",
            "abbreviation_acronym": "Inc."
        }
    },
    {
        "SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'Lieutenant du consul'",
        "tables": [
            "foreign_data"
        ],
        "columns": [
            "foreign_data.language",
            "foreign_data.name"
        ],
        "values": [
            {
                "table": "foreign_data",
                "column": "name",
                "value": "Lieutenant du consul",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "\"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
        "values_list": [
            "foreign_data.name.a pedra fellwar"
        ],
        "original_question": "Which foreign language used by \"A Pedra Fellwar\"?",
        "question": "Which foreign language used by \"Lt du consul\"?",
        "original_SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar'",
        "changes_information": {
            "original_value": "Lieutenant du consul",
            "abbreviation_acronym": "Lt du consul"
        }
    },
    {
        "SQL": "SELECT Country , ( SELECT COUNT(GasStationID) FROM gasstations WHERE Segment = 'Value for money' ) FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country ORDER BY COUNT(GasStationID) DESC LIMIT 1",
        "tables": [
            "gasstations"
        ],
        "columns": [
            "gasstations.segment",
            "gasstations.gasstationid"
        ],
        "values": [
            {
                "table": "gasstations",
                "column": "segment",
                "value": "Value for money",
                "condition": "="
            },
            {
                "table": "",
                "column": "segment",
                "value": "Value for money",
                "condition": "="
            },
            {
                "table": "",
                "column": "segment",
                "value": "Value for money",
                "condition": "="
            }
        ],
        "db_id": "debit_card_specializing",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "gasstations.segment.value for money",
            ".segment.value for money",
            ".segment.value for money"
        ],
        "original_question": "Which country has more \"value for money\" gas stations? Please give a total number of \"value for money\" gas stations in each country.",
        "question": "Which country has more \"VFM\" gas stations? Please give a total number of \"value for money\" gas stations in each country.",
        "original_SQL": "SELECT Country , ( SELECT COUNT(GasStationID) FROM gasstations WHERE Segment = 'Value for money' ) FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country ORDER BY COUNT(GasStationID) DESC LIMIT 1",
        "changes_information": {
            "original_value": "Value for money",
            "abbreviation_acronym": "VFM"
        }
    },
    {
        "SQL": "SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'England Premier League'",
        "tables": [
            "league",
            "country"
        ],
        "columns": [
            "country.name",
            "league.country_id",
            "league.name",
            "country.id"
        ],
        "values": [
            {
                "table": "league",
                "column": "name",
                "value": "England Premier League",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "Italy Serie A from refers to League.name = 'Italy Serie A';",
        "values_list": [
            "league.name.italy serie a"
        ],
        "original_question": "Which country is the league Italy Serie A from?",
        "question": "Which country is the league EPL from?",
        "original_SQL": "SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'Italy Serie A'",
        "changes_information": {
            "original_value": "England Premier League",
            "abbreviation_acronym": "EPL"
        }
    },
    {
        "SQL": "SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'England Premier League'",
        "tables": [
            "league",
            "country"
        ],
        "columns": [
            "country.name",
            "league.country_id",
            "league.name",
            "country.id"
        ],
        "values": [
            {
                "table": "league",
                "column": "name",
                "value": "England Premier League",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "Belgium Jupiler League refers to League.name = 'Belgium Jupiler League';",
        "values_list": [
            "league.name.belgium jupiler league"
        ],
        "original_question": "Which country is the Belgium Jupiler League from?",
        "question": "Which country is the EPL from?",
        "original_SQL": "SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'Belgium Jupiler League'",
        "changes_information": {
            "original_value": "England Premier League",
            "abbreviation_acronym": "EPL"
        }
    },
    {
        "SQL": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position LIKE 'Vice President'",
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.link_to_major",
            "major.major_id",
            "member.position",
            "major.college"
        ],
        "values": [
            {
                "table": "member",
                "column": "position",
                "value": "Vice President",
                "condition": "LIKE"
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "Vice President is a position of the Student Club",
        "values_list": [
            "member.position.vice president"
        ],
        "original_question": "Which college is the vice president of the Student_Club from?",
        "question": "Which college is the VP of the Student_Club from?",
        "original_SQL": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position LIKE 'vice president'",
        "changes_information": {
            "original_value": "Vice President",
            "abbreviation_acronym": "VP"
        }
    },
    {
        "SQL": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
        "tables": [
            "member",
            "income"
        ],
        "columns": [
            "income.link_to_member",
            "member.member_id",
            "member.position",
            "income.amount"
        ],
        "values": [
            {
                "table": "member",
                "column": "position",
                "value": "Vice President",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "'Vice President' is a position of Student Club; funds received refers to amount.",
        "values_list": [
            "member.position.vice president"
        ],
        "original_question": "What is the amount of the funds that the Vice President received?",
        "question": "What is the amount of the funds that the VP received?",
        "original_SQL": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
        "changes_information": {
            "original_value": "Vice President",
            "abbreviation_acronym": "VP"
        }
    },
    {
        "SQL": "SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'Vice President'",
        "tables": [
            "member",
            "zip_code"
        ],
        "columns": [
            "zip_code.zip_code",
            "zip_code.state",
            "zip_code.city",
            "member.position",
            "member.zip"
        ],
        "values": [
            {
                "table": "member",
                "column": "position",
                "value": "Vice President",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "'President' is a position of Student Club;",
        "values_list": [
            "member.position.vice_president"
        ],
        "original_question": "What city and state did the President of the Student_Club grow up?",
        "question": "What city and state did the VP of the Student_Club grow up?",
        "original_SQL": "SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'President'",
        "changes_information": {
            "original_value": "Vice President",
            "abbreviation_acronym": "VP"
        }
    },
    {
        "SQL": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'",
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.position",
            "major.major_id",
            "major.major_name",
            "member.link_to_major"
        ],
        "values": [
            {
                "table": "member",
                "column": "position",
                "value": "Vice President",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "'Vice President' is a position of Student Club",
        "values_list": [
            "member.position.vice president"
        ],
        "original_question": "State the major name for the Vice President of the club.",
        "question": "State the major name for the VP of the club.",
        "original_SQL": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'",
        "changes_information": {
            "original_value": "Vice President",
            "abbreviation_acronym": "VP"
        }
    },
    {
        "SQL": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'",
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "major.department",
            "major.major_id",
            "member.position",
            "member.link_to_major"
        ],
        "values": [
            {
                "table": "member",
                "column": "position",
                "value": "Vice President",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "'President' is a position of Student Club",
        "values_list": [
            "member.position.vice_president"
        ],
        "original_question": "Which department was the President of the club in?",
        "question": "Which department was the VP of the club in?",
        "original_SQL": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'",
        "changes_information": {
            "original_value": "Vice President",
            "abbreviation_acronym": "VP"
        }
    },
    {
        "SQL": "SELECT T2.expense_id, T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
        "tables": [
            "member",
            "expense"
        ],
        "columns": [
            "expense.link_to_member",
            "member.member_id",
            "member.position",
            "expense.expense_id",
            "expense.expense_description"
        ],
        "values": [
            {
                "table": "member",
                "column": "position",
                "value": "Vice President",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "expense refers to expense_description; 'Vice President' is a position of the Student Club",
        "values_list": [
            "member.position.vice president"
        ],
        "original_question": "List all the expenses incurred by the vice president.",
        "question": "List all the expenses incurred by the VP.",
        "original_SQL": "SELECT T2.expense_id, T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
        "changes_information": {
            "original_value": "Vice President",
            "abbreviation_acronym": "VP"
        }
    },
    {
        "SQL": "SELECT first_name, last_name, email FROM member WHERE position = 'Vice President'",
        "tables": [
            "member"
        ],
        "columns": [
            "member.email",
            "member.first_name",
            "member.position",
            "member.last_name"
        ],
        "values": [
            {
                "table": "member",
                "column": "position",
                "value": "Vice President",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "full name refers to first_name, last_name; 'Secretary' is a position of Student Club",
        "values_list": [
            "member.position.vice_president"
        ],
        "original_question": "Provide the full name and email address of the Student_Club's Secretary.",
        "question": "Provide the full name and email address of the Student_Club's VP.",
        "original_SQL": "SELECT first_name, last_name, email FROM member WHERE position = 'Secretary'",
        "changes_information": {
            "original_value": "Vice President",
            "abbreviation_acronym": "VP"
        }
    },
    {
        "SQL": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Vice President'",
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.position",
            "major.major_id",
            "major.major_name",
            "member.link_to_major"
        ],
        "values": [
            {
                "table": "member",
                "column": "position",
                "value": "Vice President",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "name of major refers to major_name; 'Vice President' is position of Student Club",
        "values_list": [
            "member.position.vice president"
        ],
        "original_question": "State the name of major that Vice President has joined.",
        "question": "State the name of major that VP has joined.",
        "original_SQL": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Vice President'",
        "changes_information": {
            "original_value": "Vice President",
            "abbreviation_acronym": "VP"
        }
    },
    {
        "SQL": "SELECT T2.event_name FROM attendance AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T3.position = 'Vice President' AND T2.location = '900 E. Washington St.' AND T2.type = 'Social'",
        "tables": [
            "member",
            "event",
            "attendance"
        ],
        "columns": [
            "attendance.link_to_event",
            "event.event_name",
            "member.member_id",
            "event.type",
            "attendance.link_to_member",
            "member.position",
            "event.event_id",
            "event.location"
        ],
        "values": [
            {
                "table": "event",
                "column": "type",
                "value": "Social",
                "condition": "="
            },
            {
                "table": "member",
                "column": "position",
                "value": "Vice President",
                "condition": "="
            },
            {
                "table": "event",
                "column": "location",
                "value": "900 E. Washington St.",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "name of social event refers to event_name where type = 'Social'; 'Vice President' is position; located at refers to location",
        "values_list": [
            "event.type.social",
            "member.position.vice president",
            "event.location.900 e. washington st."
        ],
        "original_question": "What is the name of the social event that was attended by the vice president of the Student_Club located at 900 E. Washington St.?",
        "question": "What is the name of the social event that was attended by the VP of the Student_Club located at 900 E. Washington St.?",
        "original_SQL": "SELECT T2.event_name FROM attendance AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T3.position = 'Vice President' AND T2.location = '900 E. Washington St.' AND T2.type = 'Social'",
        "changes_information": {
            "original_value": "Vice President",
            "abbreviation_acronym": "VP"
        }
    },
    {
        "SQL": "SELECT T1.first_name, T1.last_name, college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Vice President'",
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.link_to_major",
            "member.first_name",
            "major.major_id",
            "member.position",
            "member.last_name"
        ],
        "values": [
            {
                "table": "member",
                "column": "position",
                "value": "Vice President",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "full name refers to first_name, last name",
        "values_list": [
            "member.position.vice_president"
        ],
        "original_question": "Write the full name of the club member with the position of 'Secretary' and list which college the club member belongs to.",
        "question": "Write the full name of the club member with the position of 'VP' and list which college the club member belongs to.",
        "original_SQL": "SELECT T1.first_name, T1.last_name, college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Secretary'",
        "changes_information": {
            "original_value": "Vice President",
            "abbreviation_acronym": "VP"
        }
    },
    {
        "SQL": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Central City District Residential Museum'",
        "tables": [
            "museum"
        ],
        "columns": [
            "museum.num_of_staff",
            "museum.name",
            "museum.open_year"
        ],
        "values": [
            {
                "table": "museum",
                "column": "name",
                "value": "Central City District Residential Museum",
                "condition": "="
            }
        ],
        "db_id": "museum_visit",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "museum.name.plaza museum"
        ],
        "original_question": "What are the opening year and staff number of the museum named Plaza Museum?",
        "question": "What are the opening year and staff number of the museum named CCD Residential Museum?",
        "original_SQL": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
        "changes_information": {
            "original_value": "Central City District Residential Museum",
            "abbreviation_acronym": "CCD Residential Museum"
        }
    },
    {
        "SQL": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Vermont'",
        "tables": [
            "owners",
            "dogs"
        ],
        "columns": [
            "owners.state",
            "dogs.owner_id",
            "dogs.name",
            "owners.first_name",
            "owners.owner_id"
        ],
        "values": [
            {
                "table": "owners",
                "column": "state",
                "value": "Vermont",
                "condition": "="
            }
        ],
        "db_id": "dog_kennels",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "owners.state.vermont"
        ],
        "original_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "question": "Which dogs are owned by someone who lives in VT? List the owner's first name and the dog's name.",
        "original_SQL": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "changes_information": {
            "original_value": "Vermont",
            "abbreviation_acronym": "VT"
        }
    },
    {
        "SQL": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Vermont'",
        "tables": [
            "owners",
            "dogs"
        ],
        "columns": [
            "owners.state",
            "dogs.owner_id",
            "dogs.name",
            "owners.first_name",
            "owners.owner_id"
        ],
        "values": [
            {
                "table": "owners",
                "column": "state",
                "value": "Vermont",
                "condition": "="
            }
        ],
        "db_id": "dog_kennels",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "owners.state.vermont"
        ],
        "original_question": "Find the first names of owners living in Virginia and the names of dogs they own.",
        "question": "Find the first names of owners living in VT and the names of dogs they own.",
        "original_SQL": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "changes_information": {
            "original_value": "Vermont",
            "abbreviation_acronym": "VT"
        }
    },
    {
        "SQL": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Adrian Ricardo Centurion'",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player.player_name",
            "player_attributes.player_api_id",
            "player_attributes.attacking_work_rate",
            "player.player_api_id"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Adrian Ricardo Centurion",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "player.player_name.franco zennaro"
        ],
        "original_question": "What is the attacking work rate of the football playerr Franco Zennaro?",
        "question": "What is the attacking work rate of the football playerr Adrian R. Centurion?",
        "original_SQL": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Franco Zennaro'",
        "changes_information": {
            "original_value": "Adrian Ricardo Centurion",
            "abbreviation_acronym": "Adrian R. Centurion"
        }
    },
    {
        "SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Adrian Ricardo Centurion' AND SUBSTR(t2.`date`, 1, 10) = '2014-09-18'",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player.player_name",
            "player_attributes.player_api_id",
            "player_attributes.heading_accuracy",
            "player_attributes.date",
            "player.player_api_id"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Adrian Ricardo Centurion",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "header's finishing rate refers to heading_accuracy; on 18/09/2014 refers to date = '2014-09-18 00:00:00';",
        "values_list": [
            "player.player_name.francois affolter"
        ],
        "original_question": "What is the football player Francois Affolter header's finishing rate on 18/09/2014?",
        "question": "What is the football player Adrian R. Centurion header's finishing rate on 18/09/2014?",
        "original_SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Francois Affolter' AND SUBSTR(t2.`date`, 1, 10) = '2014-09-18'",
        "changes_information": {
            "original_value": "Adrian Ricardo Centurion",
            "abbreviation_acronym": "Adrian R. Centurion"
        }
    },
    {
        "SQL": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Adrian Ricardo Centurion'",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player.player_name",
            "player_attributes.player_api_id",
            "player_attributes.defensive_work_rate",
            "player.player_api_id"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Adrian Ricardo Centurion",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "player.player_name.david wilson"
        ],
        "original_question": "What is the defensive work rate of the football player David Wilson\n?",
        "question": "What is the defensive work rate of the football player Adrian R. Centurion\n?",
        "original_SQL": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'David Wilson'",
        "changes_information": {
            "original_value": "Adrian Ricardo Centurion",
            "abbreviation_acronym": "Adrian R. Centurion"
        }
    },
    {
        "SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Adrian Ricardo Centurion'",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player.player_name",
            "player_attributes.player_api_id",
            "player_attributes.potential",
            "player.player_api_id"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Adrian Ricardo Centurion",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "potential score refers to potential;",
        "values_list": [
            "player.player_name.aaron doran"
        ],
        "original_question": "What is Aaron Doran's potential score?",
        "question": "What is Adrian R. Centurion's potential score?",
        "original_SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran'",
        "changes_information": {
            "original_value": "Adrian Ricardo Centurion",
            "abbreviation_acronym": "Adrian R. Centurion"
        }
    },
    {
        "SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Adrian Ricardo Centurion'",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player_attributes.heading_accuracy",
            "player_attributes.player_api_id",
            "player.player_api_id",
            "player.player_name"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Adrian Ricardo Centurion",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "player.player_name.ariel borysiuk"
        ],
        "original_question": "What's the heading accuracy of Ariel Borysiuk?",
        "question": "What's the heading accuracy of Adrian R. Centurion?",
        "original_SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ariel Borysiuk'",
        "changes_information": {
            "original_value": "Adrian Ricardo Centurion",
            "abbreviation_acronym": "Adrian R. Centurion"
        }
    },
    {
        "SQL": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Adrian Ricardo Centurion'",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player.player_name",
            "player_attributes.player_api_id",
            "player.player_api_id",
            "player_attributes.preferred_foot"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Adrian Ricardo Centurion",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "Abdou Diallo refers to player_name = 'Abdou Diallo'; foot is preferred refers to preferred_foot",
        "values_list": [
            "player.player_name.abdou diallo"
        ],
        "original_question": "Which foot is preferred by Abdou Diallo?",
        "question": "Which foot is preferred by Adrian R. Centurion?",
        "original_SQL": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abdou Diallo'",
        "changes_information": {
            "original_value": "Adrian Ricardo Centurion",
            "abbreviation_acronym": "Adrian R. Centurion"
        }
    },
    {
        "SQL": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Adrian Ricardo Centurion' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player.player_name",
            "player.player_fifa_api_id",
            "player_attributes.crossing",
            "player_attributes.date",
            "player_attributes.player_fifa_api_id"
        ],
        "values": [
            {
                "table": "player",
                "column": "player_name",
                "value": "Adrian Ricardo Centurion",
                "condition": "="
            },
            {
                "table": "player",
                "column": "player_name",
                "value": "Kevin Constant",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)",
        "values_list": [
            "player.player_name.kevin constant",
            "player.player_name.kevin constant"
        ],
        "original_question": "When was the first time did Kevin Constant have his highest crossing score? Give the date.",
        "question": "When was the first time did Adrian R. Centurion have his highest crossing score? Give the date.",
        "original_SQL": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Kevin Constant' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
        "changes_information": {
            "original_value": "Adrian Ricardo Centurion",
            "abbreviation_acronym": "Adrian R. Centurion"
        }
    },
    {
        "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Classifier success rate and confidence intervals'",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.id",
            "posts.title",
            "users.displayname",
            "posts.owneruserid"
        ],
        "values": [
            {
                "table": "posts",
                "column": "title",
                "value": "Classifier success rate and confidence intervals",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
        "values_list": [
            "posts.title.eliciting priors from experts"
        ],
        "original_question": "Who is the owner of the post \"Eliciting priors from experts\"?",
        "question": "Who is the owner of the post \"Classifier success rate and CI\"?",
        "original_SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
        "changes_information": {
            "original_value": "Classifier success rate and confidence intervals",
            "abbreviation_acronym": "Classifier success rate and CI"
        }
    },
    {
        "SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Classifier success rate and confidence intervals'",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.id",
            "users.location",
            "posts.title",
            "posts.owneruserid"
        ],
        "values": [
            {
                "table": "posts",
                "column": "title",
                "value": "Classifier success rate and confidence intervals",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
        "values_list": [
            "posts.title.eliciting priors from experts"
        ],
        "original_question": "What is the location of the owner of the post \"Eliciting priors from experts\"?",
        "question": "What is the location of the owner of the post \"Classifier success rate and CI\"?",
        "original_SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
        "changes_information": {
            "original_value": "Classifier success rate and confidence intervals",
            "abbreviation_acronym": "Classifier success rate and CI"
        }
    },
    {
        "SQL": "SELECT ViewCount FROM posts WHERE Title = 'Classifier success rate and confidence intervals'",
        "tables": [
            "posts"
        ],
        "columns": [
            "posts.title",
            "posts.viewcount"
        ],
        "values": [
            {
                "table": "posts",
                "column": "title",
                "value": "Classifier success rate and confidence intervals",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
        "values_list": [
            "posts.title.integration of weka and/or rapidminer into informatica powercenter/developer"
        ],
        "original_question": "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?",
        "question": "How many views did the post titled 'Classifier success rate and CI' get?",
        "original_SQL": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
        "changes_information": {
            "original_value": "Classifier success rate and confidence intervals",
            "abbreviation_acronym": "Classifier success rate and CI"
        }
    },
    {
        "SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Classifier success rate and confidence intervals'",
        "tables": [
            "posts"
        ],
        "columns": [
            "posts.lasteditoruserid",
            "posts.title",
            "posts.lasteditdate"
        ],
        "values": [
            {
                "table": "posts",
                "column": "title",
                "value": "Classifier success rate and confidence intervals",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "Title = 'Detecting a given face in a database of facial images';",
        "values_list": [
            "posts.title.detecting a given face in a database of facial images"
        ],
        "original_question": "Provide the last edit date and last edit user ID for the post \"Detecting a given face in a database of facial images\".",
        "question": "Provide the last edit date and last edit user ID for the post \"Classifier success rate and CI\".",
        "original_SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'",
        "changes_information": {
            "original_value": "Classifier success rate and confidence intervals",
            "abbreviation_acronym": "Classifier success rate and CI"
        }
    },
    {
        "SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Classifier success rate and confidence intervals'",
        "tables": [
            "posts"
        ],
        "columns": [
            "posts.title",
            "posts.commentcount",
            "posts.answercount"
        ],
        "values": [
            {
                "table": "posts",
                "column": "title",
                "value": "Classifier success rate and confidence intervals",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "posts.title.clustering 1d data"
        ],
        "original_question": "How many comments and answers were left by the users on the post with the title 'Clustering 1D data'?",
        "question": "How many comments and answers were left by the users on the post with the title 'Classifier success rate and CI'?",
        "original_SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Clustering 1D data'",
        "changes_information": {
            "original_value": "Classifier success rate and confidence intervals",
            "abbreviation_acronym": "Classifier success rate and CI"
        }
    },
    {
        "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Classifier success rate and confidence intervals'",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.id",
            "posts.title",
            "users.displayname",
            "posts.owneruserid"
        ],
        "values": [
            {
                "table": "posts",
                "column": "title",
                "value": "Classifier success rate and confidence intervals",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
        "values_list": [
            "posts.title.eliciting priors from experts"
        ],
        "original_question": "Who is the owner of the post \"Eliciting priors from experts\"?",
        "question": "Who is the owner of the post \"Classifier success rate and CI\"?",
        "original_SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
        "changes_information": {
            "original_value": "Classifier success rate and confidence intervals",
            "abbreviation_acronym": "Classifier success rate and CI"
        }
    },
    {
        "SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Classifier success rate and confidence intervals'",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.id",
            "users.location",
            "posts.title",
            "posts.owneruserid"
        ],
        "values": [
            {
                "table": "posts",
                "column": "title",
                "value": "Classifier success rate and confidence intervals",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
        "values_list": [
            "posts.title.eliciting priors from experts"
        ],
        "original_question": "What is the location of the owner of the post \"Eliciting priors from experts\"?",
        "question": "What is the location of the owner of the post \"Classifier success rate and CI\"?",
        "original_SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
        "changes_information": {
            "original_value": "Classifier success rate and confidence intervals",
            "abbreviation_acronym": "Classifier success rate and CI"
        }
    },
    {
        "SQL": "SELECT ViewCount FROM posts WHERE Title = 'Classifier success rate and confidence intervals'",
        "tables": [
            "posts"
        ],
        "columns": [
            "posts.title",
            "posts.viewcount"
        ],
        "values": [
            {
                "table": "posts",
                "column": "title",
                "value": "Classifier success rate and confidence intervals",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
        "values_list": [
            "posts.title.integration of weka and/or rapidminer into informatica powercenter/developer"
        ],
        "original_question": "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?",
        "question": "How many views did the post titled 'Classifier success rate and CI' get?",
        "original_SQL": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
        "changes_information": {
            "original_value": "Classifier success rate and confidence intervals",
            "abbreviation_acronym": "Classifier success rate and CI"
        }
    },
    {
        "SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Classifier success rate and confidence intervals'",
        "tables": [
            "posts"
        ],
        "columns": [
            "posts.lasteditoruserid",
            "posts.title",
            "posts.lasteditdate"
        ],
        "values": [
            {
                "table": "posts",
                "column": "title",
                "value": "Classifier success rate and confidence intervals",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "Title = 'Detecting a given face in a database of facial images';",
        "values_list": [
            "posts.title.detecting a given face in a database of facial images"
        ],
        "original_question": "Provide the last edit date and last edit user ID for the post \"Detecting a given face in a database of facial images\".",
        "question": "Provide the last edit date and last edit user ID for the post \"Classifier success rate and CI\".",
        "original_SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'",
        "changes_information": {
            "original_value": "Classifier success rate and confidence intervals",
            "abbreviation_acronym": "Classifier success rate and CI"
        }
    },
    {
        "SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Classifier success rate and confidence intervals'",
        "tables": [
            "posts"
        ],
        "columns": [
            "posts.title",
            "posts.commentcount",
            "posts.answercount"
        ],
        "values": [
            {
                "table": "posts",
                "column": "title",
                "value": "Classifier success rate and confidence intervals",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "posts.title.clustering 1d data"
        ],
        "original_question": "How many comments and answers were left by the users on the post with the title 'Clustering 1D data'?",
        "question": "How many comments and answers were left by the users on the post with the title 'Classifier success rate and CI'?",
        "original_SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Clustering 1D data'",
        "changes_information": {
            "original_value": "Classifier success rate and confidence intervals",
            "abbreviation_acronym": "Classifier success rate and CI"
        }
    },
    {
        "SQL": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Sony Pictures'",
        "tables": [
            "publisher",
            "superhero"
        ],
        "columns": [
            "publisher.id",
            "superhero.publisher_id",
            "publisher.publisher_name"
        ],
        "values": [
            {
                "table": "publisher",
                "column": "publisher_name",
                "value": "Sony Pictures",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "name refers to superhero_name; the tallest hero refers to MAX(height_cm); published by Marvel Comics refers to publisher_name = 'Marvel Comics'",
        "values_list": [
            "publisher.publisher_name.marvel comics"
        ],
        "original_question": "Rank heroes published by Marvel Comics by their height in descending order.",
        "question": "Rank heroes published by Sony Pics by their height in descending order.",
        "original_SQL": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
        "changes_information": {
            "original_value": "Sony Pictures",
            "abbreviation_acronym": "Sony Pics"
        }
    },
    {
        "SQL": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Sony Pictures' GROUP BY colour.colour",
        "tables": [
            "publisher",
            "superhero",
            "colour"
        ],
        "columns": [
            "superhero.id",
            "colour.colour",
            "publisher.publisher_name",
            "colour.id",
            "publisher.id",
            "superhero.eye_colour_id",
            "superhero.publisher_id"
        ],
        "values": [
            {
                "table": "publisher",
                "column": "publisher_name",
                "value": "Sony Pictures",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; most common color refers to COUNT(superhero.id) DESC;",
        "values_list": [
            "publisher.publisher_name.marvel comics"
        ],
        "original_question": "Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color.",
        "question": "Rank superheroes from Sony Pics by their eye color popularity, starting with the most common color.",
        "original_SQL": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY colour.colour",
        "changes_information": {
            "original_value": "Sony Pictures",
            "abbreviation_acronym": "Sony Pics"
        }
    },
    {
        "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Sony Pictures' AND T1.publisher_id = T4.id)",
        "tables": [
            "publisher",
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "superhero.id",
            "hero_power.power_id",
            "superpower.id",
            "publisher.publisher_name",
            "publisher.id",
            "hero_power.hero_id",
            "superpower.power_name",
            "superhero.publisher_id"
        ],
        "values": [
            {
                "table": "superpower",
                "column": "power_name",
                "value": "Super Strength",
                "condition": "="
            },
            {
                "table": "publisher",
                "column": "publisher_name",
                "value": "Sony Pictures",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
        "values_list": [
            "superpower.power_name.super strength",
            "publisher.publisher_name.marvel comics"
        ],
        "original_question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
        "question": "List the superheroes from Sony Pics who have the super power of 'Super Strength'.",
        "original_SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
        "changes_information": {
            "original_value": "Sony Pictures",
            "abbreviation_acronym": "Sony Pics"
        }
    },
    {
        "SQL": "SELECT id FROM publisher WHERE publisher_name = 'Sony Pictures'",
        "tables": [
            "publisher"
        ],
        "columns": [
            "publisher.id",
            "publisher.publisher_name"
        ],
        "values": [
            {
                "table": "publisher",
                "column": "publisher_name",
                "value": "Sony Pictures",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "Star Trek is the publisher_name;",
        "values_list": [
            "publisher.publisher_name.star trek"
        ],
        "original_question": "Give the publisher ID of Star Trek.",
        "question": "Give the publisher ID of Sony Pics.",
        "original_SQL": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'",
        "changes_information": {
            "original_value": "Sony Pictures",
            "abbreviation_acronym": "Sony Pics"
        }
    },
    {
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Sony Pictures' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
        "tables": [
            "publisher",
            "hero_attribute",
            "superhero",
            "attribute"
        ],
        "columns": [
            "superhero.id",
            "superhero.superhero_name",
            "publisher.publisher_name",
            "attribute.attribute_name",
            "publisher.id",
            "attribute.id",
            "hero_attribute.hero_id",
            "hero_attribute.attribute_value",
            "superhero.publisher_id",
            "hero_attribute.attribute_id"
        ],
        "values": [
            {
                "table": "publisher",
                "column": "publisher_name",
                "value": "Sony Pictures",
                "condition": "="
            },
            {
                "table": "attribute",
                "column": "attribute_name",
                "value": "Durability",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
        "values_list": [
            "publisher.publisher_name.dark horse comics",
            "attribute.attribute_name.durability"
        ],
        "original_question": "Which superhero has the most durability published by Dark Horse Comics?",
        "question": "Which superhero has the most durability published by Sony Pics?",
        "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
        "changes_information": {
            "original_value": "Sony Pictures",
            "abbreviation_acronym": "Sony Pics"
        }
    },
    {
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Sony Pictures' ORDER BY T1.weight_kg DESC LIMIT 1",
        "tables": [
            "publisher",
            "superhero"
        ],
        "columns": [
            "superhero.weight_kg",
            "superhero.superhero_name",
            "publisher.publisher_name",
            "publisher.id",
            "superhero.publisher_id"
        ],
        "values": [
            {
                "table": "publisher",
                "column": "publisher_name",
                "value": "Sony Pictures",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "heaviest refers to MAX(weight_kg); DC Comics refers to publisher_name = 'DC Comics'; superhero refers to superhero_name;",
        "values_list": [
            "publisher.publisher_name.dc comics"
        ],
        "original_question": "Identify the heaviest superhero in DC Comics.",
        "question": "Identify the heaviest superhero in Sony Pics.",
        "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics' ORDER BY T1.weight_kg DESC LIMIT 1",
        "changes_information": {
            "original_value": "Sony Pictures",
            "abbreviation_acronym": "Sony Pics"
        }
    },
    {
        "SQL": "SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Commander' AND T2.language = 'Italian' ORDER BY T1.id LIMIT 2",
        "tables": [
            "sets",
            "set_translations"
        ],
        "columns": [
            "set_translations.language",
            "sets.code",
            "sets.id",
            "sets.block",
            "set_translations.setcode",
            "sets.name"
        ],
        "values": [
            {
                "table": "sets",
                "column": "block",
                "value": "Commander",
                "condition": "="
            },
            {
                "table": "set_translations",
                "column": "language",
                "value": "Italian",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "sets.block.commander",
            "set_translations.language.italian"
        ],
        "original_question": "Please list top two sets of cards with their IDs that have Italian-language cards and are located in the Shadowmoor block in alphabetical order.",
        "question": "Please list top two sets of cards with their IDs that have Italian-language cards and are located in the Cmdr block in alphabetical order.",
        "original_SQL": "SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Shadowmoor' AND T2.language = 'Italian' ORDER BY T1.id LIMIT 2",
        "changes_information": {
            "original_value": "Commander",
            "abbreviation_acronym": "Cmdr"
        }
    },
    {
        "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Animal Attributes' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
        "tables": [
            "publisher",
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "superhero.id",
            "hero_power.power_id",
            "superpower.id",
            "publisher.publisher_name",
            "publisher.id",
            "hero_power.hero_id",
            "superpower.power_name",
            "superhero.publisher_id"
        ],
        "values": [
            {
                "table": "superpower",
                "column": "power_name",
                "value": "Animal Attributes",
                "condition": "="
            },
            {
                "table": "publisher",
                "column": "publisher_name",
                "value": "Marvel Comics",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
        "values_list": [
            "superpower.power_name.super strength",
            "publisher.publisher_name.marvel comics"
        ],
        "original_question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
        "question": "List the superheroes from Marvel Comics who have the super power of 'Animal Atts'.",
        "original_SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
        "changes_information": {
            "original_value": "Animal Attributes",
            "abbreviation_acronym": "Animal Atts"
        }
    },
    {
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Animal Attributes'",
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "hero_power.power_id",
            "superhero.id",
            "superpower.id",
            "superhero.superhero_name",
            "hero_power.hero_id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "superpower",
                "column": "power_name",
                "value": "Animal Attributes",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
        "values_list": [
            "superpower.power_name.death touch"
        ],
        "original_question": "What are the names of the superheroes with the power of death touch?",
        "question": "What are the names of the superheroes with the power of Animal Atts?",
        "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
        "changes_information": {
            "original_value": "Animal Attributes",
            "abbreviation_acronym": "Animal Atts"
        }
    },
    {
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Animal Attributes'",
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "hero_power.power_id",
            "superhero.id",
            "superpower.id",
            "superhero.superhero_name",
            "hero_power.hero_id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "superpower",
                "column": "power_name",
                "value": "Animal Attributes",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
        "values_list": [
            "superpower.power_name.animal_attributes"
        ],
        "original_question": "List the name of superheroes with flight power.",
        "question": "List the name of superheroes with Animal Atts power.",
        "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'",
        "changes_information": {
            "original_value": "Animal Attributes",
            "abbreviation_acronym": "Animal Atts"
        }
    },
    {
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Animal Attributes'",
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "hero_power.power_id",
            "superhero.id",
            "superpower.id",
            "superhero.superhero_name",
            "hero_power.hero_id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "superpower",
                "column": "power_name",
                "value": "Animal Attributes",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "adaptation power refers to power_name = 'Adaptation';",
        "values_list": [
            "superpower.power_name.animal_attributes"
        ],
        "original_question": "Provide superheroes' names who have the adaptation power.",
        "question": "Provide superheroes' names who have the Animal Atts power.",
        "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'",
        "changes_information": {
            "original_value": "Animal Attributes",
            "abbreviation_acronym": "Animal Atts"
        }
    },
    {
        "SQL": "SELECT id FROM superpower WHERE power_name = 'Animal Attributes'",
        "tables": [
            "superpower"
        ],
        "columns": [
            "superpower.power_name",
            "superpower.id"
        ],
        "values": [
            {
                "table": "superpower",
                "column": "power_name",
                "value": "Animal Attributes",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
        "values_list": [
            "superpower.power_name.animal_attributes"
        ],
        "original_question": "What is the power ID of cryokinesis?",
        "question": "What is the power ID of Animal Atts?",
        "original_SQL": "SELECT id FROM superpower WHERE power_name = 'Cryokinesis'",
        "changes_information": {
            "original_value": "Animal Attributes",
            "abbreviation_acronym": "Animal Atts"
        }
    },
    {
        "SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Animal Attributes'",
        "tables": [
            "superhero",
            "gender",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "gender.gender",
            "hero_power.power_id",
            "superhero.id",
            "superpower.id",
            "gender.id",
            "superhero.gender_id",
            "hero_power.hero_id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "superpower",
                "column": "power_name",
                "value": "Animal Attributes",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "ability of Phoenix Force refers to power_name = 'Phoenix Force';",
        "values_list": [
            "superpower.power_name.phoenix force"
        ],
        "original_question": "Identify the gender of the superhero who has the ability of Phoenix Force.",
        "question": "Identify the gender of the superhero who has the ability of Animal Atts.",
        "original_SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force'",
        "changes_information": {
            "original_value": "Animal Attributes",
            "abbreviation_acronym": "Animal Atts"
        }
    },
    {
        "SQL": "SELECT team_short_name FROM Team WHERE team_long_name = 'West Ham United'",
        "tables": [
            "team"
        ],
        "columns": [
            "team.team_short_name",
            "team.team_long_name"
        ],
        "values": [
            {
                "table": "team",
                "column": "team_long_name",
                "value": "West Ham United",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "short name of the football team refers to team_short_name; Queens Park Rangers refers to team_long_name = 'Queens Park Rangers';",
        "values_list": [
            "team.team_long_name.queens park rangers"
        ],
        "original_question": "What is the short name of the football team Queens Park Rangers?",
        "question": "What is the short name of the football team WHU?",
        "original_SQL": "SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers'",
        "changes_information": {
            "original_value": "West Ham United",
            "abbreviation_acronym": "WHU"
        }
    },
    {
        "SQL": "SELECT DISTINCT t2.buildUpPlayPositioningClass FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.team_long_name = 'West Ham United'",
        "tables": [
            "team_attributes",
            "team"
        ],
        "columns": [
            "team_attributes.team_fifa_api_id",
            "team.team_fifa_api_id",
            "team_attributes.buildupplaypositioningclass",
            "team.team_long_name"
        ],
        "values": [
            {
                "table": "team",
                "column": "team_long_name",
                "value": "West Ham United",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "ADO Den Haag refers to team_long_name = 'ADO Den Haag'; freedom of movement in the 1st two thirds of the pitch refers to buildUpPlayPositioningClass;",
        "values_list": [
            "team.team_long_name.ado den haag"
        ],
        "original_question": "What is the ADO Den Haag team freedom of movement in the 1st two thirds of the pitch?",
        "question": "What is the WHU team freedom of movement in the 1st two thirds of the pitch?",
        "original_SQL": "SELECT DISTINCT t2.buildUpPlayPositioningClass FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.team_long_name = 'ADO Den Haag'",
        "changes_information": {
            "original_value": "West Ham United",
            "abbreviation_acronym": "WHU"
        }
    },
    {
        "SQL": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'West Ham United' ORDER BY t2.chanceCreationPassing DESC LIMIT 1",
        "tables": [
            "team_attributes",
            "team"
        ],
        "columns": [
            "team.team_api_id",
            "team_attributes.chancecreationpassing",
            "team_attributes.team_api_id",
            "team_attributes.chancecreationpassingclass",
            "team.team_long_name"
        ],
        "values": [
            {
                "table": "team",
                "column": "team_long_name",
                "value": "West Ham United",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "Ajax's refers to team_long_name = 'Ajax'; chance creation passing score refers to MAX(chanceCreationPassing); classified refer to chanceCreationPassingClass",
        "values_list": [
            "team.team_long_name.west_ham_united"
        ],
        "original_question": "What is Ajax's highest chance creation passing score and what is it classified as?",
        "question": "What is WHU's highest chance creation passing score and what is it classified as?",
        "original_SQL": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Ajax' ORDER BY t2.chanceCreationPassing DESC LIMIT 1",
        "changes_information": {
            "original_value": "West Ham United",
            "abbreviation_acronym": "WHU"
        }
    },
    {
        "SQL": "SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'West Ham United' AND SUBSTR(t2.`date`, 1, 10) = '2011-02-22'",
        "tables": [
            "team_attributes",
            "team"
        ],
        "columns": [
            "team.team_api_id",
            "team_attributes.date",
            "team_attributes.team_api_id",
            "team_attributes.buildupplayspeedclass",
            "team.team_long_name"
        ],
        "values": [
            {
                "table": "team",
                "column": "team_long_name",
                "value": "West Ham United",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "\"Willem II\" refers to team_long_name = 'Willem II'; on 2011/2/22 refers to date = '2012-02-22'",
        "values_list": [
            "team.team_long_name.willem ii"
        ],
        "original_question": "What was the build up play speed class for \"Willem II\" on 2011/2/22?",
        "question": "What was the build up play speed class for \"WHU\" on 2011/2/22?",
        "original_SQL": "SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Willem II' AND SUBSTR(t2.`date`, 1, 10) = '2011-02-22'",
        "changes_information": {
            "original_value": "West Ham United",
            "abbreviation_acronym": "WHU"
        }
    },
    {
        "SQL": "SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'West Ham United' AND SUBSTR(t2.`date`, 1, 10) = '2013-09-20'",
        "tables": [
            "team_attributes",
            "team"
        ],
        "columns": [
            "team.team_api_id",
            "team_attributes.date",
            "team_attributes.team_api_id",
            "team_attributes.chancecreationpassingclass",
            "team.team_long_name"
        ],
        "values": [
            {
                "table": "team",
                "column": "team_long_name",
                "value": "West Ham United",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "\"PEC Zwolle\" refers to team_long_name = 'PEC Zwolle'; on 2013/9/20 refers to date = '2013-09-20 00:00:00'",
        "values_list": [
            "team.team_long_name.pec zwolle"
        ],
        "original_question": "State the chance creation passing class for \"PEC Zwolle\" on 2013/9/20.",
        "question": "State the chance creation passing class for \"WHU\" on 2013/9/20.",
        "original_SQL": "SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'PEC Zwolle' AND SUBSTR(t2.`date`, 1, 10) = '2013-09-20'",
        "changes_information": {
            "original_value": "West Ham United",
            "abbreviation_acronym": "WHU"
        }
    },
    {
        "SQL": "SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'West Ham United' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'",
        "tables": [
            "team_attributes",
            "team"
        ],
        "columns": [
            "team.team_api_id",
            "team_attributes.date",
            "team_attributes.team_api_id",
            "team.team_long_name",
            "team_attributes.chancecreationcrossingclass"
        ],
        "values": [
            {
                "table": "team",
                "column": "team_long_name",
                "value": "West Ham United",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "\"Hull City\" refers to team_long_name = 'Hull City'; on 2010/2/22 refers to date = '2010-02-22 00:00:00'",
        "values_list": [
            "team.team_long_name.hull city"
        ],
        "original_question": "What was the chance creation crossing class for \"Hull City\" on 2010/2/22?",
        "question": "What was the chance creation crossing class for \"WHU\" on 2010/2/22?",
        "original_SQL": "SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hull City' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'",
        "changes_information": {
            "original_value": "West Ham United",
            "abbreviation_acronym": "WHU"
        }
    },
    {
        "SQL": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'West Ham United'",
        "tables": [
            "team_attributes",
            "team"
        ],
        "columns": [
            "team.team_api_id",
            "team.team_long_name",
            "team_attributes.buildupplayspeedclass",
            "team_attributes.team_api_id"
        ],
        "values": [
            {
                "table": "team",
                "column": "team_long_name",
                "value": "West Ham United",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "KSV Cercle Brugge refers to team_long_name = 'KSV Cercle Brugge'; speed class refers to buildUpPlaySpeedClass",
        "values_list": [
            "team.team_long_name.ksv cercle brugge"
        ],
        "original_question": "Does the KSV Cercle Brugge team have a slow, balanced or fast speed class?",
        "question": "Does the WHU team have a slow, balanced or fast speed class?",
        "original_SQL": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'KSV Cercle Brugge'",
        "changes_information": {
            "original_value": "West Ham United",
            "abbreviation_acronym": "WHU"
        }
    },
    {
        "SQL": "SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers'",
        "tables": [
            "team"
        ],
        "columns": [
            "team.team_short_name",
            "team.team_long_name"
        ],
        "values": [
            {
                "table": "team",
                "column": "team_long_name",
                "value": "Queens Park Rangers",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "short name of the football team refers to team_short_name; Queens Park Rangers refers to team_long_name = 'Queens Park Rangers';",
        "values_list": [
            "team.team_long_name.queens park rangers"
        ],
        "original_question": "What is the short name of the football team Queens Park Rangers?",
        "question": "What is the short name of the football team QPR?",
        "original_SQL": "SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers'",
        "changes_information": {
            "original_value": "Queens Park Rangers",
            "abbreviation_acronym": "QPR"
        }
    },
    {
        "SQL": "SELECT DISTINCT t2.buildUpPlayPositioningClass FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.team_long_name = 'Queens Park Rangers'",
        "tables": [
            "team_attributes",
            "team"
        ],
        "columns": [
            "team_attributes.team_fifa_api_id",
            "team.team_fifa_api_id",
            "team_attributes.buildupplaypositioningclass",
            "team.team_long_name"
        ],
        "values": [
            {
                "table": "team",
                "column": "team_long_name",
                "value": "Queens Park Rangers",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "ADO Den Haag refers to team_long_name = 'ADO Den Haag'; freedom of movement in the 1st two thirds of the pitch refers to buildUpPlayPositioningClass;",
        "values_list": [
            "team.team_long_name.ado den haag"
        ],
        "original_question": "What is the ADO Den Haag team freedom of movement in the 1st two thirds of the pitch?",
        "question": "What is the QPR team freedom of movement in the 1st two thirds of the pitch?",
        "original_SQL": "SELECT DISTINCT t2.buildUpPlayPositioningClass FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.team_long_name = 'ADO Den Haag'",
        "changes_information": {
            "original_value": "Queens Park Rangers",
            "abbreviation_acronym": "QPR"
        }
    },
    {
        "SQL": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Queens Park Rangers' ORDER BY t2.chanceCreationPassing DESC LIMIT 1",
        "tables": [
            "team_attributes",
            "team"
        ],
        "columns": [
            "team.team_api_id",
            "team_attributes.chancecreationpassing",
            "team_attributes.team_api_id",
            "team_attributes.chancecreationpassingclass",
            "team.team_long_name"
        ],
        "values": [
            {
                "table": "team",
                "column": "team_long_name",
                "value": "Queens Park Rangers",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "Ajax's refers to team_long_name = 'Ajax'; chance creation passing score refers to MAX(chanceCreationPassing); classified refer to chanceCreationPassingClass",
        "values_list": [
            "team.team_long_name.queens_park_rangers"
        ],
        "original_question": "What is Ajax's highest chance creation passing score and what is it classified as?",
        "question": "What is QPR's highest chance creation passing score and what is it classified as?",
        "original_SQL": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Ajax' ORDER BY t2.chanceCreationPassing DESC LIMIT 1",
        "changes_information": {
            "original_value": "Queens Park Rangers",
            "abbreviation_acronym": "QPR"
        }
    },
    {
        "SQL": "SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Queens Park Rangers' AND SUBSTR(t2.`date`, 1, 10) = '2011-02-22'",
        "tables": [
            "team_attributes",
            "team"
        ],
        "columns": [
            "team.team_api_id",
            "team_attributes.date",
            "team_attributes.team_api_id",
            "team_attributes.buildupplayspeedclass",
            "team.team_long_name"
        ],
        "values": [
            {
                "table": "team",
                "column": "team_long_name",
                "value": "Queens Park Rangers",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "\"Willem II\" refers to team_long_name = 'Willem II'; on 2011/2/22 refers to date = '2012-02-22'",
        "values_list": [
            "team.team_long_name.willem ii"
        ],
        "original_question": "What was the build up play speed class for \"Willem II\" on 2011/2/22?",
        "question": "What was the build up play speed class for \"QPR\" on 2011/2/22?",
        "original_SQL": "SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Willem II' AND SUBSTR(t2.`date`, 1, 10) = '2011-02-22'",
        "changes_information": {
            "original_value": "Queens Park Rangers",
            "abbreviation_acronym": "QPR"
        }
    },
    {
        "SQL": "SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Queens Park Rangers' AND SUBSTR(t2.`date`, 1, 10) = '2013-09-20'",
        "tables": [
            "team_attributes",
            "team"
        ],
        "columns": [
            "team.team_api_id",
            "team_attributes.date",
            "team_attributes.team_api_id",
            "team_attributes.chancecreationpassingclass",
            "team.team_long_name"
        ],
        "values": [
            {
                "table": "team",
                "column": "team_long_name",
                "value": "Queens Park Rangers",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "\"PEC Zwolle\" refers to team_long_name = 'PEC Zwolle'; on 2013/9/20 refers to date = '2013-09-20 00:00:00'",
        "values_list": [
            "team.team_long_name.pec zwolle"
        ],
        "original_question": "State the chance creation passing class for \"PEC Zwolle\" on 2013/9/20.",
        "question": "State the chance creation passing class for \"QPR\" on 2013/9/20.",
        "original_SQL": "SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'PEC Zwolle' AND SUBSTR(t2.`date`, 1, 10) = '2013-09-20'",
        "changes_information": {
            "original_value": "Queens Park Rangers",
            "abbreviation_acronym": "QPR"
        }
    },
    {
        "SQL": "SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Queens Park Rangers' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'",
        "tables": [
            "team_attributes",
            "team"
        ],
        "columns": [
            "team.team_api_id",
            "team_attributes.date",
            "team_attributes.team_api_id",
            "team.team_long_name",
            "team_attributes.chancecreationcrossingclass"
        ],
        "values": [
            {
                "table": "team",
                "column": "team_long_name",
                "value": "Queens Park Rangers",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "\"Hull City\" refers to team_long_name = 'Hull City'; on 2010/2/22 refers to date = '2010-02-22 00:00:00'",
        "values_list": [
            "team.team_long_name.hull city"
        ],
        "original_question": "What was the chance creation crossing class for \"Hull City\" on 2010/2/22?",
        "question": "What was the chance creation crossing class for \"QPR\" on 2010/2/22?",
        "original_SQL": "SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hull City' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'",
        "changes_information": {
            "original_value": "Queens Park Rangers",
            "abbreviation_acronym": "QPR"
        }
    },
    {
        "SQL": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'Queens Park Rangers'",
        "tables": [
            "team_attributes",
            "team"
        ],
        "columns": [
            "team.team_api_id",
            "team.team_long_name",
            "team_attributes.buildupplayspeedclass",
            "team_attributes.team_api_id"
        ],
        "values": [
            {
                "table": "team",
                "column": "team_long_name",
                "value": "Queens Park Rangers",
                "condition": "="
            }
        ],
        "db_id": "european_football_2",
        "source": "bird_dev",
        "evidence": "KSV Cercle Brugge refers to team_long_name = 'KSV Cercle Brugge'; speed class refers to buildUpPlaySpeedClass",
        "values_list": [
            "team.team_long_name.ksv cercle brugge"
        ],
        "original_question": "Does the KSV Cercle Brugge team have a slow, balanced or fast speed class?",
        "question": "Does the QPR team have a slow, balanced or fast speed class?",
        "original_SQL": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'KSV Cercle Brugge'",
        "changes_information": {
            "original_value": "Queens Park Rangers",
            "abbreviation_acronym": "QPR"
        }
    },
    {
        "SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Massachusetts'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "users.location",
            "badges.userid",
            "badges.date"
        ],
        "values": [
            {
                "table": "users",
                "column": "location",
                "value": "Massachusetts",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Rochester, NY\" is the Location of user; user refers to UserId",
        "values_list": [
            "users.location.rochester, ny"
        ],
        "original_question": "List out the dates that users who are located in Rochester, NY obtained their badges?",
        "question": "List out the dates that users who are located in MA obtained their badges?",
        "original_SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Rochester, NY'",
        "changes_information": {
            "original_value": "Massachusetts",
            "abbreviation_acronym": "MA"
        }
    },
    {
        "SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Massachusetts'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.age",
            "users.id",
            "users.location",
            "badges.userid"
        ],
        "values": [
            {
                "table": "users",
                "column": "location",
                "value": "Massachusetts",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Vienna, Austria\" is the Location",
        "values_list": [
            "users.location.vienna, austria"
        ],
        "original_question": "List out the age of users who located in Vienna, Austria obtained the badge?",
        "question": "List out the age of users who located in MA obtained the badge?",
        "original_SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Vienna, Austria'",
        "changes_information": {
            "original_value": "Massachusetts",
            "abbreviation_acronym": "MA"
        }
    },
    {
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'Massachusetts'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.location",
            "badges.userid",
            "badges.name",
            "users.id",
            "badges.date"
        ],
        "values": [
            {
                "table": "users",
                "column": "location",
                "value": "Massachusetts",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "received in 2011 refers to year(Date) = 2011;",
        "values_list": [
            "users.location.north pole"
        ],
        "original_question": "Provide the badge names received in 2011 for the user whose location is in the North Pole.",
        "question": "Provide the badge names received in 2011 for the user whose location is in the MA.",
        "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'North Pole'",
        "changes_information": {
            "original_value": "Massachusetts",
            "abbreviation_acronym": "MA"
        }
    },
    {
        "SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'South Africa'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "users.location",
            "badges.userid",
            "badges.date"
        ],
        "values": [
            {
                "table": "users",
                "column": "location",
                "value": "South Africa",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Rochester, NY\" is the Location of user; user refers to UserId",
        "values_list": [
            "users.location.rochester, ny"
        ],
        "original_question": "List out the dates that users who are located in Rochester, NY obtained their badges?",
        "question": "List out the dates that users who are located in SAfrica obtained their badges?",
        "original_SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Rochester, NY'",
        "changes_information": {
            "original_value": "South Africa",
            "abbreviation_acronym": "SAfrica"
        }
    },
    {
        "SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'South Africa'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.age",
            "users.id",
            "users.location",
            "badges.userid"
        ],
        "values": [
            {
                "table": "users",
                "column": "location",
                "value": "South Africa",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Vienna, Austria\" is the Location",
        "values_list": [
            "users.location.vienna, austria"
        ],
        "original_question": "List out the age of users who located in Vienna, Austria obtained the badge?",
        "question": "List out the age of users who located in SAfrica obtained the badge?",
        "original_SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Vienna, Austria'",
        "changes_information": {
            "original_value": "South Africa",
            "abbreviation_acronym": "SAfrica"
        }
    },
    {
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'South Africa'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.location",
            "badges.userid",
            "badges.name",
            "users.id",
            "badges.date"
        ],
        "values": [
            {
                "table": "users",
                "column": "location",
                "value": "South Africa",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "received in 2011 refers to year(Date) = 2011;",
        "values_list": [
            "users.location.north pole"
        ],
        "original_question": "Provide the badge names received in 2011 for the user whose location is in the North Pole.",
        "question": "Provide the badge names received in 2011 for the user whose location is in the SAfrica.",
        "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'North Pole'",
        "changes_information": {
            "original_value": "South Africa",
            "abbreviation_acronym": "SAfrica"
        }
    },
    {
        "SQL": "SELECT login_name FROM Users WHERE user_category_code  =  'Senior Citizen' ORDER BY first_name",
        "tables": [
            "users"
        ],
        "columns": [
            "users.first_name",
            "users.user_category_code",
            "users.login_name"
        ],
        "values": [
            {
                "table": "users",
                "column": "user_category_code",
                "value": "Senior Citizen",
                "condition": "="
            }
        ],
        "db_id": "real_estate_rentals",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "users.user_category_code.senior citizen"
        ],
        "original_question": "Find the login names of all senior citizen users ordered by their first names.",
        "question": "Find the login names of all Sr Citizen users ordered by their first names.",
        "original_SQL": "SELECT login_name FROM Users WHERE user_category_code  =  'Senior Citizen' ORDER BY first_name",
        "changes_information": {
            "original_value": "Senior Citizen",
            "abbreviation_acronym": "Sr Citizen"
        }
    }
]