[
    {
        "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Toils of Night and Day'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.name",
            "cards.keywords"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Toils of Night and Day",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Angel of Mercy' is the name of card;",
        "values_list": [
            "cards.name.angel of mercy"
        ],
        "original_question": "What is the keyword found on card 'Angel of Mercy'?",
        "question": "What is the keyword found on card 'Toils of Night & Day'?",
        "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
        "changes_information": {
            "original_value": "Toils of Night and Day",
            "word_to_symbol_change": "Toils of Night & Day"
        }
    },
    {
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Toils of Night and Day'",
        "tables": [
            "rulings",
            "cards"
        ],
        "columns": [
            "cards.uuid",
            "cards.name",
            "rulings.text",
            "rulings.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Toils of Night and Day",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
        "values_list": [
            "cards.name.toils_of_night_and_day"
        ],
        "original_question": "What is the description about the ruling of card \"Condemn\"?",
        "question": "What is the description about the ruling of card \"Toils of Night & Day\"?",
        "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn'",
        "changes_information": {
            "original_value": "Toils of Night and Day",
            "word_to_symbol_change": "Toils of Night & Day"
        }
    },
    {
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Toils of Night and Day'",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "legalities.uuid",
            "legalities.status",
            "cards.name",
            "cards.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Toils of Night and Day",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Cloudchaser Eagle is the name of card;",
        "values_list": [
            "cards.name.cloudchaser eagle"
        ],
        "original_question": "What is the status of card \"Cloudchaser Eagle\"?",
        "question": "What is the status of card \"Toils of Night & Day\"?",
        "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
        "changes_information": {
            "original_value": "Toils of Night and Day",
            "word_to_symbol_change": "Toils of Night & Day"
        }
    },
    {
        "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Toils of Night and Day'",
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.uuid",
            "cards.name",
            "foreign_data.uuid",
            "cards.type"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Toils of Night and Day",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Benalish Knight' is the name of card;",
        "values_list": [
            "cards.name.benalish knight"
        ],
        "original_question": "What is the type of card \"Benalish Knight\"?",
        "question": "What is the type of card \"Toils of Night & Day\"?",
        "original_SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
        "changes_information": {
            "original_value": "Toils of Night and Day",
            "word_to_symbol_change": "Toils of Night & Day"
        }
    },
    {
        "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Toils of Night and Day'",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "legalities.uuid",
            "cards.uuid",
            "legalities.format",
            "cards.name"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Toils of Night and Day",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
        "values_list": [
            "cards.name.benalish knight"
        ],
        "original_question": "What is the rule of playing card \"Benalish Knight\"?",
        "question": "What is the rule of playing card \"Toils of Night & Day\"?",
        "original_SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
        "changes_information": {
            "original_value": "Toils of Night and Day",
            "word_to_symbol_change": "Toils of Night & Day"
        }
    },
    {
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Toils of Night and Day'",
        "tables": [
            "rulings",
            "cards"
        ],
        "columns": [
            "cards.uuid",
            "cards.name",
            "rulings.text",
            "rulings.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Toils of Night and Day",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Beacon of Immortality' is the name of card;",
        "values_list": [
            "cards.name.beacon of immortality"
        ],
        "original_question": "Write down the ruling of Beacon of Immortality.",
        "question": "Write down the ruling of Toils of Night & Day.",
        "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality'",
        "changes_information": {
            "original_value": "Toils of Night and Day",
            "word_to_symbol_change": "Toils of Night & Day"
        }
    },
    {
        "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Toils of Night and Day'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.name",
            "cards.subtypes",
            "cards.supertypes"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Toils of Night and Day",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "values_list": [
            "cards.name.molimo, maro-sorcerer"
        ],
        "original_question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
        "question": "What's the list of all types for the card \"Toils of Night & Day\"?",
        "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
        "changes_information": {
            "original_value": "Toils of Night and Day",
            "word_to_symbol_change": "Toils of Night & Day"
        }
    },
    {
        "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Toils of Night and Day'",
        "tables": [
            "sets",
            "cards"
        ],
        "columns": [
            "sets.mtgocode",
            "cards.name",
            "cards.setcode",
            "sets.code"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Toils of Night and Day",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "values_list": [
            "cards.name.angel of mercy"
        ],
        "original_question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
        "question": "Did the set of cards with \"Toils of Night & Day\" appear on Magic: The Gathering Online?",
        "original_SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
        "changes_information": {
            "original_value": "Toils of Night and Day",
            "word_to_symbol_change": "Toils of Night & Day"
        }
    },
    {
        "SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Toils of Night and Day'",
        "tables": [
            "rulings",
            "cards"
        ],
        "columns": [
            "cards.uuid",
            "cards.name",
            "rulings.date",
            "rulings.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Toils of Night and Day",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Reminisce refers to name = 'Reminisce'; when created is the date",
        "values_list": [
            "cards.name.toils_of_night_and_day"
        ],
        "original_question": "When was the ruling for the card 'Reminisce' created?",
        "question": "When was the ruling for the card 'Toils of Night & Day' created?",
        "original_SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Reminisce'",
        "changes_information": {
            "original_value": "Toils of Night and Day",
            "word_to_symbol_change": "Toils of Night & Day"
        }
    },
    {
        "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Toils of Night and Day'",
        "tables": [
            "sets",
            "cards"
        ],
        "columns": [
            "cards.name",
            "cards.setcode",
            "sets.code",
            "sets.releasedate"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Toils of Night and Day",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "values_list": [
            "cards.name.toils_of_night_and_day"
        ],
        "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
        "question": "What was the release date for the set which card \"Toils of Night & Day\" in it?",
        "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
        "changes_information": {
            "original_value": "Toils of Night and Day",
            "word_to_symbol_change": "Toils of Night & Day"
        }
    },
    {
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Toils of Night and Day' AND T2.language = 'French' AND T2.translation IS NOT NULL",
        "tables": [
            "set_translations",
            "cards"
        ],
        "columns": [
            "set_translations.language",
            "cards.name",
            "set_translations.setcode",
            "cards.setcode",
            "set_translations.translation"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Toils of Night and Day",
                "condition": "="
            },
            {
                "table": "set_translations",
                "column": "language",
                "value": "French",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
        "values_list": [
            "cards.name.tendo ice bridge",
            "set_translations.language.french"
        ],
        "original_question": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in?",
        "question": "What's the French name of the set of cards with \"Toils of Night & Day\" is in?",
        "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL",
        "changes_information": {
            "original_value": "Toils of Night and Day",
            "word_to_symbol_change": "Toils of Night & Day"
        }
    },
    {
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Toils of Night and Day' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
        "tables": [
            "set_translations",
            "cards"
        ],
        "columns": [
            "set_translations.language",
            "cards.name",
            "set_translations.setcode",
            "cards.setcode",
            "set_translations.translation"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Toils of Night and Day",
                "condition": "="
            },
            {
                "table": "set_translations",
                "column": "language",
                "value": "Japanese",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
        "values_list": [
            "cards.name.fellwar stone",
            "set_translations.language.japanese"
        ],
        "original_question": "Tell the Japanese name of the set which card \"Fellwar Stone\" is in it.",
        "question": "Tell the Japanese name of the set which card \"Toils of Night & Day\" is in it.",
        "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
        "changes_information": {
            "original_value": "Toils of Night and Day",
            "word_to_symbol_change": "Toils of Night & Day"
        }
    },
    {
        "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Sword of Truth and Justice'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.name",
            "cards.keywords"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Sword of Truth and Justice",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Angel of Mercy' is the name of card;",
        "values_list": [
            "cards.name.angel of mercy"
        ],
        "original_question": "What is the keyword found on card 'Angel of Mercy'?",
        "question": "What is the keyword found on card 'Sword of Truth & Justice'?",
        "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
        "changes_information": {
            "original_value": "Sword of Truth and Justice",
            "word_to_symbol_change": "Sword of Truth & Justice"
        }
    },
    {
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sword of Truth and Justice'",
        "tables": [
            "rulings",
            "cards"
        ],
        "columns": [
            "cards.uuid",
            "cards.name",
            "rulings.text",
            "rulings.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Sword of Truth and Justice",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
        "values_list": [
            "cards.name.sword_of_truth_and_justice"
        ],
        "original_question": "What is the description about the ruling of card \"Condemn\"?",
        "question": "What is the description about the ruling of card \"Sword of Truth & Justice\"?",
        "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn'",
        "changes_information": {
            "original_value": "Sword of Truth and Justice",
            "word_to_symbol_change": "Sword of Truth & Justice"
        }
    },
    {
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sword of Truth and Justice'",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "legalities.uuid",
            "legalities.status",
            "cards.name",
            "cards.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Sword of Truth and Justice",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Cloudchaser Eagle is the name of card;",
        "values_list": [
            "cards.name.cloudchaser eagle"
        ],
        "original_question": "What is the status of card \"Cloudchaser Eagle\"?",
        "question": "What is the status of card \"Sword of Truth & Justice\"?",
        "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
        "changes_information": {
            "original_value": "Sword of Truth and Justice",
            "word_to_symbol_change": "Sword of Truth & Justice"
        }
    },
    {
        "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sword of Truth and Justice'",
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.uuid",
            "cards.name",
            "foreign_data.uuid",
            "cards.type"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Sword of Truth and Justice",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Benalish Knight' is the name of card;",
        "values_list": [
            "cards.name.benalish knight"
        ],
        "original_question": "What is the type of card \"Benalish Knight\"?",
        "question": "What is the type of card \"Sword of Truth & Justice\"?",
        "original_SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
        "changes_information": {
            "original_value": "Sword of Truth and Justice",
            "word_to_symbol_change": "Sword of Truth & Justice"
        }
    },
    {
        "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sword of Truth and Justice'",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "legalities.uuid",
            "cards.uuid",
            "legalities.format",
            "cards.name"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Sword of Truth and Justice",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
        "values_list": [
            "cards.name.benalish knight"
        ],
        "original_question": "What is the rule of playing card \"Benalish Knight\"?",
        "question": "What is the rule of playing card \"Sword of Truth & Justice\"?",
        "original_SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
        "changes_information": {
            "original_value": "Sword of Truth and Justice",
            "word_to_symbol_change": "Sword of Truth & Justice"
        }
    },
    {
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sword of Truth and Justice'",
        "tables": [
            "rulings",
            "cards"
        ],
        "columns": [
            "cards.uuid",
            "cards.name",
            "rulings.text",
            "rulings.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Sword of Truth and Justice",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Beacon of Immortality' is the name of card;",
        "values_list": [
            "cards.name.beacon of immortality"
        ],
        "original_question": "Write down the ruling of Beacon of Immortality.",
        "question": "Write down the ruling of Sword of Truth & Justice.",
        "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality'",
        "changes_information": {
            "original_value": "Sword of Truth and Justice",
            "word_to_symbol_change": "Sword of Truth & Justice"
        }
    },
    {
        "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Sword of Truth and Justice'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.name",
            "cards.subtypes",
            "cards.supertypes"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Sword of Truth and Justice",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "values_list": [
            "cards.name.molimo, maro-sorcerer"
        ],
        "original_question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
        "question": "What's the list of all types for the card \"Sword of Truth & Justice\"?",
        "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
        "changes_information": {
            "original_value": "Sword of Truth and Justice",
            "word_to_symbol_change": "Sword of Truth & Justice"
        }
    },
    {
        "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Sword of Truth and Justice'",
        "tables": [
            "sets",
            "cards"
        ],
        "columns": [
            "sets.mtgocode",
            "cards.name",
            "cards.setcode",
            "sets.code"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Sword of Truth and Justice",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "values_list": [
            "cards.name.angel of mercy"
        ],
        "original_question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
        "question": "Did the set of cards with \"Sword of Truth & Justice\" appear on Magic: The Gathering Online?",
        "original_SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
        "changes_information": {
            "original_value": "Sword of Truth and Justice",
            "word_to_symbol_change": "Sword of Truth & Justice"
        }
    },
    {
        "SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Sword of Truth and Justice'",
        "tables": [
            "rulings",
            "cards"
        ],
        "columns": [
            "cards.uuid",
            "cards.name",
            "rulings.date",
            "rulings.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Sword of Truth and Justice",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Reminisce refers to name = 'Reminisce'; when created is the date",
        "values_list": [
            "cards.name.sword_of_truth_and_justice"
        ],
        "original_question": "When was the ruling for the card 'Reminisce' created?",
        "question": "When was the ruling for the card 'Sword of Truth & Justice' created?",
        "original_SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Reminisce'",
        "changes_information": {
            "original_value": "Sword of Truth and Justice",
            "word_to_symbol_change": "Sword of Truth & Justice"
        }
    },
    {
        "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Sword of Truth and Justice'",
        "tables": [
            "sets",
            "cards"
        ],
        "columns": [
            "cards.name",
            "cards.setcode",
            "sets.code",
            "sets.releasedate"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Sword of Truth and Justice",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "values_list": [
            "cards.name.sword_of_truth_and_justice"
        ],
        "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
        "question": "What was the release date for the set which card \"Sword of Truth & Justice\" in it?",
        "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
        "changes_information": {
            "original_value": "Sword of Truth and Justice",
            "word_to_symbol_change": "Sword of Truth & Justice"
        }
    },
    {
        "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Burn at the Stake'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.name",
            "cards.keywords"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Burn at the Stake",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Angel of Mercy' is the name of card;",
        "values_list": [
            "cards.name.angel of mercy"
        ],
        "original_question": "What is the keyword found on card 'Angel of Mercy'?",
        "question": "What is the keyword found on card 'Burn @ the Stake'?",
        "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
        "changes_information": {
            "original_value": "Burn at the Stake",
            "word_to_symbol_change": "Burn @ the Stake"
        }
    },
    {
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Burn at the Stake'",
        "tables": [
            "rulings",
            "cards"
        ],
        "columns": [
            "cards.uuid",
            "cards.name",
            "rulings.text",
            "rulings.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Burn at the Stake",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
        "values_list": [
            "cards.name.burn_at_the_stake"
        ],
        "original_question": "What is the description about the ruling of card \"Condemn\"?",
        "question": "What is the description about the ruling of card \"Burn @ the Stake\"?",
        "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn'",
        "changes_information": {
            "original_value": "Burn at the Stake",
            "word_to_symbol_change": "Burn @ the Stake"
        }
    },
    {
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Burn at the Stake'",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "legalities.uuid",
            "legalities.status",
            "cards.name",
            "cards.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Burn at the Stake",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Cloudchaser Eagle is the name of card;",
        "values_list": [
            "cards.name.cloudchaser eagle"
        ],
        "original_question": "What is the status of card \"Cloudchaser Eagle\"?",
        "question": "What is the status of card \"Burn @ the Stake\"?",
        "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
        "changes_information": {
            "original_value": "Burn at the Stake",
            "word_to_symbol_change": "Burn @ the Stake"
        }
    },
    {
        "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Burn at the Stake'",
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.uuid",
            "cards.name",
            "foreign_data.uuid",
            "cards.type"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Burn at the Stake",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Benalish Knight' is the name of card;",
        "values_list": [
            "cards.name.benalish knight"
        ],
        "original_question": "What is the type of card \"Benalish Knight\"?",
        "question": "What is the type of card \"Burn @ the Stake\"?",
        "original_SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
        "changes_information": {
            "original_value": "Burn at the Stake",
            "word_to_symbol_change": "Burn @ the Stake"
        }
    },
    {
        "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Burn at the Stake'",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "legalities.uuid",
            "cards.uuid",
            "legalities.format",
            "cards.name"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Burn at the Stake",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
        "values_list": [
            "cards.name.benalish knight"
        ],
        "original_question": "What is the rule of playing card \"Benalish Knight\"?",
        "question": "What is the rule of playing card \"Burn @ the Stake\"?",
        "original_SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
        "changes_information": {
            "original_value": "Burn at the Stake",
            "word_to_symbol_change": "Burn @ the Stake"
        }
    },
    {
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Burn at the Stake'",
        "tables": [
            "rulings",
            "cards"
        ],
        "columns": [
            "cards.uuid",
            "cards.name",
            "rulings.text",
            "rulings.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Burn at the Stake",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Beacon of Immortality' is the name of card;",
        "values_list": [
            "cards.name.beacon of immortality"
        ],
        "original_question": "Write down the ruling of Beacon of Immortality.",
        "question": "Write down the ruling of Burn @ the Stake.",
        "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality'",
        "changes_information": {
            "original_value": "Burn at the Stake",
            "word_to_symbol_change": "Burn @ the Stake"
        }
    },
    {
        "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Burn at the Stake'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.name",
            "cards.subtypes",
            "cards.supertypes"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Burn at the Stake",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "values_list": [
            "cards.name.molimo, maro-sorcerer"
        ],
        "original_question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
        "question": "What's the list of all types for the card \"Burn @ the Stake\"?",
        "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
        "changes_information": {
            "original_value": "Burn at the Stake",
            "word_to_symbol_change": "Burn @ the Stake"
        }
    },
    {
        "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Burn at the Stake'",
        "tables": [
            "sets",
            "cards"
        ],
        "columns": [
            "sets.mtgocode",
            "cards.name",
            "cards.setcode",
            "sets.code"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Burn at the Stake",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "values_list": [
            "cards.name.angel of mercy"
        ],
        "original_question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
        "question": "Did the set of cards with \"Burn @ the Stake\" appear on Magic: The Gathering Online?",
        "original_SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
        "changes_information": {
            "original_value": "Burn at the Stake",
            "word_to_symbol_change": "Burn @ the Stake"
        }
    },
    {
        "SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Burn at the Stake'",
        "tables": [
            "rulings",
            "cards"
        ],
        "columns": [
            "cards.uuid",
            "cards.name",
            "rulings.date",
            "rulings.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Burn at the Stake",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Reminisce refers to name = 'Reminisce'; when created is the date",
        "values_list": [
            "cards.name.burn_at_the_stake"
        ],
        "original_question": "When was the ruling for the card 'Reminisce' created?",
        "question": "When was the ruling for the card 'Burn @ the Stake' created?",
        "original_SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Reminisce'",
        "changes_information": {
            "original_value": "Burn at the Stake",
            "word_to_symbol_change": "Burn @ the Stake"
        }
    },
    {
        "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Burn at the Stake'",
        "tables": [
            "sets",
            "cards"
        ],
        "columns": [
            "cards.name",
            "cards.setcode",
            "sets.code",
            "sets.releasedate"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Burn at the Stake",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "values_list": [
            "cards.name.burn_at_the_stake"
        ],
        "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
        "question": "What was the release date for the set which card \"Burn @ the Stake\" in it?",
        "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
        "changes_information": {
            "original_value": "Burn at the Stake",
            "word_to_symbol_change": "Burn @ the Stake"
        }
    },
    {
        "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Smart Ass'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.name",
            "cards.keywords"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Smart Ass",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Angel of Mercy' is the name of card;",
        "values_list": [
            "cards.name.angel of mercy"
        ],
        "original_question": "What is the keyword found on card 'Angel of Mercy'?",
        "question": "What is the keyword found on card 'Smart @ss'?",
        "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
        "changes_information": {
            "original_value": "Smart Ass",
            "word_to_symbol_change": "Smart @ss"
        }
    },
    {
        "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Smart Ass'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.name",
            "cards.subtypes",
            "cards.supertypes"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Smart Ass",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "values_list": [
            "cards.name.molimo, maro-sorcerer"
        ],
        "original_question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
        "question": "What's the list of all types for the card \"Smart @ss\"?",
        "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
        "changes_information": {
            "original_value": "Smart Ass",
            "word_to_symbol_change": "Smart @ss"
        }
    },
    {
        "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Smart Ass'",
        "tables": [
            "sets",
            "cards"
        ],
        "columns": [
            "sets.mtgocode",
            "cards.name",
            "cards.setcode",
            "sets.code"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Smart Ass",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "values_list": [
            "cards.name.angel of mercy"
        ],
        "original_question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
        "question": "Did the set of cards with \"Smart @ss\" appear on Magic: The Gathering Online?",
        "original_SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
        "changes_information": {
            "original_value": "Smart Ass",
            "word_to_symbol_change": "Smart @ss"
        }
    },
    {
        "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Smart Ass'",
        "tables": [
            "sets",
            "cards"
        ],
        "columns": [
            "cards.name",
            "cards.setcode",
            "sets.code",
            "sets.releasedate"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Smart Ass",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "values_list": [
            "cards.name.smart_ass"
        ],
        "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
        "question": "What was the release date for the set which card \"Smart @ss\" in it?",
        "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
        "changes_information": {
            "original_value": "Smart Ass",
            "word_to_symbol_change": "Smart @ss"
        }
    },
    {
        "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Touch and Go'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.name",
            "cards.keywords"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Touch and Go",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Angel of Mercy' is the name of card;",
        "values_list": [
            "cards.name.angel of mercy"
        ],
        "original_question": "What is the keyword found on card 'Angel of Mercy'?",
        "question": "What is the keyword found on card 'Touch & Go'?",
        "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
        "changes_information": {
            "original_value": "Touch and Go",
            "word_to_symbol_change": "Touch & Go"
        }
    },
    {
        "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Touch and Go'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.name",
            "cards.subtypes",
            "cards.supertypes"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Touch and Go",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "values_list": [
            "cards.name.molimo, maro-sorcerer"
        ],
        "original_question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
        "question": "What's the list of all types for the card \"Touch & Go\"?",
        "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
        "changes_information": {
            "original_value": "Touch and Go",
            "word_to_symbol_change": "Touch & Go"
        }
    },
    {
        "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Touch and Go'",
        "tables": [
            "sets",
            "cards"
        ],
        "columns": [
            "sets.mtgocode",
            "cards.name",
            "cards.setcode",
            "sets.code"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Touch and Go",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "values_list": [
            "cards.name.angel of mercy"
        ],
        "original_question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
        "question": "Did the set of cards with \"Touch & Go\" appear on Magic: The Gathering Online?",
        "original_SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
        "changes_information": {
            "original_value": "Touch and Go",
            "word_to_symbol_change": "Touch & Go"
        }
    },
    {
        "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Touch and Go'",
        "tables": [
            "sets",
            "cards"
        ],
        "columns": [
            "cards.name",
            "cards.setcode",
            "sets.code",
            "sets.releasedate"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Touch and Go",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "values_list": [
            "cards.name.touch_and_go"
        ],
        "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
        "question": "What was the release date for the set which card \"Touch & Go\" in it?",
        "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
        "changes_information": {
            "original_value": "Touch and Go",
            "word_to_symbol_change": "Touch & Go"
        }
    },
    {
        "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Sword of Feast and Famine'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.name",
            "cards.keywords"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Sword of Feast and Famine",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Angel of Mercy' is the name of card;",
        "values_list": [
            "cards.name.angel of mercy"
        ],
        "original_question": "What is the keyword found on card 'Angel of Mercy'?",
        "question": "What is the keyword found on card 'Sword of Feast & Famine'?",
        "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
        "changes_information": {
            "original_value": "Sword of Feast and Famine",
            "word_to_symbol_change": "Sword of Feast & Famine"
        }
    },
    {
        "SQL": "SELECT promoTypes FROM cards WHERE name = 'Sword of Feast and Famine' AND promoTypes IS NOT NULL",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.name",
            "cards.promotypes"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Sword of Feast and Famine",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card Duress refers to name = 'Duress'; type of promotion refers to promoTypes;",
        "values_list": [
            "cards.name.sword_of_feast_and_famine"
        ],
        "original_question": "What type of promotion is of card 'Duress'?",
        "question": "What type of promotion is of card 'Sword of Feast & Famine'?",
        "original_SQL": "SELECT promoTypes FROM cards WHERE name = 'Duress' AND promoTypes IS NOT NULL",
        "changes_information": {
            "original_value": "Sword of Feast and Famine",
            "word_to_symbol_change": "Sword of Feast & Famine"
        }
    },
    {
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sword of Feast and Famine'",
        "tables": [
            "rulings",
            "cards"
        ],
        "columns": [
            "cards.uuid",
            "cards.name",
            "rulings.text",
            "rulings.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Sword of Feast and Famine",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
        "values_list": [
            "cards.name.sword_of_feast_and_famine"
        ],
        "original_question": "What is the description about the ruling of card \"Condemn\"?",
        "question": "What is the description about the ruling of card \"Sword of Feast & Famine\"?",
        "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn'",
        "changes_information": {
            "original_value": "Sword of Feast and Famine",
            "word_to_symbol_change": "Sword of Feast & Famine"
        }
    },
    {
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sword of Feast and Famine'",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "legalities.uuid",
            "legalities.status",
            "cards.name",
            "cards.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Sword of Feast and Famine",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Cloudchaser Eagle is the name of card;",
        "values_list": [
            "cards.name.cloudchaser eagle"
        ],
        "original_question": "What is the status of card \"Cloudchaser Eagle\"?",
        "question": "What is the status of card \"Sword of Feast & Famine\"?",
        "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
        "changes_information": {
            "original_value": "Sword of Feast and Famine",
            "word_to_symbol_change": "Sword of Feast & Famine"
        }
    },
    {
        "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sword of Feast and Famine'",
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.uuid",
            "cards.name",
            "foreign_data.uuid",
            "cards.type"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Sword of Feast and Famine",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Benalish Knight' is the name of card;",
        "values_list": [
            "cards.name.benalish knight"
        ],
        "original_question": "What is the type of card \"Benalish Knight\"?",
        "question": "What is the type of card \"Sword of Feast & Famine\"?",
        "original_SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
        "changes_information": {
            "original_value": "Sword of Feast and Famine",
            "word_to_symbol_change": "Sword of Feast & Famine"
        }
    },
    {
        "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sword of Feast and Famine'",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "legalities.uuid",
            "cards.uuid",
            "legalities.format",
            "cards.name"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Sword of Feast and Famine",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
        "values_list": [
            "cards.name.benalish knight"
        ],
        "original_question": "What is the rule of playing card \"Benalish Knight\"?",
        "question": "What is the rule of playing card \"Sword of Feast & Famine\"?",
        "original_SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
        "changes_information": {
            "original_value": "Sword of Feast and Famine",
            "word_to_symbol_change": "Sword of Feast & Famine"
        }
    },
    {
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sword of Feast and Famine'",
        "tables": [
            "rulings",
            "cards"
        ],
        "columns": [
            "cards.uuid",
            "cards.name",
            "rulings.text",
            "rulings.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Sword of Feast and Famine",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Beacon of Immortality' is the name of card;",
        "values_list": [
            "cards.name.beacon of immortality"
        ],
        "original_question": "Write down the ruling of Beacon of Immortality.",
        "question": "Write down the ruling of Sword of Feast & Famine.",
        "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality'",
        "changes_information": {
            "original_value": "Sword of Feast and Famine",
            "word_to_symbol_change": "Sword of Feast & Famine"
        }
    },
    {
        "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Sword of Feast and Famine'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.name",
            "cards.subtypes",
            "cards.supertypes"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Sword of Feast and Famine",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "values_list": [
            "cards.name.molimo, maro-sorcerer"
        ],
        "original_question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
        "question": "What's the list of all types for the card \"Sword of Feast & Famine\"?",
        "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
        "changes_information": {
            "original_value": "Sword of Feast and Famine",
            "word_to_symbol_change": "Sword of Feast & Famine"
        }
    },
    {
        "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Sword of Feast and Famine'",
        "tables": [
            "sets",
            "cards"
        ],
        "columns": [
            "sets.mtgocode",
            "cards.name",
            "cards.setcode",
            "sets.code"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Sword of Feast and Famine",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "values_list": [
            "cards.name.angel of mercy"
        ],
        "original_question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
        "question": "Did the set of cards with \"Sword of Feast & Famine\" appear on Magic: The Gathering Online?",
        "original_SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
        "changes_information": {
            "original_value": "Sword of Feast and Famine",
            "word_to_symbol_change": "Sword of Feast & Famine"
        }
    },
    {
        "SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Sword of Feast and Famine'",
        "tables": [
            "rulings",
            "cards"
        ],
        "columns": [
            "cards.uuid",
            "cards.name",
            "rulings.date",
            "rulings.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Sword of Feast and Famine",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Reminisce refers to name = 'Reminisce'; when created is the date",
        "values_list": [
            "cards.name.sword_of_feast_and_famine"
        ],
        "original_question": "When was the ruling for the card 'Reminisce' created?",
        "question": "When was the ruling for the card 'Sword of Feast & Famine' created?",
        "original_SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Reminisce'",
        "changes_information": {
            "original_value": "Sword of Feast and Famine",
            "word_to_symbol_change": "Sword of Feast & Famine"
        }
    },
    {
        "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Sword of Feast and Famine'",
        "tables": [
            "sets",
            "cards"
        ],
        "columns": [
            "cards.name",
            "cards.setcode",
            "sets.code",
            "sets.releasedate"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Sword of Feast and Famine",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "values_list": [
            "cards.name.sword_of_feast_and_famine"
        ],
        "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
        "question": "What was the release date for the set which card \"Sword of Feast & Famine\" in it?",
        "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
        "changes_information": {
            "original_value": "Sword of Feast and Famine",
            "word_to_symbol_change": "Sword of Feast & Famine"
        }
    },
    {
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Sword of Feast and Famine' AND T2.language = 'French' AND T2.translation IS NOT NULL",
        "tables": [
            "set_translations",
            "cards"
        ],
        "columns": [
            "set_translations.language",
            "cards.name",
            "set_translations.setcode",
            "cards.setcode",
            "set_translations.translation"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Sword of Feast and Famine",
                "condition": "="
            },
            {
                "table": "set_translations",
                "column": "language",
                "value": "French",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
        "values_list": [
            "cards.name.tendo ice bridge",
            "set_translations.language.french"
        ],
        "original_question": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in?",
        "question": "What's the French name of the set of cards with \"Sword of Feast & Famine\" is in?",
        "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL",
        "changes_information": {
            "original_value": "Sword of Feast and Famine",
            "word_to_symbol_change": "Sword of Feast & Famine"
        }
    },
    {
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Sword of Feast and Famine' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
        "tables": [
            "set_translations",
            "cards"
        ],
        "columns": [
            "set_translations.language",
            "cards.name",
            "set_translations.setcode",
            "cards.setcode",
            "set_translations.translation"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Sword of Feast and Famine",
                "condition": "="
            },
            {
                "table": "set_translations",
                "column": "language",
                "value": "Japanese",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
        "values_list": [
            "cards.name.fellwar stone",
            "set_translations.language.japanese"
        ],
        "original_question": "Tell the Japanese name of the set which card \"Fellwar Stone\" is in it.",
        "question": "Tell the Japanese name of the set which card \"Sword of Feast & Famine\" is in it.",
        "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
        "changes_information": {
            "original_value": "Sword of Feast and Famine",
            "word_to_symbol_change": "Sword of Feast & Famine"
        }
    },
    {
        "SQL": "SELECT department FROM major WHERE college = 'College of Agriculture and Applied Sciences'",
        "tables": [
            "major"
        ],
        "columns": [
            "major.department",
            "major.college"
        ],
        "values": [
            {
                "table": "major",
                "column": "college",
                "value": "College of Agriculture and Applied Sciences",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "major.college.college of humanities and social sciences"
        ],
        "original_question": "List all of the College of Humanities and Social Sciences' departments.",
        "question": "List all of the College of Agriculture & Applied Sciences' departments.",
        "original_SQL": "SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences'",
        "changes_information": {
            "original_value": "College of Agriculture and Applied Sciences",
            "word_to_symbol_change": "College of Agriculture & Applied Sciences"
        }
    },
    {
        "SQL": "SELECT T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Business' AND T2.college = 'College of Agriculture and Applied Sciences'",
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.phone",
            "major.college",
            "member.link_to_major",
            "major.major_id",
            "major.major_name"
        ],
        "values": [
            {
                "table": "major",
                "column": "major_name",
                "value": "Business",
                "condition": "="
            },
            {
                "table": "major",
                "column": "college",
                "value": "College of Agriculture and Applied Sciences",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "'College of Agriculture and Applied Sciences' is the college; majored in business refers to major_name = 'Business'; phone numbers refers to phone",
        "values_list": [
            "major.major_name.business",
            "major.college.college of agriculture and applied sciences"
        ],
        "original_question": "Please list the phone numbers of the members who majored in business at the College of Agriculture and Applied Sciences.",
        "question": "Please list the phone numbers of the members who majored in business at the College of Agriculture & Applied Sciences.",
        "original_SQL": "SELECT T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Business' AND T2.college = 'College of Agriculture and Applied Sciences'",
        "changes_information": {
            "original_value": "College of Agriculture and Applied Sciences",
            "word_to_symbol_change": "College of Agriculture & Applied Sciences"
        }
    },
    {
        "SQL": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'Selecting trustworthy rows based on minima and maxima'",
        "tables": [
            "users",
            "posts",
            "posthistory"
        ],
        "columns": [
            "posts.id",
            "posthistory.text",
            "posthistory.postid",
            "users.id",
            "users.displayname",
            "posts.viewcount",
            "posts.lasteditoruserid"
        ],
        "values": [
            {
                "table": "posthistory",
                "column": "text",
                "value": "Selecting trustworthy rows based on minima and maxima",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "total views refer to ViewCount; Name the user refers to DisplayName; post 'Computer Game Datasets' refers to Text = 'Computer Game Datasets';",
        "values_list": [
            "posthistory.text.computer game datasets"
        ],
        "original_question": "Identify the total views on the post 'Computer Game Datasets'. Name the user who posted it last time.",
        "question": "Identify the total views on the post 'Selecting trustworthy rows based on minima & maxima'. Name the user who posted it last time.",
        "original_SQL": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'Computer Game Datasets'",
        "changes_information": {
            "original_value": "Selecting trustworthy rows based on minima and maxima",
            "word_to_symbol_change": "Selecting trustworthy rows based on minima & maxima"
        }
    },
    {
        "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Predicting with both continuous and categorical features'",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.id",
            "posts.title",
            "users.displayname",
            "posts.owneruserid"
        ],
        "values": [
            {
                "table": "posts",
                "column": "title",
                "value": "Predicting with both continuous and categorical features",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
        "values_list": [
            "posts.title.eliciting priors from experts"
        ],
        "original_question": "Who is the owner of the post \"Eliciting priors from experts\"?",
        "question": "Who is the owner of the post \"Predicting with both continuous & categorical features\"?",
        "original_SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
        "changes_information": {
            "original_value": "Predicting with both continuous and categorical features",
            "word_to_symbol_change": "Predicting with both continuous & categorical features"
        }
    },
    {
        "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Predicting with both continuous and categorical features'",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.id",
            "posts.lasteditoruserid",
            "posts.title",
            "users.displayname"
        ],
        "values": [
            {
                "table": "posts",
                "column": "title",
                "value": "Predicting with both continuous and categorical features",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
        "values_list": [
            "posts.title.examples for teaching: correlation does not mean causation"
        ],
        "original_question": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?",
        "question": "What is the display name of the user who last edited the post \"Predicting with both continuous & categorical features\"?",
        "original_SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'",
        "changes_information": {
            "original_value": "Predicting with both continuous and categorical features",
            "word_to_symbol_change": "Predicting with both continuous & categorical features"
        }
    },
    {
        "SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Predicting with both continuous and categorical features'",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.id",
            "users.location",
            "posts.title",
            "posts.owneruserid"
        ],
        "values": [
            {
                "table": "posts",
                "column": "title",
                "value": "Predicting with both continuous and categorical features",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
        "values_list": [
            "posts.title.eliciting priors from experts"
        ],
        "original_question": "What is the location of the owner of the post \"Eliciting priors from experts\"?",
        "question": "What is the location of the owner of the post \"Predicting with both continuous & categorical features\"?",
        "original_SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
        "changes_information": {
            "original_value": "Predicting with both continuous and categorical features",
            "word_to_symbol_change": "Predicting with both continuous & categorical features"
        }
    },
    {
        "SQL": "SELECT ViewCount FROM posts WHERE Title = 'Predicting with both continuous and categorical features'",
        "tables": [
            "posts"
        ],
        "columns": [
            "posts.title",
            "posts.viewcount"
        ],
        "values": [
            {
                "table": "posts",
                "column": "title",
                "value": "Predicting with both continuous and categorical features",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
        "values_list": [
            "posts.title.integration of weka and/or rapidminer into informatica powercenter/developer"
        ],
        "original_question": "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?",
        "question": "How many views did the post titled 'Predicting with both continuous & categorical features' get?",
        "original_SQL": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
        "changes_information": {
            "original_value": "Predicting with both continuous and categorical features",
            "word_to_symbol_change": "Predicting with both continuous & categorical features"
        }
    },
    {
        "SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Predicting with both continuous and categorical features'",
        "tables": [
            "posts"
        ],
        "columns": [
            "posts.lasteditoruserid",
            "posts.title",
            "posts.lasteditdate"
        ],
        "values": [
            {
                "table": "posts",
                "column": "title",
                "value": "Predicting with both continuous and categorical features",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "Title = 'Detecting a given face in a database of facial images';",
        "values_list": [
            "posts.title.detecting a given face in a database of facial images"
        ],
        "original_question": "Provide the last edit date and last edit user ID for the post \"Detecting a given face in a database of facial images\".",
        "question": "Provide the last edit date and last edit user ID for the post \"Predicting with both continuous & categorical features\".",
        "original_SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'",
        "changes_information": {
            "original_value": "Predicting with both continuous and categorical features",
            "word_to_symbol_change": "Predicting with both continuous & categorical features"
        }
    },
    {
        "SQL": "SELECT T3.Title FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN posts AS T3 ON T1.RelatedPostId = T3.Id WHERE T2.Title = 'Predicting with both continuous and categorical features'",
        "tables": [
            "posts",
            "postlinks"
        ],
        "columns": [
            "posts.id",
            "postlinks.relatedpostid",
            "posts.title",
            "postlinks.postid"
        ],
        "values": [
            {
                "table": "posts",
                "column": "title",
                "value": "Predicting with both continuous and categorical features",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "posts.title.how to tell if something happened in a data set which monitors a value over time"
        ],
        "original_question": "Provide the related post title of \"How to tell if something happened in a data set which monitors a value over time\".",
        "question": "Provide the related post title of \"Predicting with both continuous & categorical features\".",
        "original_SQL": "SELECT T3.Title FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN posts AS T3 ON T1.RelatedPostId = T3.Id WHERE T2.Title = 'How to tell if something happened in a data set which monitors a value over time'",
        "changes_information": {
            "original_value": "Predicting with both continuous and categorical features",
            "word_to_symbol_change": "Predicting with both continuous & categorical features"
        }
    },
    {
        "SQL": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Predicting with both continuous and categorical features' ORDER BY T1.CreationDate DESC LIMIT 10",
        "tables": [
            "users",
            "posts",
            "comments"
        ],
        "columns": [
            "posts.id",
            "posts.title",
            "posts.owneruserid",
            "comments.text",
            "users.id",
            "users.displayname",
            "users.creationdate",
            "comments.postid"
        ],
        "values": [
            {
                "table": "posts",
                "column": "title",
                "value": "Predicting with both continuous and categorical features",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "the latest comment refers to MAX(CreationDate);",
        "values_list": [
            "posts.title.analysing wind data with r"
        ],
        "original_question": "Provide the text of the latest 10 comments to the post with the title 'Analysing wind data with R' and the display name of the user who left it.",
        "question": "Provide the text of the latest 10 comments to the post with the title 'Predicting with both continuous & categorical features' and the display name of the user who left it.",
        "original_SQL": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Analysing wind data with R' ORDER BY T1.CreationDate DESC LIMIT 10",
        "changes_information": {
            "original_value": "Predicting with both continuous and categorical features",
            "word_to_symbol_change": "Predicting with both continuous & categorical features"
        }
    },
    {
        "SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Predicting with both continuous and categorical features'",
        "tables": [
            "posts"
        ],
        "columns": [
            "posts.title",
            "posts.commentcount",
            "posts.answercount"
        ],
        "values": [
            {
                "table": "posts",
                "column": "title",
                "value": "Predicting with both continuous and categorical features",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "posts.title.clustering 1d data"
        ],
        "original_question": "How many comments and answers were left by the users on the post with the title 'Clustering 1D data'?",
        "question": "How many comments and answers were left by the users on the post with the title 'Predicting with both continuous & categorical features'?",
        "original_SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Clustering 1D data'",
        "changes_information": {
            "original_value": "Predicting with both continuous and categorical features",
            "word_to_symbol_change": "Predicting with both continuous & categorical features"
        }
    },
    {
        "SQL": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Predicting with both continuous and categorical features'",
        "tables": [
            "posts",
            "comments"
        ],
        "columns": [
            "posts.id",
            "posts.title",
            "comments.postid",
            "comments.text"
        ],
        "values": [
            {
                "table": "posts",
                "column": "title",
                "value": "Predicting with both continuous and categorical features",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "Title = 'Group differences on a five point Likert item';",
        "values_list": [
            "posts.title.group differences on a five point likert item"
        ],
        "original_question": "What is the post ID and the comments commented in the post titled by \"Group differences on a five point Likert item\"?",
        "question": "What is the post ID and the comments commented in the post titled by \"Predicting with both continuous & categorical features\"?",
        "original_SQL": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Group differences on a five point Likert item'",
        "changes_information": {
            "original_value": "Predicting with both continuous and categorical features",
            "word_to_symbol_change": "Predicting with both continuous & categorical features"
        }
    },
    {
        "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Probability of at least one unique outcome'",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.id",
            "posts.title",
            "users.displayname",
            "posts.owneruserid"
        ],
        "values": [
            {
                "table": "posts",
                "column": "title",
                "value": "Probability of at least one unique outcome",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
        "values_list": [
            "posts.title.eliciting priors from experts"
        ],
        "original_question": "Who is the owner of the post \"Eliciting priors from experts\"?",
        "question": "Who is the owner of the post \"Probability of @ least one unique outcome\"?",
        "original_SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
        "changes_information": {
            "original_value": "Probability of at least one unique outcome",
            "word_to_symbol_change": "Probability of @ least one unique outcome"
        }
    },
    {
        "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Probability of at least one unique outcome'",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.id",
            "posts.lasteditoruserid",
            "posts.title",
            "users.displayname"
        ],
        "values": [
            {
                "table": "posts",
                "column": "title",
                "value": "Probability of at least one unique outcome",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
        "values_list": [
            "posts.title.examples for teaching: correlation does not mean causation"
        ],
        "original_question": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?",
        "question": "What is the display name of the user who last edited the post \"Probability of @ least one unique outcome\"?",
        "original_SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'",
        "changes_information": {
            "original_value": "Probability of at least one unique outcome",
            "word_to_symbol_change": "Probability of @ least one unique outcome"
        }
    },
    {
        "SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Probability of at least one unique outcome'",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.id",
            "users.location",
            "posts.title",
            "posts.owneruserid"
        ],
        "values": [
            {
                "table": "posts",
                "column": "title",
                "value": "Probability of at least one unique outcome",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
        "values_list": [
            "posts.title.eliciting priors from experts"
        ],
        "original_question": "What is the location of the owner of the post \"Eliciting priors from experts\"?",
        "question": "What is the location of the owner of the post \"Probability of @ least one unique outcome\"?",
        "original_SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
        "changes_information": {
            "original_value": "Probability of at least one unique outcome",
            "word_to_symbol_change": "Probability of @ least one unique outcome"
        }
    },
    {
        "SQL": "SELECT ViewCount FROM posts WHERE Title = 'Probability of at least one unique outcome'",
        "tables": [
            "posts"
        ],
        "columns": [
            "posts.title",
            "posts.viewcount"
        ],
        "values": [
            {
                "table": "posts",
                "column": "title",
                "value": "Probability of at least one unique outcome",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
        "values_list": [
            "posts.title.integration of weka and/or rapidminer into informatica powercenter/developer"
        ],
        "original_question": "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?",
        "question": "How many views did the post titled 'Probability of @ least one unique outcome' get?",
        "original_SQL": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
        "changes_information": {
            "original_value": "Probability of at least one unique outcome",
            "word_to_symbol_change": "Probability of @ least one unique outcome"
        }
    },
    {
        "SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Probability of at least one unique outcome'",
        "tables": [
            "posts"
        ],
        "columns": [
            "posts.lasteditoruserid",
            "posts.title",
            "posts.lasteditdate"
        ],
        "values": [
            {
                "table": "posts",
                "column": "title",
                "value": "Probability of at least one unique outcome",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "Title = 'Detecting a given face in a database of facial images';",
        "values_list": [
            "posts.title.detecting a given face in a database of facial images"
        ],
        "original_question": "Provide the last edit date and last edit user ID for the post \"Detecting a given face in a database of facial images\".",
        "question": "Provide the last edit date and last edit user ID for the post \"Probability of @ least one unique outcome\".",
        "original_SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'",
        "changes_information": {
            "original_value": "Probability of at least one unique outcome",
            "word_to_symbol_change": "Probability of @ least one unique outcome"
        }
    },
    {
        "SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Probability of at least one unique outcome'",
        "tables": [
            "posts"
        ],
        "columns": [
            "posts.title",
            "posts.commentcount",
            "posts.answercount"
        ],
        "values": [
            {
                "table": "posts",
                "column": "title",
                "value": "Probability of at least one unique outcome",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "posts.title.clustering 1d data"
        ],
        "original_question": "How many comments and answers were left by the users on the post with the title 'Clustering 1D data'?",
        "question": "How many comments and answers were left by the users on the post with the title 'Probability of @ least one unique outcome'?",
        "original_SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Clustering 1D data'",
        "changes_information": {
            "original_value": "Probability of at least one unique outcome",
            "word_to_symbol_change": "Probability of @ least one unique outcome"
        }
    },
    {
        "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Champs and States' ORDER BY T1.convertedManaCost DESC LIMIT 1",
        "tables": [
            "sets",
            "cards"
        ],
        "columns": [
            "sets.code",
            "cards.convertedmanacost",
            "cards.name",
            "cards.setcode",
            "sets.name"
        ],
        "values": [
            {
                "table": "sets",
                "column": "name",
                "value": "Champs and States",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card set Coldsnap refers to name = 'Coldsnap'",
        "values_list": [
            "sets.name.champs_and_states"
        ],
        "original_question": "Please list the name of the cards in the set Coldsnap with the highest converted mana cost.",
        "question": "Please list the name of the cards in the set Champs & States with the highest converted mana cost.",
        "original_SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' ORDER BY T1.convertedManaCost DESC LIMIT 1",
        "changes_information": {
            "original_value": "Champs and States",
            "word_to_symbol_change": "Champs & States"
        }
    },
    {
        "SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE (T2.name = 'Champs and States' AND T1.artist = 'Chippy') OR (T2.name = 'Champs and States' AND T1.artist = 'Aaron Miller') OR (T2.name = 'Champs and States' AND T1.artist = 'Jeremy Jarvis') GROUP BY T1.artist",
        "tables": [
            "sets",
            "cards"
        ],
        "columns": [
            "cards.artist",
            "sets.name",
            "cards.setcode",
            "sets.code"
        ],
        "values": [
            {
                "table": "sets",
                "column": "name",
                "value": "Champs and States",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "artist",
                "value": "Jeremy Jarvis",
                "condition": "="
            },
            {
                "table": "sets",
                "column": "name",
                "value": "Coldsnap",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "artist",
                "value": "Chippy",
                "condition": "="
            },
            {
                "table": "sets",
                "column": "name",
                "value": "Coldsnap",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "artist",
                "value": "Aaron Miller",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Jeremy Jarvis, Aaron Miller or Chippy are the name of artists which refers to artist IN ('Jeremy Jarvis', 'Aaron Miller','Chippy');",
        "values_list": [
            "sets.name.champs_and_states",
            "cards.artist.jeremy jarvis",
            "sets.name.coldsnap",
            "cards.artist.chippy",
            "sets.name.coldsnap",
            "cards.artist.aaron miller"
        ],
        "original_question": "Which of these artists have designed a card in the set Coldsnap, Jeremy Jarvis, Aaron Miller or Chippy?",
        "question": "Which of these artists have designed a card in the set Champs & States, Jeremy Jarvis, Aaron Miller or Chippy?",
        "original_SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE (T2.name = 'Coldsnap' AND T1.artist = 'Chippy') OR (T2.name = 'Coldsnap' AND T1.artist = 'Aaron Miller') OR (T2.name = 'Coldsnap' AND T1.artist = 'Jeremy Jarvis') GROUP BY T1.artist",
        "changes_information": {
            "original_value": "Champs and States",
            "word_to_symbol_change": "Champs & States"
        }
    },
    {
        "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Champs and States' AND T1.number = 4",
        "tables": [
            "sets",
            "cards"
        ],
        "columns": [
            "sets.code",
            "cards.name",
            "cards.number",
            "cards.setcode",
            "sets.name"
        ],
        "values": [
            {
                "table": "sets",
                "column": "name",
                "value": "Champs and States",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "number",
                "value": "4",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card set Coldsnap refers to name = 'Coldsnap'; card number 4 refers to number = 4",
        "values_list": [
            "sets.name.champs_and_states",
            "cards.number.4"
        ],
        "original_question": "What is card number 4 in the set Coldsnap?",
        "question": "What is card number 4 in the set Champs & States?",
        "original_SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.number = 4",
        "changes_information": {
            "original_value": "Champs and States",
            "word_to_symbol_change": "Champs & States"
        }
    },
    {
        "SQL": "SELECT parentCode FROM sets WHERE name = 'Champs and States'",
        "tables": [
            "sets"
        ],
        "columns": [
            "sets.name",
            "sets.parentcode"
        ],
        "values": [
            {
                "table": "sets",
                "column": "name",
                "value": "Champs and States",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "the set \"Commander 2014 Oversized\" refers to name = 'Commander 2014 Oversized';",
        "values_list": [
            "sets.name.commander 2014 oversized"
        ],
        "original_question": "For the set \"Commander 2014 Oversized\" , give its parent code.",
        "question": "For the set \"Champs & States\" , give its parent code.",
        "original_SQL": "SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized'",
        "changes_information": {
            "original_value": "Champs and States",
            "word_to_symbol_change": "Champs & States"
        }
    },
    {
        "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Toxin and Disease Control' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
        "tables": [
            "publisher",
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "superhero.id",
            "hero_power.power_id",
            "superpower.id",
            "publisher.publisher_name",
            "publisher.id",
            "hero_power.hero_id",
            "superpower.power_name",
            "superhero.publisher_id"
        ],
        "values": [
            {
                "table": "superpower",
                "column": "power_name",
                "value": "Toxin and Disease Control",
                "condition": "="
            },
            {
                "table": "publisher",
                "column": "publisher_name",
                "value": "Marvel Comics",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
        "values_list": [
            "superpower.power_name.super strength",
            "publisher.publisher_name.marvel comics"
        ],
        "original_question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
        "question": "List the superheroes from Marvel Comics who have the super power of 'Toxin & Disease Control'.",
        "original_SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
        "changes_information": {
            "original_value": "Toxin and Disease Control",
            "word_to_symbol_change": "Toxin & Disease Control"
        }
    },
    {
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Toxin and Disease Control'",
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "hero_power.power_id",
            "superhero.id",
            "superpower.id",
            "superhero.superhero_name",
            "hero_power.hero_id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "superpower",
                "column": "power_name",
                "value": "Toxin and Disease Control",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
        "values_list": [
            "superpower.power_name.death touch"
        ],
        "original_question": "What are the names of the superheroes with the power of death touch?",
        "question": "What are the names of the superheroes with the power of Toxin & Disease Control?",
        "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
        "changes_information": {
            "original_value": "Toxin and Disease Control",
            "word_to_symbol_change": "Toxin & Disease Control"
        }
    },
    {
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Toxin and Disease Control'",
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "hero_power.power_id",
            "superhero.id",
            "superpower.id",
            "superhero.superhero_name",
            "hero_power.hero_id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "superpower",
                "column": "power_name",
                "value": "Toxin and Disease Control",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
        "values_list": [
            "superpower.power_name.toxin_and_disease_control"
        ],
        "original_question": "List the name of superheroes with flight power.",
        "question": "List the name of superheroes with Toxin & Disease Control power.",
        "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'",
        "changes_information": {
            "original_value": "Toxin and Disease Control",
            "word_to_symbol_change": "Toxin & Disease Control"
        }
    },
    {
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Toxin and Disease Control'",
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "hero_power.power_id",
            "superhero.id",
            "superpower.id",
            "superhero.superhero_name",
            "hero_power.hero_id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "superpower",
                "column": "power_name",
                "value": "Toxin and Disease Control",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "adaptation power refers to power_name = 'Adaptation';",
        "values_list": [
            "superpower.power_name.toxin_and_disease_control"
        ],
        "original_question": "Provide superheroes' names who have the adaptation power.",
        "question": "Provide superheroes' names who have the Toxin & Disease Control power.",
        "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'",
        "changes_information": {
            "original_value": "Toxin and Disease Control",
            "word_to_symbol_change": "Toxin & Disease Control"
        }
    },
    {
        "SQL": "SELECT id FROM superpower WHERE power_name = 'Toxin and Disease Control'",
        "tables": [
            "superpower"
        ],
        "columns": [
            "superpower.power_name",
            "superpower.id"
        ],
        "values": [
            {
                "table": "superpower",
                "column": "power_name",
                "value": "Toxin and Disease Control",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
        "values_list": [
            "superpower.power_name.toxin_and_disease_control"
        ],
        "original_question": "What is the power ID of cryokinesis?",
        "question": "What is the power ID of Toxin & Disease Control?",
        "original_SQL": "SELECT id FROM superpower WHERE power_name = 'Cryokinesis'",
        "changes_information": {
            "original_value": "Toxin and Disease Control",
            "word_to_symbol_change": "Toxin & Disease Control"
        }
    },
    {
        "SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Toxin and Disease Control'",
        "tables": [
            "superhero",
            "gender",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "gender.gender",
            "hero_power.power_id",
            "superhero.id",
            "superpower.id",
            "gender.id",
            "superhero.gender_id",
            "hero_power.hero_id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "superpower",
                "column": "power_name",
                "value": "Toxin and Disease Control",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "ability of Phoenix Force refers to power_name = 'Phoenix Force';",
        "values_list": [
            "superpower.power_name.phoenix force"
        ],
        "original_question": "Identify the gender of the superhero who has the ability of Phoenix Force.",
        "question": "Identify the gender of the superhero who has the ability of Toxin & Disease Control.",
        "original_SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force'",
        "changes_information": {
            "original_value": "Toxin and Disease Control",
            "word_to_symbol_change": "Toxin & Disease Control"
        }
    },
    {
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'blue and grey'",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.id",
            "posts.title",
            "users.displayname",
            "posts.owneruserid"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "blue and grey",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"csgillespie\" is the DisplayName of user",
        "values_list": [
            "users.displayname.blue_and_grey"
        ],
        "original_question": "Please list the titles of the posts owned by the user csgillespie?",
        "question": "Please list the titles of the posts owned by the user blue & grey?",
        "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
        "changes_information": {
            "original_value": "blue and grey",
            "word_to_symbol_change": "blue & grey"
        }
    },
    {
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'blue and grey' ORDER BY T1.ViewCount DESC LIMIT 1",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "posts.title",
            "posts.owneruserid",
            "users.id",
            "users.displayname",
            "posts.viewcount"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "blue and grey",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"csgillespie\" is the DisplayName of user; highest popularity refers to Max(ViewCount)",
        "values_list": [
            "users.displayname.blue_and_grey"
        ],
        "original_question": "What is the title of the post that is owned by csgillespie and has the highest popularity?",
        "question": "What is the title of the post that is owned by blue & grey and has the highest popularity?",
        "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.ViewCount DESC LIMIT 1",
        "changes_information": {
            "original_value": "blue and grey",
            "word_to_symbol_change": "blue & grey"
        }
    },
    {
        "SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'blue and grey'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "badges.userid",
            "users.displayname",
            "badges.name"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "blue and grey",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"csgillespie\" is the DisplayName of user",
        "values_list": [
            "users.displayname.blue_and_grey"
        ],
        "original_question": "Please list the names of the badges obtained by csgillespie.",
        "question": "Please list the names of the badges obtained by blue & grey.",
        "original_SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
        "changes_information": {
            "original_value": "blue and grey",
            "word_to_symbol_change": "blue & grey"
        }
    },
    {
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'blue and grey'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "badges.userid",
            "users.displayname",
            "badges.name"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "blue and grey",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"DatEpicCoderGuyWhoPrograms\" is the DisplayName;",
        "values_list": [
            "users.displayname.blue_and_grey"
        ],
        "original_question": "For the user whose display name is \"DatEpicCoderGuyWhoPrograms\", what is his/her badge's name?",
        "question": "For the user whose display name is \"blue & grey\", what is his/her badge's name?",
        "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms'",
        "changes_information": {
            "original_value": "blue and grey",
            "word_to_symbol_change": "blue & grey"
        }
    },
    {
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'blue and grey'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "badges.userid",
            "users.displayname",
            "badges.name"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "blue and grey",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"SilentGhost\" is the DisplayName of user;",
        "values_list": [
            "users.displayname.blue_and_grey"
        ],
        "original_question": "What is the badge name that user 'SilentGhost' obtained?",
        "question": "What is the badge name that user 'blue & grey' obtained?",
        "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'SilentGhost'",
        "changes_information": {
            "original_value": "blue and grey",
            "word_to_symbol_change": "blue & grey"
        }
    },
    {
        "SQL": "SELECT T2.Text FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'blue and grey'",
        "tables": [
            "users",
            "comments"
        ],
        "columns": [
            "comments.text",
            "users.id",
            "comments.userid",
            "users.displayname"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "blue and grey",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"A Lion\" is the DisplayName of user; comment refers to Text",
        "values_list": [
            "users.displayname.a lion"
        ],
        "original_question": "Write all comments made by user 'A Lion.'",
        "question": "Write all comments made by user 'blue & grey.'",
        "original_SQL": "SELECT T2.Text FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'A Lion'",
        "changes_information": {
            "original_value": "blue and grey",
            "word_to_symbol_change": "blue & grey"
        }
    },
    {
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'blue and grey'",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.id",
            "posts.title",
            "users.displayname",
            "posts.owneruserid"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "blue and grey",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Vebjorn Ljosa\" is the DisplayName; last edited refers to LastEditorUserId",
        "values_list": [
            "users.displayname.vebjorn ljosa"
        ],
        "original_question": "List the title of posts which were edited by Vebjorn Ljosa.",
        "question": "List the title of posts which were edited by blue & grey.",
        "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Vebjorn Ljosa'",
        "changes_information": {
            "original_value": "blue and grey",
            "word_to_symbol_change": "blue & grey"
        }
    },
    {
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'blue and grey'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "badges.userid",
            "users.displayname",
            "badges.name"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "blue and grey",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "users.displayname.blue_and_grey"
        ],
        "original_question": "What is the name of badge that the user whose display name is \"Pierre\" obtained?",
        "question": "What is the name of badge that the user whose display name is \"blue & grey\" obtained?",
        "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Pierre'",
        "changes_information": {
            "original_value": "blue and grey",
            "word_to_symbol_change": "blue & grey"
        }
    },
    {
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'blue and grey'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "badges.userid",
            "users.displayname",
            "badges.name"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "blue and grey",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Sharpie\" is the DisplayName of user; user refers to UserId",
        "values_list": [
            "users.displayname.blue_and_grey"
        ],
        "original_question": "State the name of badge that the user whose display name is \"Sharpie\" obtained.",
        "question": "State the name of badge that the user whose display name is \"blue & grey\" obtained.",
        "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sharpie'",
        "changes_information": {
            "original_value": "blue and grey",
            "word_to_symbol_change": "blue & grey"
        }
    },
    {
        "SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'blue and grey'",
        "tables": [
            "users",
            "posts",
            "posthistory"
        ],
        "columns": [
            "posts.tags",
            "posts.id",
            "users.id",
            "posthistory.postid",
            "users.displayname",
            "posthistory.userid"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "blue and grey",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "DisplayName = 'John Salvatier';",
        "values_list": [
            "users.displayname.john salvatier"
        ],
        "original_question": "What is the name of tags used by John Salvatier's?",
        "question": "What is the name of tags used by blue & grey's?",
        "original_SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'John Salvatier'",
        "changes_information": {
            "original_value": "blue and grey",
            "word_to_symbol_change": "blue & grey"
        }
    },
    {
        "SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'blue and grey' ORDER BY T3.AnswerCount DESC LIMIT 1",
        "tables": [
            "users",
            "posts",
            "posthistory"
        ],
        "columns": [
            "posts.id",
            "posts.answercount",
            "posthistory.postid",
            "users.id",
            "users.displayname",
            "posthistory.userid"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "blue and grey",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "most answers count refers to MAX(AnswerCount); post by slashnick refers to DisplayName = 'slashnick';",
        "values_list": [
            "users.displayname.blue_and_grey"
        ],
        "original_question": "Which post by slashnick has the most answers count? State the post ID.",
        "question": "Which post by blue & grey has the most answers count? State the post ID.",
        "original_SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'slashnick' ORDER BY T3.AnswerCount DESC LIMIT 1",
        "changes_information": {
            "original_value": "blue and grey",
            "word_to_symbol_change": "blue & grey"
        }
    },
    {
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'blue and grey' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
        "tables": [
            "users",
            "posts",
            "posthistory"
        ],
        "columns": [
            "posts.id",
            "posts.viewcount",
            "users.id",
            "posthistory.postid",
            "users.displayname",
            "posthistory.userid"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "blue and grey",
                "condition": "="
            },
            {
                "table": "users",
                "column": "displayname",
                "value": "Noah Snyder",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "Has higher popularity means the post has higher view count ; calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';",
        "values_list": [
            "users.displayname.harvey motulsky",
            "users.displayname.noah snyder"
        ],
        "original_question": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?",
        "question": "Among posts by blue & grey and Noah Snyder, which one has higher popularity?",
        "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Harvey Motulsky' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
        "changes_information": {
            "original_value": "blue and grey",
            "word_to_symbol_change": "blue & grey"
        }
    },
    {
        "SQL": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'blue and grey' ORDER BY T2.ViewCount DESC LIMIT 1",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "posts.id",
            "posts.title",
            "posts.owneruserid",
            "users.id",
            "users.displayname",
            "posts.viewcount"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "blue and grey",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "DisplayName = 'Harvey Motulsky'; the most views refer to MAX(ViewCount);",
        "values_list": [
            "users.displayname.harvey motulsky"
        ],
        "original_question": "Which post by Harvey Motulsky has the most views? Please give the id and title of this post.",
        "question": "Which post by blue & grey has the most views? Please give the id and title of this post.",
        "original_SQL": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Harvey Motulsky' ORDER BY T2.ViewCount DESC LIMIT 1",
        "changes_information": {
            "original_value": "blue and grey",
            "word_to_symbol_change": "blue & grey"
        }
    },
    {
        "SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'blue and grey' ORDER BY T1.Date DESC LIMIT 1",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "badges.userid",
            "badges.name",
            "users.id",
            "users.displayname",
            "badges.date"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "blue and grey",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "the latest badge refers to Name FROM badges where MAX(Date);",
        "values_list": [
            "users.displayname.blue_and_grey"
        ],
        "original_question": "Identify the latest badge awarded to the user with the display name Emmett.",
        "question": "Identify the latest badge awarded to the user with the display name blue & grey.",
        "original_SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ORDER BY T1.Date DESC LIMIT 1",
        "changes_information": {
            "original_value": "blue and grey",
            "word_to_symbol_change": "blue & grey"
        }
    },
    {
        "SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'blue and grey'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "badges.userid",
            "users.id",
            "users.displayname",
            "users.creationdate",
            "badges.date"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "blue and grey",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';",
        "values_list": [
            "users.displayname.blue_and_grey"
        ],
        "original_question": "How long did it take the user, known by his or her display name 'Zolomon' to get the badge? Count from the date the user's account was created.",
        "question": "How long did it take the user, known by his or her display name 'blue & grey' to get the badge? Count from the date the user's account was created.",
        "original_SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon'",
        "changes_information": {
            "original_value": "blue and grey",
            "word_to_symbol_change": "blue & grey"
        }
    },
    {
        "SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'blue and grey'",
        "tables": [
            "users"
        ],
        "columns": [
            "users.reputation",
            "users.views",
            "users.displayname"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "blue and grey",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "users.displayname.jarrod dixon"
        ],
        "original_question": "What is the reputation and view count of the user, who is known by his or her display name 'Jarrod Dixon'?",
        "question": "What is the reputation and view count of the user, who is known by his or her display name 'blue & grey'?",
        "original_SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'",
        "changes_information": {
            "original_value": "blue and grey",
            "word_to_symbol_change": "blue & grey"
        }
    },
    {
        "SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'blue and grey'",
        "tables": [
            "users"
        ],
        "columns": [
            "users.creationdate",
            "users.displayname"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "blue and grey",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
        "values_list": [
            "users.displayname.blue_and_grey"
        ],
        "original_question": "When did the user known as 'IrishStat' create his or her account?",
        "question": "When did the user known as 'blue & grey' create his or her account?",
        "original_SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'",
        "changes_information": {
            "original_value": "blue and grey",
            "word_to_symbol_change": "blue & grey"
        }
    },
    {
        "SQL": "SELECT T1.Text FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'blue and grey'",
        "tables": [
            "users",
            "comments"
        ],
        "columns": [
            "comments.text",
            "users.id",
            "comments.userid",
            "users.displayname"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "blue and grey",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "comments refer to Text; username of Harvey Motulsky refers to DisplayName = 'Harvey Motulsky';",
        "values_list": [
            "users.displayname.harvey motulsky"
        ],
        "original_question": "List the comments commented by the user with a username of Harvey Motulsky.",
        "question": "List the comments commented by the user with a username of blue & grey.",
        "original_SQL": "SELECT T1.Text FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Harvey Motulsky'",
        "changes_information": {
            "original_value": "blue and grey",
            "word_to_symbol_change": "blue & grey"
        }
    },
    {
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Dazed and Confused'",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.id",
            "posts.title",
            "users.displayname",
            "posts.owneruserid"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Dazed and Confused",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"csgillespie\" is the DisplayName of user",
        "values_list": [
            "users.displayname.dazed_and_confused"
        ],
        "original_question": "Please list the titles of the posts owned by the user csgillespie?",
        "question": "Please list the titles of the posts owned by the user Dazed & Confused?",
        "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
        "changes_information": {
            "original_value": "Dazed and Confused",
            "word_to_symbol_change": "Dazed & Confused"
        }
    },
    {
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Dazed and Confused' ORDER BY T1.ViewCount DESC LIMIT 1",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "posts.title",
            "posts.owneruserid",
            "users.id",
            "users.displayname",
            "posts.viewcount"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Dazed and Confused",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"csgillespie\" is the DisplayName of user; highest popularity refers to Max(ViewCount)",
        "values_list": [
            "users.displayname.dazed_and_confused"
        ],
        "original_question": "What is the title of the post that is owned by csgillespie and has the highest popularity?",
        "question": "What is the title of the post that is owned by Dazed & Confused and has the highest popularity?",
        "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.ViewCount DESC LIMIT 1",
        "changes_information": {
            "original_value": "Dazed and Confused",
            "word_to_symbol_change": "Dazed & Confused"
        }
    },
    {
        "SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Dazed and Confused'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "badges.userid",
            "users.displayname",
            "badges.name"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Dazed and Confused",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"csgillespie\" is the DisplayName of user",
        "values_list": [
            "users.displayname.dazed_and_confused"
        ],
        "original_question": "Please list the names of the badges obtained by csgillespie.",
        "question": "Please list the names of the badges obtained by Dazed & Confused.",
        "original_SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
        "changes_information": {
            "original_value": "Dazed and Confused",
            "word_to_symbol_change": "Dazed & Confused"
        }
    },
    {
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Dazed and Confused'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "badges.userid",
            "users.displayname",
            "badges.name"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Dazed and Confused",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"DatEpicCoderGuyWhoPrograms\" is the DisplayName;",
        "values_list": [
            "users.displayname.dazed_and_confused"
        ],
        "original_question": "For the user whose display name is \"DatEpicCoderGuyWhoPrograms\", what is his/her badge's name?",
        "question": "For the user whose display name is \"Dazed & Confused\", what is his/her badge's name?",
        "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms'",
        "changes_information": {
            "original_value": "Dazed and Confused",
            "word_to_symbol_change": "Dazed & Confused"
        }
    },
    {
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Dazed and Confused'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "badges.userid",
            "users.displayname",
            "badges.name"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Dazed and Confused",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"SilentGhost\" is the DisplayName of user;",
        "values_list": [
            "users.displayname.dazed_and_confused"
        ],
        "original_question": "What is the badge name that user 'SilentGhost' obtained?",
        "question": "What is the badge name that user 'Dazed & Confused' obtained?",
        "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'SilentGhost'",
        "changes_information": {
            "original_value": "Dazed and Confused",
            "word_to_symbol_change": "Dazed & Confused"
        }
    },
    {
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Dazed and Confused'",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.id",
            "posts.title",
            "users.displayname",
            "posts.owneruserid"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Dazed and Confused",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Vebjorn Ljosa\" is the DisplayName; last edited refers to LastEditorUserId",
        "values_list": [
            "users.displayname.vebjorn ljosa"
        ],
        "original_question": "List the title of posts which were edited by Vebjorn Ljosa.",
        "question": "List the title of posts which were edited by Dazed & Confused.",
        "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Vebjorn Ljosa'",
        "changes_information": {
            "original_value": "Dazed and Confused",
            "word_to_symbol_change": "Dazed & Confused"
        }
    },
    {
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Dazed and Confused'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "badges.userid",
            "users.displayname",
            "badges.name"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Dazed and Confused",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "users.displayname.dazed_and_confused"
        ],
        "original_question": "What is the name of badge that the user whose display name is \"Pierre\" obtained?",
        "question": "What is the name of badge that the user whose display name is \"Dazed & Confused\" obtained?",
        "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Pierre'",
        "changes_information": {
            "original_value": "Dazed and Confused",
            "word_to_symbol_change": "Dazed & Confused"
        }
    },
    {
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Dazed and Confused'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "badges.userid",
            "users.displayname",
            "badges.name"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Dazed and Confused",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Sharpie\" is the DisplayName of user; user refers to UserId",
        "values_list": [
            "users.displayname.dazed_and_confused"
        ],
        "original_question": "State the name of badge that the user whose display name is \"Sharpie\" obtained.",
        "question": "State the name of badge that the user whose display name is \"Dazed & Confused\" obtained.",
        "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sharpie'",
        "changes_information": {
            "original_value": "Dazed and Confused",
            "word_to_symbol_change": "Dazed & Confused"
        }
    },
    {
        "SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Dazed and Confused'",
        "tables": [
            "users",
            "posts",
            "posthistory"
        ],
        "columns": [
            "posts.tags",
            "posts.id",
            "users.id",
            "posthistory.postid",
            "users.displayname",
            "posthistory.userid"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Dazed and Confused",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "DisplayName = 'John Salvatier';",
        "values_list": [
            "users.displayname.john salvatier"
        ],
        "original_question": "What is the name of tags used by John Salvatier's?",
        "question": "What is the name of tags used by Dazed & Confused's?",
        "original_SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'John Salvatier'",
        "changes_information": {
            "original_value": "Dazed and Confused",
            "word_to_symbol_change": "Dazed & Confused"
        }
    },
    {
        "SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Dazed and Confused' ORDER BY T3.AnswerCount DESC LIMIT 1",
        "tables": [
            "users",
            "posts",
            "posthistory"
        ],
        "columns": [
            "posts.id",
            "posts.answercount",
            "posthistory.postid",
            "users.id",
            "users.displayname",
            "posthistory.userid"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Dazed and Confused",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "most answers count refers to MAX(AnswerCount); post by slashnick refers to DisplayName = 'slashnick';",
        "values_list": [
            "users.displayname.dazed_and_confused"
        ],
        "original_question": "Which post by slashnick has the most answers count? State the post ID.",
        "question": "Which post by Dazed & Confused has the most answers count? State the post ID.",
        "original_SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'slashnick' ORDER BY T3.AnswerCount DESC LIMIT 1",
        "changes_information": {
            "original_value": "Dazed and Confused",
            "word_to_symbol_change": "Dazed & Confused"
        }
    },
    {
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Dazed and Confused' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
        "tables": [
            "users",
            "posts",
            "posthistory"
        ],
        "columns": [
            "posts.id",
            "posts.viewcount",
            "users.id",
            "posthistory.postid",
            "users.displayname",
            "posthistory.userid"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Dazed and Confused",
                "condition": "="
            },
            {
                "table": "users",
                "column": "displayname",
                "value": "Noah Snyder",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "Has higher popularity means the post has higher view count ; calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';",
        "values_list": [
            "users.displayname.harvey motulsky",
            "users.displayname.noah snyder"
        ],
        "original_question": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?",
        "question": "Among posts by Dazed & Confused and Noah Snyder, which one has higher popularity?",
        "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Harvey Motulsky' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
        "changes_information": {
            "original_value": "Dazed and Confused",
            "word_to_symbol_change": "Dazed & Confused"
        }
    },
    {
        "SQL": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Dazed and Confused' ORDER BY T2.ViewCount DESC LIMIT 1",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "posts.id",
            "posts.title",
            "posts.owneruserid",
            "users.id",
            "users.displayname",
            "posts.viewcount"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Dazed and Confused",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "DisplayName = 'Harvey Motulsky'; the most views refer to MAX(ViewCount);",
        "values_list": [
            "users.displayname.harvey motulsky"
        ],
        "original_question": "Which post by Harvey Motulsky has the most views? Please give the id and title of this post.",
        "question": "Which post by Dazed & Confused has the most views? Please give the id and title of this post.",
        "original_SQL": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Harvey Motulsky' ORDER BY T2.ViewCount DESC LIMIT 1",
        "changes_information": {
            "original_value": "Dazed and Confused",
            "word_to_symbol_change": "Dazed & Confused"
        }
    },
    {
        "SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Dazed and Confused' ORDER BY T1.Date DESC LIMIT 1",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "badges.userid",
            "badges.name",
            "users.id",
            "users.displayname",
            "badges.date"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Dazed and Confused",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "the latest badge refers to Name FROM badges where MAX(Date);",
        "values_list": [
            "users.displayname.dazed_and_confused"
        ],
        "original_question": "Identify the latest badge awarded to the user with the display name Emmett.",
        "question": "Identify the latest badge awarded to the user with the display name Dazed & Confused.",
        "original_SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ORDER BY T1.Date DESC LIMIT 1",
        "changes_information": {
            "original_value": "Dazed and Confused",
            "word_to_symbol_change": "Dazed & Confused"
        }
    },
    {
        "SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Dazed and Confused'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "badges.userid",
            "users.id",
            "users.displayname",
            "users.creationdate",
            "badges.date"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Dazed and Confused",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';",
        "values_list": [
            "users.displayname.dazed_and_confused"
        ],
        "original_question": "How long did it take the user, known by his or her display name 'Zolomon' to get the badge? Count from the date the user's account was created.",
        "question": "How long did it take the user, known by his or her display name 'Dazed & Confused' to get the badge? Count from the date the user's account was created.",
        "original_SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon'",
        "changes_information": {
            "original_value": "Dazed and Confused",
            "word_to_symbol_change": "Dazed & Confused"
        }
    },
    {
        "SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Dazed and Confused'",
        "tables": [
            "users"
        ],
        "columns": [
            "users.reputation",
            "users.views",
            "users.displayname"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Dazed and Confused",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "users.displayname.jarrod dixon"
        ],
        "original_question": "What is the reputation and view count of the user, who is known by his or her display name 'Jarrod Dixon'?",
        "question": "What is the reputation and view count of the user, who is known by his or her display name 'Dazed & Confused'?",
        "original_SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'",
        "changes_information": {
            "original_value": "Dazed and Confused",
            "word_to_symbol_change": "Dazed & Confused"
        }
    },
    {
        "SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'Dazed and Confused'",
        "tables": [
            "users"
        ],
        "columns": [
            "users.creationdate",
            "users.displayname"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Dazed and Confused",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
        "values_list": [
            "users.displayname.dazed_and_confused"
        ],
        "original_question": "When did the user known as 'IrishStat' create his or her account?",
        "question": "When did the user known as 'Dazed & Confused' create his or her account?",
        "original_SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'",
        "changes_information": {
            "original_value": "Dazed and Confused",
            "word_to_symbol_change": "Dazed & Confused"
        }
    },
    {
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Ben Smiley'",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.id",
            "posts.title",
            "users.displayname",
            "posts.owneruserid"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Ben Smiley",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"csgillespie\" is the DisplayName of user",
        "values_list": [
            "users.displayname.ben_smiley"
        ],
        "original_question": "Please list the titles of the posts owned by the user csgillespie?",
        "question": "Please list the titles of the posts owned by the user Ben & Smiley?",
        "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
        "changes_information": {
            "original_value": "Ben Smiley",
            "word_to_symbol_change": "Ben & Smiley"
        }
    },
    {
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Ben Smiley' ORDER BY T1.ViewCount DESC LIMIT 1",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "posts.title",
            "posts.owneruserid",
            "users.id",
            "users.displayname",
            "posts.viewcount"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Ben Smiley",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"csgillespie\" is the DisplayName of user; highest popularity refers to Max(ViewCount)",
        "values_list": [
            "users.displayname.ben_smiley"
        ],
        "original_question": "What is the title of the post that is owned by csgillespie and has the highest popularity?",
        "question": "What is the title of the post that is owned by Ben & Smiley and has the highest popularity?",
        "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.ViewCount DESC LIMIT 1",
        "changes_information": {
            "original_value": "Ben Smiley",
            "word_to_symbol_change": "Ben & Smiley"
        }
    },
    {
        "SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Ben Smiley'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "badges.userid",
            "users.displayname",
            "badges.name"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Ben Smiley",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"csgillespie\" is the DisplayName of user",
        "values_list": [
            "users.displayname.ben_smiley"
        ],
        "original_question": "Please list the names of the badges obtained by csgillespie.",
        "question": "Please list the names of the badges obtained by Ben & Smiley.",
        "original_SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
        "changes_information": {
            "original_value": "Ben Smiley",
            "word_to_symbol_change": "Ben & Smiley"
        }
    },
    {
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Ben Smiley'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "badges.userid",
            "users.displayname",
            "badges.name"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Ben Smiley",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"DatEpicCoderGuyWhoPrograms\" is the DisplayName;",
        "values_list": [
            "users.displayname.ben_smiley"
        ],
        "original_question": "For the user whose display name is \"DatEpicCoderGuyWhoPrograms\", what is his/her badge's name?",
        "question": "For the user whose display name is \"Ben & Smiley\", what is his/her badge's name?",
        "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms'",
        "changes_information": {
            "original_value": "Ben Smiley",
            "word_to_symbol_change": "Ben & Smiley"
        }
    },
    {
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Ben Smiley'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "badges.userid",
            "users.displayname",
            "badges.name"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Ben Smiley",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"SilentGhost\" is the DisplayName of user;",
        "values_list": [
            "users.displayname.ben_smiley"
        ],
        "original_question": "What is the badge name that user 'SilentGhost' obtained?",
        "question": "What is the badge name that user 'Ben & Smiley' obtained?",
        "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'SilentGhost'",
        "changes_information": {
            "original_value": "Ben Smiley",
            "word_to_symbol_change": "Ben & Smiley"
        }
    },
    {
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Ben Smiley'",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.id",
            "posts.title",
            "users.displayname",
            "posts.owneruserid"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Ben Smiley",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Vebjorn Ljosa\" is the DisplayName; last edited refers to LastEditorUserId",
        "values_list": [
            "users.displayname.vebjorn ljosa"
        ],
        "original_question": "List the title of posts which were edited by Vebjorn Ljosa.",
        "question": "List the title of posts which were edited by Ben & Smiley.",
        "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Vebjorn Ljosa'",
        "changes_information": {
            "original_value": "Ben Smiley",
            "word_to_symbol_change": "Ben & Smiley"
        }
    },
    {
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Ben Smiley'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "badges.userid",
            "users.displayname",
            "badges.name"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Ben Smiley",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "users.displayname.ben_smiley"
        ],
        "original_question": "What is the name of badge that the user whose display name is \"Pierre\" obtained?",
        "question": "What is the name of badge that the user whose display name is \"Ben & Smiley\" obtained?",
        "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Pierre'",
        "changes_information": {
            "original_value": "Ben Smiley",
            "word_to_symbol_change": "Ben & Smiley"
        }
    },
    {
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Ben Smiley'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "badges.userid",
            "users.displayname",
            "badges.name"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Ben Smiley",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Sharpie\" is the DisplayName of user; user refers to UserId",
        "values_list": [
            "users.displayname.ben_smiley"
        ],
        "original_question": "State the name of badge that the user whose display name is \"Sharpie\" obtained.",
        "question": "State the name of badge that the user whose display name is \"Ben & Smiley\" obtained.",
        "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sharpie'",
        "changes_information": {
            "original_value": "Ben Smiley",
            "word_to_symbol_change": "Ben & Smiley"
        }
    },
    {
        "SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Ben Smiley'",
        "tables": [
            "users",
            "posts",
            "posthistory"
        ],
        "columns": [
            "posts.tags",
            "posts.id",
            "users.id",
            "posthistory.postid",
            "users.displayname",
            "posthistory.userid"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Ben Smiley",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "DisplayName = 'John Salvatier';",
        "values_list": [
            "users.displayname.john salvatier"
        ],
        "original_question": "What is the name of tags used by John Salvatier's?",
        "question": "What is the name of tags used by Ben & Smiley's?",
        "original_SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'John Salvatier'",
        "changes_information": {
            "original_value": "Ben Smiley",
            "word_to_symbol_change": "Ben & Smiley"
        }
    },
    {
        "SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Ben Smiley' ORDER BY T3.AnswerCount DESC LIMIT 1",
        "tables": [
            "users",
            "posts",
            "posthistory"
        ],
        "columns": [
            "posts.id",
            "posts.answercount",
            "posthistory.postid",
            "users.id",
            "users.displayname",
            "posthistory.userid"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Ben Smiley",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "most answers count refers to MAX(AnswerCount); post by slashnick refers to DisplayName = 'slashnick';",
        "values_list": [
            "users.displayname.ben_smiley"
        ],
        "original_question": "Which post by slashnick has the most answers count? State the post ID.",
        "question": "Which post by Ben & Smiley has the most answers count? State the post ID.",
        "original_SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'slashnick' ORDER BY T3.AnswerCount DESC LIMIT 1",
        "changes_information": {
            "original_value": "Ben Smiley",
            "word_to_symbol_change": "Ben & Smiley"
        }
    },
    {
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Ben Smiley' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
        "tables": [
            "users",
            "posts",
            "posthistory"
        ],
        "columns": [
            "posts.id",
            "posts.viewcount",
            "users.id",
            "posthistory.postid",
            "users.displayname",
            "posthistory.userid"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Ben Smiley",
                "condition": "="
            },
            {
                "table": "users",
                "column": "displayname",
                "value": "Noah Snyder",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "Has higher popularity means the post has higher view count ; calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';",
        "values_list": [
            "users.displayname.harvey motulsky",
            "users.displayname.noah snyder"
        ],
        "original_question": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?",
        "question": "Among posts by Ben & Smiley and Noah Snyder, which one has higher popularity?",
        "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Harvey Motulsky' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
        "changes_information": {
            "original_value": "Ben Smiley",
            "word_to_symbol_change": "Ben & Smiley"
        }
    },
    {
        "SQL": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Ben Smiley' ORDER BY T2.ViewCount DESC LIMIT 1",
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "posts.id",
            "posts.title",
            "posts.owneruserid",
            "users.id",
            "users.displayname",
            "posts.viewcount"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Ben Smiley",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "DisplayName = 'Harvey Motulsky'; the most views refer to MAX(ViewCount);",
        "values_list": [
            "users.displayname.harvey motulsky"
        ],
        "original_question": "Which post by Harvey Motulsky has the most views? Please give the id and title of this post.",
        "question": "Which post by Ben & Smiley has the most views? Please give the id and title of this post.",
        "original_SQL": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Harvey Motulsky' ORDER BY T2.ViewCount DESC LIMIT 1",
        "changes_information": {
            "original_value": "Ben Smiley",
            "word_to_symbol_change": "Ben & Smiley"
        }
    },
    {
        "SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Ben Smiley' ORDER BY T1.Date DESC LIMIT 1",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "badges.userid",
            "badges.name",
            "users.id",
            "users.displayname",
            "badges.date"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Ben Smiley",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "the latest badge refers to Name FROM badges where MAX(Date);",
        "values_list": [
            "users.displayname.ben_smiley"
        ],
        "original_question": "Identify the latest badge awarded to the user with the display name Emmett.",
        "question": "Identify the latest badge awarded to the user with the display name Ben & Smiley.",
        "original_SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ORDER BY T1.Date DESC LIMIT 1",
        "changes_information": {
            "original_value": "Ben Smiley",
            "word_to_symbol_change": "Ben & Smiley"
        }
    },
    {
        "SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Ben Smiley'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "badges.userid",
            "users.id",
            "users.displayname",
            "users.creationdate",
            "badges.date"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Ben Smiley",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';",
        "values_list": [
            "users.displayname.ben_smiley"
        ],
        "original_question": "How long did it take the user, known by his or her display name 'Zolomon' to get the badge? Count from the date the user's account was created.",
        "question": "How long did it take the user, known by his or her display name 'Ben & Smiley' to get the badge? Count from the date the user's account was created.",
        "original_SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon'",
        "changes_information": {
            "original_value": "Ben Smiley",
            "word_to_symbol_change": "Ben & Smiley"
        }
    },
    {
        "SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Ben Smiley'",
        "tables": [
            "users"
        ],
        "columns": [
            "users.reputation",
            "users.views",
            "users.displayname"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Ben Smiley",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "users.displayname.jarrod dixon"
        ],
        "original_question": "What is the reputation and view count of the user, who is known by his or her display name 'Jarrod Dixon'?",
        "question": "What is the reputation and view count of the user, who is known by his or her display name 'Ben & Smiley'?",
        "original_SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'",
        "changes_information": {
            "original_value": "Ben Smiley",
            "word_to_symbol_change": "Ben & Smiley"
        }
    },
    {
        "SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'Ben Smiley'",
        "tables": [
            "users"
        ],
        "columns": [
            "users.creationdate",
            "users.displayname"
        ],
        "values": [
            {
                "table": "users",
                "column": "displayname",
                "value": "Ben Smiley",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
        "values_list": [
            "users.displayname.ben_smiley"
        ],
        "original_question": "When did the user known as 'IrishStat' create his or her account?",
        "question": "When did the user known as 'Ben & Smiley' create his or her account?",
        "original_SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'",
        "changes_information": {
            "original_value": "Ben Smiley",
            "word_to_symbol_change": "Ben & Smiley"
        }
    },
    {
        "SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Some where between this world and the other'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "users.location",
            "badges.userid",
            "badges.date"
        ],
        "values": [
            {
                "table": "users",
                "column": "location",
                "value": "Some where between this world and the other",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Rochester, NY\" is the Location of user; user refers to UserId",
        "values_list": [
            "users.location.rochester, ny"
        ],
        "original_question": "List out the dates that users who are located in Rochester, NY obtained their badges?",
        "question": "List out the dates that users who are located in Some where between this world & the other obtained their badges?",
        "original_SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Rochester, NY'",
        "changes_information": {
            "original_value": "Some where between this world and the other",
            "word_to_symbol_change": "Some where between this world & the other"
        }
    },
    {
        "SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Some where between this world and the other'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.age",
            "users.id",
            "users.location",
            "badges.userid"
        ],
        "values": [
            {
                "table": "users",
                "column": "location",
                "value": "Some where between this world and the other",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Vienna, Austria\" is the Location",
        "values_list": [
            "users.location.vienna, austria"
        ],
        "original_question": "List out the age of users who located in Vienna, Austria obtained the badge?",
        "question": "List out the age of users who located in Some where between this world & the other obtained the badge?",
        "original_SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Vienna, Austria'",
        "changes_information": {
            "original_value": "Some where between this world and the other",
            "word_to_symbol_change": "Some where between this world & the other"
        }
    },
    {
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'Some where between this world and the other'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.location",
            "badges.userid",
            "badges.name",
            "users.id",
            "badges.date"
        ],
        "values": [
            {
                "table": "users",
                "column": "location",
                "value": "Some where between this world and the other",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "received in 2011 refers to year(Date) = 2011;",
        "values_list": [
            "users.location.north pole"
        ],
        "original_question": "Provide the badge names received in 2011 for the user whose location is in the North Pole.",
        "question": "Provide the badge names received in 2011 for the user whose location is in the Some where between this world & the other.",
        "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'North Pole'",
        "changes_information": {
            "original_value": "Some where between this world and the other",
            "word_to_symbol_change": "Some where between this world & the other"
        }
    },
    {
        "SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'University of Texas at Austin'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "users.location",
            "badges.userid",
            "badges.date"
        ],
        "values": [
            {
                "table": "users",
                "column": "location",
                "value": "University of Texas at Austin",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Rochester, NY\" is the Location of user; user refers to UserId",
        "values_list": [
            "users.location.rochester, ny"
        ],
        "original_question": "List out the dates that users who are located in Rochester, NY obtained their badges?",
        "question": "List out the dates that users who are located in University of Texas @ Austin obtained their badges?",
        "original_SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Rochester, NY'",
        "changes_information": {
            "original_value": "University of Texas at Austin",
            "word_to_symbol_change": "University of Texas @ Austin"
        }
    },
    {
        "SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'University of Texas at Austin'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.age",
            "users.id",
            "users.location",
            "badges.userid"
        ],
        "values": [
            {
                "table": "users",
                "column": "location",
                "value": "University of Texas at Austin",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Vienna, Austria\" is the Location",
        "values_list": [
            "users.location.vienna, austria"
        ],
        "original_question": "List out the age of users who located in Vienna, Austria obtained the badge?",
        "question": "List out the age of users who located in University of Texas @ Austin obtained the badge?",
        "original_SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Vienna, Austria'",
        "changes_information": {
            "original_value": "University of Texas at Austin",
            "word_to_symbol_change": "University of Texas @ Austin"
        }
    },
    {
        "SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Bizarre and beautiful world'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "users.location",
            "badges.userid",
            "badges.date"
        ],
        "values": [
            {
                "table": "users",
                "column": "location",
                "value": "Bizarre and beautiful world",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Rochester, NY\" is the Location of user; user refers to UserId",
        "values_list": [
            "users.location.rochester, ny"
        ],
        "original_question": "List out the dates that users who are located in Rochester, NY obtained their badges?",
        "question": "List out the dates that users who are located in Bizarre & beautiful world obtained their badges?",
        "original_SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Rochester, NY'",
        "changes_information": {
            "original_value": "Bizarre and beautiful world",
            "word_to_symbol_change": "Bizarre & beautiful world"
        }
    },
    {
        "SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Bizarre and beautiful world'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.age",
            "users.id",
            "users.location",
            "badges.userid"
        ],
        "values": [
            {
                "table": "users",
                "column": "location",
                "value": "Bizarre and beautiful world",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Vienna, Austria\" is the Location",
        "values_list": [
            "users.location.vienna, austria"
        ],
        "original_question": "List out the age of users who located in Vienna, Austria obtained the badge?",
        "question": "List out the age of users who located in Bizarre & beautiful world obtained the badge?",
        "original_SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Vienna, Austria'",
        "changes_information": {
            "original_value": "Bizarre and beautiful world",
            "word_to_symbol_change": "Bizarre & beautiful world"
        }
    }
]